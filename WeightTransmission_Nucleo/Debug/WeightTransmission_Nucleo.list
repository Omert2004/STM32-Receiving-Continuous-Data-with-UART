
WeightTransmission_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027a8  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08002864  08002864  00003864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002918  08002918  00004008  2**0
                  CONTENTS
  4 .ARM          00000000  08002918  08002918  00004008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002918  08002918  00004008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002918  08002918  00003918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800291c  0800291c  0000391c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000008  20000000  08002920  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  20000008  08002928  00004008  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08002928  000041b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00004008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004493  00000000  00000000  00004030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f0f  00000000  00000000  000084c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e0  00000000  00000000  000093d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000515  00000000  00000000  00009ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000115b6  00000000  00000000  00009fcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000048ee  00000000  00000000  0001b583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00060f9e  00000000  00000000  0001fe71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00080e0f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000189c  00000000  00000000  00080e54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  000826f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000008 	.word	0x20000008
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800284c 	.word	0x0800284c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000000c 	.word	0x2000000c
 8000100:	0800284c 	.word	0x0800284c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_dmul>:
 800021c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800021e:	4657      	mov	r7, sl
 8000220:	46de      	mov	lr, fp
 8000222:	464e      	mov	r6, r9
 8000224:	4645      	mov	r5, r8
 8000226:	b5e0      	push	{r5, r6, r7, lr}
 8000228:	001f      	movs	r7, r3
 800022a:	030b      	lsls	r3, r1, #12
 800022c:	0b1b      	lsrs	r3, r3, #12
 800022e:	0016      	movs	r6, r2
 8000230:	469a      	mov	sl, r3
 8000232:	0fca      	lsrs	r2, r1, #31
 8000234:	004b      	lsls	r3, r1, #1
 8000236:	0004      	movs	r4, r0
 8000238:	4693      	mov	fp, r2
 800023a:	b087      	sub	sp, #28
 800023c:	0d5b      	lsrs	r3, r3, #21
 800023e:	d100      	bne.n	8000242 <__aeabi_dmul+0x26>
 8000240:	e0d5      	b.n	80003ee <__aeabi_dmul+0x1d2>
 8000242:	4abb      	ldr	r2, [pc, #748]	@ (8000530 <__aeabi_dmul+0x314>)
 8000244:	4293      	cmp	r3, r2
 8000246:	d100      	bne.n	800024a <__aeabi_dmul+0x2e>
 8000248:	e0f8      	b.n	800043c <__aeabi_dmul+0x220>
 800024a:	4651      	mov	r1, sl
 800024c:	0f42      	lsrs	r2, r0, #29
 800024e:	00c9      	lsls	r1, r1, #3
 8000250:	430a      	orrs	r2, r1
 8000252:	2180      	movs	r1, #128	@ 0x80
 8000254:	0409      	lsls	r1, r1, #16
 8000256:	4311      	orrs	r1, r2
 8000258:	00c2      	lsls	r2, r0, #3
 800025a:	4691      	mov	r9, r2
 800025c:	4ab5      	ldr	r2, [pc, #724]	@ (8000534 <__aeabi_dmul+0x318>)
 800025e:	468a      	mov	sl, r1
 8000260:	189d      	adds	r5, r3, r2
 8000262:	2300      	movs	r3, #0
 8000264:	4698      	mov	r8, r3
 8000266:	9302      	str	r3, [sp, #8]
 8000268:	033c      	lsls	r4, r7, #12
 800026a:	007b      	lsls	r3, r7, #1
 800026c:	0ffa      	lsrs	r2, r7, #31
 800026e:	0030      	movs	r0, r6
 8000270:	0b24      	lsrs	r4, r4, #12
 8000272:	0d5b      	lsrs	r3, r3, #21
 8000274:	9200      	str	r2, [sp, #0]
 8000276:	d100      	bne.n	800027a <__aeabi_dmul+0x5e>
 8000278:	e096      	b.n	80003a8 <__aeabi_dmul+0x18c>
 800027a:	4aad      	ldr	r2, [pc, #692]	@ (8000530 <__aeabi_dmul+0x314>)
 800027c:	4293      	cmp	r3, r2
 800027e:	d031      	beq.n	80002e4 <__aeabi_dmul+0xc8>
 8000280:	0f72      	lsrs	r2, r6, #29
 8000282:	00e4      	lsls	r4, r4, #3
 8000284:	4322      	orrs	r2, r4
 8000286:	2480      	movs	r4, #128	@ 0x80
 8000288:	0424      	lsls	r4, r4, #16
 800028a:	4314      	orrs	r4, r2
 800028c:	4aa9      	ldr	r2, [pc, #676]	@ (8000534 <__aeabi_dmul+0x318>)
 800028e:	00f0      	lsls	r0, r6, #3
 8000290:	4694      	mov	ip, r2
 8000292:	4463      	add	r3, ip
 8000294:	195b      	adds	r3, r3, r5
 8000296:	1c5a      	adds	r2, r3, #1
 8000298:	9201      	str	r2, [sp, #4]
 800029a:	4642      	mov	r2, r8
 800029c:	2600      	movs	r6, #0
 800029e:	2a0a      	cmp	r2, #10
 80002a0:	dc42      	bgt.n	8000328 <__aeabi_dmul+0x10c>
 80002a2:	465a      	mov	r2, fp
 80002a4:	9900      	ldr	r1, [sp, #0]
 80002a6:	404a      	eors	r2, r1
 80002a8:	4693      	mov	fp, r2
 80002aa:	4642      	mov	r2, r8
 80002ac:	2a02      	cmp	r2, #2
 80002ae:	dc32      	bgt.n	8000316 <__aeabi_dmul+0xfa>
 80002b0:	3a01      	subs	r2, #1
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	d900      	bls.n	80002b8 <__aeabi_dmul+0x9c>
 80002b6:	e149      	b.n	800054c <__aeabi_dmul+0x330>
 80002b8:	2e02      	cmp	r6, #2
 80002ba:	d100      	bne.n	80002be <__aeabi_dmul+0xa2>
 80002bc:	e0ca      	b.n	8000454 <__aeabi_dmul+0x238>
 80002be:	2e01      	cmp	r6, #1
 80002c0:	d13d      	bne.n	800033e <__aeabi_dmul+0x122>
 80002c2:	2300      	movs	r3, #0
 80002c4:	2400      	movs	r4, #0
 80002c6:	2200      	movs	r2, #0
 80002c8:	0010      	movs	r0, r2
 80002ca:	465a      	mov	r2, fp
 80002cc:	051b      	lsls	r3, r3, #20
 80002ce:	4323      	orrs	r3, r4
 80002d0:	07d2      	lsls	r2, r2, #31
 80002d2:	4313      	orrs	r3, r2
 80002d4:	0019      	movs	r1, r3
 80002d6:	b007      	add	sp, #28
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	46bb      	mov	fp, r7
 80002dc:	46b2      	mov	sl, r6
 80002de:	46a9      	mov	r9, r5
 80002e0:	46a0      	mov	r8, r4
 80002e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002e4:	4b92      	ldr	r3, [pc, #584]	@ (8000530 <__aeabi_dmul+0x314>)
 80002e6:	4326      	orrs	r6, r4
 80002e8:	18eb      	adds	r3, r5, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d100      	bne.n	80002f0 <__aeabi_dmul+0xd4>
 80002ee:	e0bb      	b.n	8000468 <__aeabi_dmul+0x24c>
 80002f0:	2203      	movs	r2, #3
 80002f2:	4641      	mov	r1, r8
 80002f4:	4311      	orrs	r1, r2
 80002f6:	465a      	mov	r2, fp
 80002f8:	4688      	mov	r8, r1
 80002fa:	9900      	ldr	r1, [sp, #0]
 80002fc:	404a      	eors	r2, r1
 80002fe:	2180      	movs	r1, #128	@ 0x80
 8000300:	0109      	lsls	r1, r1, #4
 8000302:	468c      	mov	ip, r1
 8000304:	0029      	movs	r1, r5
 8000306:	4461      	add	r1, ip
 8000308:	9101      	str	r1, [sp, #4]
 800030a:	4641      	mov	r1, r8
 800030c:	290a      	cmp	r1, #10
 800030e:	dd00      	ble.n	8000312 <__aeabi_dmul+0xf6>
 8000310:	e233      	b.n	800077a <__aeabi_dmul+0x55e>
 8000312:	4693      	mov	fp, r2
 8000314:	2603      	movs	r6, #3
 8000316:	4642      	mov	r2, r8
 8000318:	2701      	movs	r7, #1
 800031a:	4097      	lsls	r7, r2
 800031c:	21a6      	movs	r1, #166	@ 0xa6
 800031e:	003a      	movs	r2, r7
 8000320:	00c9      	lsls	r1, r1, #3
 8000322:	400a      	ands	r2, r1
 8000324:	420f      	tst	r7, r1
 8000326:	d031      	beq.n	800038c <__aeabi_dmul+0x170>
 8000328:	9e02      	ldr	r6, [sp, #8]
 800032a:	2e02      	cmp	r6, #2
 800032c:	d100      	bne.n	8000330 <__aeabi_dmul+0x114>
 800032e:	e235      	b.n	800079c <__aeabi_dmul+0x580>
 8000330:	2e03      	cmp	r6, #3
 8000332:	d100      	bne.n	8000336 <__aeabi_dmul+0x11a>
 8000334:	e1d2      	b.n	80006dc <__aeabi_dmul+0x4c0>
 8000336:	4654      	mov	r4, sl
 8000338:	4648      	mov	r0, r9
 800033a:	2e01      	cmp	r6, #1
 800033c:	d0c1      	beq.n	80002c2 <__aeabi_dmul+0xa6>
 800033e:	9a01      	ldr	r2, [sp, #4]
 8000340:	4b7d      	ldr	r3, [pc, #500]	@ (8000538 <__aeabi_dmul+0x31c>)
 8000342:	4694      	mov	ip, r2
 8000344:	4463      	add	r3, ip
 8000346:	2b00      	cmp	r3, #0
 8000348:	dc00      	bgt.n	800034c <__aeabi_dmul+0x130>
 800034a:	e0c0      	b.n	80004ce <__aeabi_dmul+0x2b2>
 800034c:	0742      	lsls	r2, r0, #29
 800034e:	d009      	beq.n	8000364 <__aeabi_dmul+0x148>
 8000350:	220f      	movs	r2, #15
 8000352:	4002      	ands	r2, r0
 8000354:	2a04      	cmp	r2, #4
 8000356:	d005      	beq.n	8000364 <__aeabi_dmul+0x148>
 8000358:	1d02      	adds	r2, r0, #4
 800035a:	4282      	cmp	r2, r0
 800035c:	4180      	sbcs	r0, r0
 800035e:	4240      	negs	r0, r0
 8000360:	1824      	adds	r4, r4, r0
 8000362:	0010      	movs	r0, r2
 8000364:	01e2      	lsls	r2, r4, #7
 8000366:	d506      	bpl.n	8000376 <__aeabi_dmul+0x15a>
 8000368:	4b74      	ldr	r3, [pc, #464]	@ (800053c <__aeabi_dmul+0x320>)
 800036a:	9a01      	ldr	r2, [sp, #4]
 800036c:	401c      	ands	r4, r3
 800036e:	2380      	movs	r3, #128	@ 0x80
 8000370:	4694      	mov	ip, r2
 8000372:	00db      	lsls	r3, r3, #3
 8000374:	4463      	add	r3, ip
 8000376:	4a72      	ldr	r2, [pc, #456]	@ (8000540 <__aeabi_dmul+0x324>)
 8000378:	4293      	cmp	r3, r2
 800037a:	dc6b      	bgt.n	8000454 <__aeabi_dmul+0x238>
 800037c:	0762      	lsls	r2, r4, #29
 800037e:	08c0      	lsrs	r0, r0, #3
 8000380:	0264      	lsls	r4, r4, #9
 8000382:	055b      	lsls	r3, r3, #21
 8000384:	4302      	orrs	r2, r0
 8000386:	0b24      	lsrs	r4, r4, #12
 8000388:	0d5b      	lsrs	r3, r3, #21
 800038a:	e79d      	b.n	80002c8 <__aeabi_dmul+0xac>
 800038c:	2190      	movs	r1, #144	@ 0x90
 800038e:	0089      	lsls	r1, r1, #2
 8000390:	420f      	tst	r7, r1
 8000392:	d163      	bne.n	800045c <__aeabi_dmul+0x240>
 8000394:	2288      	movs	r2, #136	@ 0x88
 8000396:	423a      	tst	r2, r7
 8000398:	d100      	bne.n	800039c <__aeabi_dmul+0x180>
 800039a:	e0d7      	b.n	800054c <__aeabi_dmul+0x330>
 800039c:	9b00      	ldr	r3, [sp, #0]
 800039e:	46a2      	mov	sl, r4
 80003a0:	469b      	mov	fp, r3
 80003a2:	4681      	mov	r9, r0
 80003a4:	9602      	str	r6, [sp, #8]
 80003a6:	e7bf      	b.n	8000328 <__aeabi_dmul+0x10c>
 80003a8:	0023      	movs	r3, r4
 80003aa:	4333      	orrs	r3, r6
 80003ac:	d100      	bne.n	80003b0 <__aeabi_dmul+0x194>
 80003ae:	e07f      	b.n	80004b0 <__aeabi_dmul+0x294>
 80003b0:	2c00      	cmp	r4, #0
 80003b2:	d100      	bne.n	80003b6 <__aeabi_dmul+0x19a>
 80003b4:	e1ad      	b.n	8000712 <__aeabi_dmul+0x4f6>
 80003b6:	0020      	movs	r0, r4
 80003b8:	f000 fa26 	bl	8000808 <__clzsi2>
 80003bc:	0002      	movs	r2, r0
 80003be:	0003      	movs	r3, r0
 80003c0:	3a0b      	subs	r2, #11
 80003c2:	201d      	movs	r0, #29
 80003c4:	0019      	movs	r1, r3
 80003c6:	1a82      	subs	r2, r0, r2
 80003c8:	0030      	movs	r0, r6
 80003ca:	3908      	subs	r1, #8
 80003cc:	40d0      	lsrs	r0, r2
 80003ce:	408c      	lsls	r4, r1
 80003d0:	4304      	orrs	r4, r0
 80003d2:	0030      	movs	r0, r6
 80003d4:	4088      	lsls	r0, r1
 80003d6:	4a5b      	ldr	r2, [pc, #364]	@ (8000544 <__aeabi_dmul+0x328>)
 80003d8:	1aeb      	subs	r3, r5, r3
 80003da:	4694      	mov	ip, r2
 80003dc:	4463      	add	r3, ip
 80003de:	1c5a      	adds	r2, r3, #1
 80003e0:	9201      	str	r2, [sp, #4]
 80003e2:	4642      	mov	r2, r8
 80003e4:	2600      	movs	r6, #0
 80003e6:	2a0a      	cmp	r2, #10
 80003e8:	dc00      	bgt.n	80003ec <__aeabi_dmul+0x1d0>
 80003ea:	e75a      	b.n	80002a2 <__aeabi_dmul+0x86>
 80003ec:	e79c      	b.n	8000328 <__aeabi_dmul+0x10c>
 80003ee:	4653      	mov	r3, sl
 80003f0:	4303      	orrs	r3, r0
 80003f2:	4699      	mov	r9, r3
 80003f4:	d054      	beq.n	80004a0 <__aeabi_dmul+0x284>
 80003f6:	4653      	mov	r3, sl
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_dmul+0x1e2>
 80003fc:	e177      	b.n	80006ee <__aeabi_dmul+0x4d2>
 80003fe:	4650      	mov	r0, sl
 8000400:	f000 fa02 	bl	8000808 <__clzsi2>
 8000404:	230b      	movs	r3, #11
 8000406:	425b      	negs	r3, r3
 8000408:	469c      	mov	ip, r3
 800040a:	0002      	movs	r2, r0
 800040c:	4484      	add	ip, r0
 800040e:	0011      	movs	r1, r2
 8000410:	4650      	mov	r0, sl
 8000412:	3908      	subs	r1, #8
 8000414:	4088      	lsls	r0, r1
 8000416:	231d      	movs	r3, #29
 8000418:	4680      	mov	r8, r0
 800041a:	4660      	mov	r0, ip
 800041c:	1a1b      	subs	r3, r3, r0
 800041e:	0020      	movs	r0, r4
 8000420:	40d8      	lsrs	r0, r3
 8000422:	0003      	movs	r3, r0
 8000424:	4640      	mov	r0, r8
 8000426:	4303      	orrs	r3, r0
 8000428:	469a      	mov	sl, r3
 800042a:	0023      	movs	r3, r4
 800042c:	408b      	lsls	r3, r1
 800042e:	4699      	mov	r9, r3
 8000430:	2300      	movs	r3, #0
 8000432:	4d44      	ldr	r5, [pc, #272]	@ (8000544 <__aeabi_dmul+0x328>)
 8000434:	4698      	mov	r8, r3
 8000436:	1aad      	subs	r5, r5, r2
 8000438:	9302      	str	r3, [sp, #8]
 800043a:	e715      	b.n	8000268 <__aeabi_dmul+0x4c>
 800043c:	4652      	mov	r2, sl
 800043e:	4302      	orrs	r2, r0
 8000440:	4691      	mov	r9, r2
 8000442:	d126      	bne.n	8000492 <__aeabi_dmul+0x276>
 8000444:	2200      	movs	r2, #0
 8000446:	001d      	movs	r5, r3
 8000448:	2302      	movs	r3, #2
 800044a:	4692      	mov	sl, r2
 800044c:	3208      	adds	r2, #8
 800044e:	4690      	mov	r8, r2
 8000450:	9302      	str	r3, [sp, #8]
 8000452:	e709      	b.n	8000268 <__aeabi_dmul+0x4c>
 8000454:	2400      	movs	r4, #0
 8000456:	2200      	movs	r2, #0
 8000458:	4b35      	ldr	r3, [pc, #212]	@ (8000530 <__aeabi_dmul+0x314>)
 800045a:	e735      	b.n	80002c8 <__aeabi_dmul+0xac>
 800045c:	2300      	movs	r3, #0
 800045e:	2480      	movs	r4, #128	@ 0x80
 8000460:	469b      	mov	fp, r3
 8000462:	0324      	lsls	r4, r4, #12
 8000464:	4b32      	ldr	r3, [pc, #200]	@ (8000530 <__aeabi_dmul+0x314>)
 8000466:	e72f      	b.n	80002c8 <__aeabi_dmul+0xac>
 8000468:	2202      	movs	r2, #2
 800046a:	4641      	mov	r1, r8
 800046c:	4311      	orrs	r1, r2
 800046e:	2280      	movs	r2, #128	@ 0x80
 8000470:	0112      	lsls	r2, r2, #4
 8000472:	4694      	mov	ip, r2
 8000474:	002a      	movs	r2, r5
 8000476:	4462      	add	r2, ip
 8000478:	4688      	mov	r8, r1
 800047a:	9201      	str	r2, [sp, #4]
 800047c:	290a      	cmp	r1, #10
 800047e:	dd00      	ble.n	8000482 <__aeabi_dmul+0x266>
 8000480:	e752      	b.n	8000328 <__aeabi_dmul+0x10c>
 8000482:	465a      	mov	r2, fp
 8000484:	2000      	movs	r0, #0
 8000486:	9900      	ldr	r1, [sp, #0]
 8000488:	0004      	movs	r4, r0
 800048a:	404a      	eors	r2, r1
 800048c:	4693      	mov	fp, r2
 800048e:	2602      	movs	r6, #2
 8000490:	e70b      	b.n	80002aa <__aeabi_dmul+0x8e>
 8000492:	220c      	movs	r2, #12
 8000494:	001d      	movs	r5, r3
 8000496:	2303      	movs	r3, #3
 8000498:	4681      	mov	r9, r0
 800049a:	4690      	mov	r8, r2
 800049c:	9302      	str	r3, [sp, #8]
 800049e:	e6e3      	b.n	8000268 <__aeabi_dmul+0x4c>
 80004a0:	2300      	movs	r3, #0
 80004a2:	469a      	mov	sl, r3
 80004a4:	3304      	adds	r3, #4
 80004a6:	4698      	mov	r8, r3
 80004a8:	3b03      	subs	r3, #3
 80004aa:	2500      	movs	r5, #0
 80004ac:	9302      	str	r3, [sp, #8]
 80004ae:	e6db      	b.n	8000268 <__aeabi_dmul+0x4c>
 80004b0:	4642      	mov	r2, r8
 80004b2:	3301      	adds	r3, #1
 80004b4:	431a      	orrs	r2, r3
 80004b6:	002b      	movs	r3, r5
 80004b8:	4690      	mov	r8, r2
 80004ba:	1c5a      	adds	r2, r3, #1
 80004bc:	9201      	str	r2, [sp, #4]
 80004be:	4642      	mov	r2, r8
 80004c0:	2400      	movs	r4, #0
 80004c2:	2000      	movs	r0, #0
 80004c4:	2601      	movs	r6, #1
 80004c6:	2a0a      	cmp	r2, #10
 80004c8:	dc00      	bgt.n	80004cc <__aeabi_dmul+0x2b0>
 80004ca:	e6ea      	b.n	80002a2 <__aeabi_dmul+0x86>
 80004cc:	e72c      	b.n	8000328 <__aeabi_dmul+0x10c>
 80004ce:	2201      	movs	r2, #1
 80004d0:	1ad2      	subs	r2, r2, r3
 80004d2:	2a38      	cmp	r2, #56	@ 0x38
 80004d4:	dd00      	ble.n	80004d8 <__aeabi_dmul+0x2bc>
 80004d6:	e6f4      	b.n	80002c2 <__aeabi_dmul+0xa6>
 80004d8:	2a1f      	cmp	r2, #31
 80004da:	dc00      	bgt.n	80004de <__aeabi_dmul+0x2c2>
 80004dc:	e12a      	b.n	8000734 <__aeabi_dmul+0x518>
 80004de:	211f      	movs	r1, #31
 80004e0:	4249      	negs	r1, r1
 80004e2:	1acb      	subs	r3, r1, r3
 80004e4:	0021      	movs	r1, r4
 80004e6:	40d9      	lsrs	r1, r3
 80004e8:	000b      	movs	r3, r1
 80004ea:	2a20      	cmp	r2, #32
 80004ec:	d005      	beq.n	80004fa <__aeabi_dmul+0x2de>
 80004ee:	4a16      	ldr	r2, [pc, #88]	@ (8000548 <__aeabi_dmul+0x32c>)
 80004f0:	9d01      	ldr	r5, [sp, #4]
 80004f2:	4694      	mov	ip, r2
 80004f4:	4465      	add	r5, ip
 80004f6:	40ac      	lsls	r4, r5
 80004f8:	4320      	orrs	r0, r4
 80004fa:	1e42      	subs	r2, r0, #1
 80004fc:	4190      	sbcs	r0, r2
 80004fe:	4318      	orrs	r0, r3
 8000500:	2307      	movs	r3, #7
 8000502:	0019      	movs	r1, r3
 8000504:	2400      	movs	r4, #0
 8000506:	4001      	ands	r1, r0
 8000508:	4203      	tst	r3, r0
 800050a:	d00c      	beq.n	8000526 <__aeabi_dmul+0x30a>
 800050c:	230f      	movs	r3, #15
 800050e:	4003      	ands	r3, r0
 8000510:	2b04      	cmp	r3, #4
 8000512:	d100      	bne.n	8000516 <__aeabi_dmul+0x2fa>
 8000514:	e140      	b.n	8000798 <__aeabi_dmul+0x57c>
 8000516:	1d03      	adds	r3, r0, #4
 8000518:	4283      	cmp	r3, r0
 800051a:	41a4      	sbcs	r4, r4
 800051c:	0018      	movs	r0, r3
 800051e:	4264      	negs	r4, r4
 8000520:	0761      	lsls	r1, r4, #29
 8000522:	0264      	lsls	r4, r4, #9
 8000524:	0b24      	lsrs	r4, r4, #12
 8000526:	08c2      	lsrs	r2, r0, #3
 8000528:	2300      	movs	r3, #0
 800052a:	430a      	orrs	r2, r1
 800052c:	e6cc      	b.n	80002c8 <__aeabi_dmul+0xac>
 800052e:	46c0      	nop			@ (mov r8, r8)
 8000530:	000007ff 	.word	0x000007ff
 8000534:	fffffc01 	.word	0xfffffc01
 8000538:	000003ff 	.word	0x000003ff
 800053c:	feffffff 	.word	0xfeffffff
 8000540:	000007fe 	.word	0x000007fe
 8000544:	fffffc0d 	.word	0xfffffc0d
 8000548:	0000043e 	.word	0x0000043e
 800054c:	4649      	mov	r1, r9
 800054e:	464a      	mov	r2, r9
 8000550:	0409      	lsls	r1, r1, #16
 8000552:	0c09      	lsrs	r1, r1, #16
 8000554:	000d      	movs	r5, r1
 8000556:	0c16      	lsrs	r6, r2, #16
 8000558:	0c02      	lsrs	r2, r0, #16
 800055a:	0400      	lsls	r0, r0, #16
 800055c:	0c00      	lsrs	r0, r0, #16
 800055e:	4345      	muls	r5, r0
 8000560:	46ac      	mov	ip, r5
 8000562:	0005      	movs	r5, r0
 8000564:	4375      	muls	r5, r6
 8000566:	46a8      	mov	r8, r5
 8000568:	0015      	movs	r5, r2
 800056a:	000f      	movs	r7, r1
 800056c:	4375      	muls	r5, r6
 800056e:	9200      	str	r2, [sp, #0]
 8000570:	9502      	str	r5, [sp, #8]
 8000572:	002a      	movs	r2, r5
 8000574:	9d00      	ldr	r5, [sp, #0]
 8000576:	436f      	muls	r7, r5
 8000578:	4665      	mov	r5, ip
 800057a:	0c2d      	lsrs	r5, r5, #16
 800057c:	46a9      	mov	r9, r5
 800057e:	4447      	add	r7, r8
 8000580:	444f      	add	r7, r9
 8000582:	45b8      	cmp	r8, r7
 8000584:	d905      	bls.n	8000592 <__aeabi_dmul+0x376>
 8000586:	0015      	movs	r5, r2
 8000588:	2280      	movs	r2, #128	@ 0x80
 800058a:	0252      	lsls	r2, r2, #9
 800058c:	4690      	mov	r8, r2
 800058e:	4445      	add	r5, r8
 8000590:	9502      	str	r5, [sp, #8]
 8000592:	0c3d      	lsrs	r5, r7, #16
 8000594:	9503      	str	r5, [sp, #12]
 8000596:	4665      	mov	r5, ip
 8000598:	042d      	lsls	r5, r5, #16
 800059a:	043f      	lsls	r7, r7, #16
 800059c:	0c2d      	lsrs	r5, r5, #16
 800059e:	46ac      	mov	ip, r5
 80005a0:	003d      	movs	r5, r7
 80005a2:	4465      	add	r5, ip
 80005a4:	9504      	str	r5, [sp, #16]
 80005a6:	0c25      	lsrs	r5, r4, #16
 80005a8:	0424      	lsls	r4, r4, #16
 80005aa:	0c24      	lsrs	r4, r4, #16
 80005ac:	46ac      	mov	ip, r5
 80005ae:	0025      	movs	r5, r4
 80005b0:	4375      	muls	r5, r6
 80005b2:	46a8      	mov	r8, r5
 80005b4:	4665      	mov	r5, ip
 80005b6:	000f      	movs	r7, r1
 80005b8:	4369      	muls	r1, r5
 80005ba:	4441      	add	r1, r8
 80005bc:	4689      	mov	r9, r1
 80005be:	4367      	muls	r7, r4
 80005c0:	0c39      	lsrs	r1, r7, #16
 80005c2:	4449      	add	r1, r9
 80005c4:	436e      	muls	r6, r5
 80005c6:	4588      	cmp	r8, r1
 80005c8:	d903      	bls.n	80005d2 <__aeabi_dmul+0x3b6>
 80005ca:	2280      	movs	r2, #128	@ 0x80
 80005cc:	0252      	lsls	r2, r2, #9
 80005ce:	4690      	mov	r8, r2
 80005d0:	4446      	add	r6, r8
 80005d2:	0c0d      	lsrs	r5, r1, #16
 80005d4:	46a8      	mov	r8, r5
 80005d6:	0035      	movs	r5, r6
 80005d8:	4445      	add	r5, r8
 80005da:	9505      	str	r5, [sp, #20]
 80005dc:	9d03      	ldr	r5, [sp, #12]
 80005de:	043f      	lsls	r7, r7, #16
 80005e0:	46a8      	mov	r8, r5
 80005e2:	0c3f      	lsrs	r7, r7, #16
 80005e4:	0409      	lsls	r1, r1, #16
 80005e6:	19c9      	adds	r1, r1, r7
 80005e8:	4488      	add	r8, r1
 80005ea:	4645      	mov	r5, r8
 80005ec:	9503      	str	r5, [sp, #12]
 80005ee:	4655      	mov	r5, sl
 80005f0:	042e      	lsls	r6, r5, #16
 80005f2:	0c36      	lsrs	r6, r6, #16
 80005f4:	0c2f      	lsrs	r7, r5, #16
 80005f6:	0035      	movs	r5, r6
 80005f8:	4345      	muls	r5, r0
 80005fa:	4378      	muls	r0, r7
 80005fc:	4681      	mov	r9, r0
 80005fe:	0038      	movs	r0, r7
 8000600:	46a8      	mov	r8, r5
 8000602:	0c2d      	lsrs	r5, r5, #16
 8000604:	46aa      	mov	sl, r5
 8000606:	9a00      	ldr	r2, [sp, #0]
 8000608:	4350      	muls	r0, r2
 800060a:	4372      	muls	r2, r6
 800060c:	444a      	add	r2, r9
 800060e:	4452      	add	r2, sl
 8000610:	4591      	cmp	r9, r2
 8000612:	d903      	bls.n	800061c <__aeabi_dmul+0x400>
 8000614:	2580      	movs	r5, #128	@ 0x80
 8000616:	026d      	lsls	r5, r5, #9
 8000618:	46a9      	mov	r9, r5
 800061a:	4448      	add	r0, r9
 800061c:	0c15      	lsrs	r5, r2, #16
 800061e:	46a9      	mov	r9, r5
 8000620:	4645      	mov	r5, r8
 8000622:	042d      	lsls	r5, r5, #16
 8000624:	0c2d      	lsrs	r5, r5, #16
 8000626:	46a8      	mov	r8, r5
 8000628:	4665      	mov	r5, ip
 800062a:	437d      	muls	r5, r7
 800062c:	0412      	lsls	r2, r2, #16
 800062e:	4448      	add	r0, r9
 8000630:	4490      	add	r8, r2
 8000632:	46a9      	mov	r9, r5
 8000634:	0032      	movs	r2, r6
 8000636:	4665      	mov	r5, ip
 8000638:	4362      	muls	r2, r4
 800063a:	436e      	muls	r6, r5
 800063c:	437c      	muls	r4, r7
 800063e:	0c17      	lsrs	r7, r2, #16
 8000640:	1936      	adds	r6, r6, r4
 8000642:	19bf      	adds	r7, r7, r6
 8000644:	42bc      	cmp	r4, r7
 8000646:	d903      	bls.n	8000650 <__aeabi_dmul+0x434>
 8000648:	2480      	movs	r4, #128	@ 0x80
 800064a:	0264      	lsls	r4, r4, #9
 800064c:	46a4      	mov	ip, r4
 800064e:	44e1      	add	r9, ip
 8000650:	9c02      	ldr	r4, [sp, #8]
 8000652:	9e03      	ldr	r6, [sp, #12]
 8000654:	46a4      	mov	ip, r4
 8000656:	9d05      	ldr	r5, [sp, #20]
 8000658:	4466      	add	r6, ip
 800065a:	428e      	cmp	r6, r1
 800065c:	4189      	sbcs	r1, r1
 800065e:	46ac      	mov	ip, r5
 8000660:	0412      	lsls	r2, r2, #16
 8000662:	043c      	lsls	r4, r7, #16
 8000664:	0c12      	lsrs	r2, r2, #16
 8000666:	18a2      	adds	r2, r4, r2
 8000668:	4462      	add	r2, ip
 800066a:	4249      	negs	r1, r1
 800066c:	1854      	adds	r4, r2, r1
 800066e:	4446      	add	r6, r8
 8000670:	46a4      	mov	ip, r4
 8000672:	4546      	cmp	r6, r8
 8000674:	41a4      	sbcs	r4, r4
 8000676:	4682      	mov	sl, r0
 8000678:	4264      	negs	r4, r4
 800067a:	46a0      	mov	r8, r4
 800067c:	42aa      	cmp	r2, r5
 800067e:	4192      	sbcs	r2, r2
 8000680:	458c      	cmp	ip, r1
 8000682:	4189      	sbcs	r1, r1
 8000684:	44e2      	add	sl, ip
 8000686:	44d0      	add	r8, sl
 8000688:	4249      	negs	r1, r1
 800068a:	4252      	negs	r2, r2
 800068c:	430a      	orrs	r2, r1
 800068e:	45a0      	cmp	r8, r4
 8000690:	41a4      	sbcs	r4, r4
 8000692:	4582      	cmp	sl, r0
 8000694:	4189      	sbcs	r1, r1
 8000696:	4264      	negs	r4, r4
 8000698:	4249      	negs	r1, r1
 800069a:	430c      	orrs	r4, r1
 800069c:	4641      	mov	r1, r8
 800069e:	0c3f      	lsrs	r7, r7, #16
 80006a0:	19d2      	adds	r2, r2, r7
 80006a2:	1912      	adds	r2, r2, r4
 80006a4:	0dcc      	lsrs	r4, r1, #23
 80006a6:	9904      	ldr	r1, [sp, #16]
 80006a8:	0270      	lsls	r0, r6, #9
 80006aa:	4308      	orrs	r0, r1
 80006ac:	1e41      	subs	r1, r0, #1
 80006ae:	4188      	sbcs	r0, r1
 80006b0:	4641      	mov	r1, r8
 80006b2:	444a      	add	r2, r9
 80006b4:	0df6      	lsrs	r6, r6, #23
 80006b6:	0252      	lsls	r2, r2, #9
 80006b8:	4330      	orrs	r0, r6
 80006ba:	0249      	lsls	r1, r1, #9
 80006bc:	4314      	orrs	r4, r2
 80006be:	4308      	orrs	r0, r1
 80006c0:	01d2      	lsls	r2, r2, #7
 80006c2:	d535      	bpl.n	8000730 <__aeabi_dmul+0x514>
 80006c4:	2201      	movs	r2, #1
 80006c6:	0843      	lsrs	r3, r0, #1
 80006c8:	4002      	ands	r2, r0
 80006ca:	4313      	orrs	r3, r2
 80006cc:	07e0      	lsls	r0, r4, #31
 80006ce:	4318      	orrs	r0, r3
 80006d0:	0864      	lsrs	r4, r4, #1
 80006d2:	e634      	b.n	800033e <__aeabi_dmul+0x122>
 80006d4:	9b00      	ldr	r3, [sp, #0]
 80006d6:	46a2      	mov	sl, r4
 80006d8:	469b      	mov	fp, r3
 80006da:	4681      	mov	r9, r0
 80006dc:	2480      	movs	r4, #128	@ 0x80
 80006de:	4653      	mov	r3, sl
 80006e0:	0324      	lsls	r4, r4, #12
 80006e2:	431c      	orrs	r4, r3
 80006e4:	0324      	lsls	r4, r4, #12
 80006e6:	464a      	mov	r2, r9
 80006e8:	4b2e      	ldr	r3, [pc, #184]	@ (80007a4 <__aeabi_dmul+0x588>)
 80006ea:	0b24      	lsrs	r4, r4, #12
 80006ec:	e5ec      	b.n	80002c8 <__aeabi_dmul+0xac>
 80006ee:	f000 f88b 	bl	8000808 <__clzsi2>
 80006f2:	2315      	movs	r3, #21
 80006f4:	469c      	mov	ip, r3
 80006f6:	4484      	add	ip, r0
 80006f8:	0002      	movs	r2, r0
 80006fa:	4663      	mov	r3, ip
 80006fc:	3220      	adds	r2, #32
 80006fe:	2b1c      	cmp	r3, #28
 8000700:	dc00      	bgt.n	8000704 <__aeabi_dmul+0x4e8>
 8000702:	e684      	b.n	800040e <__aeabi_dmul+0x1f2>
 8000704:	2300      	movs	r3, #0
 8000706:	4699      	mov	r9, r3
 8000708:	0023      	movs	r3, r4
 800070a:	3808      	subs	r0, #8
 800070c:	4083      	lsls	r3, r0
 800070e:	469a      	mov	sl, r3
 8000710:	e68e      	b.n	8000430 <__aeabi_dmul+0x214>
 8000712:	f000 f879 	bl	8000808 <__clzsi2>
 8000716:	0002      	movs	r2, r0
 8000718:	0003      	movs	r3, r0
 800071a:	3215      	adds	r2, #21
 800071c:	3320      	adds	r3, #32
 800071e:	2a1c      	cmp	r2, #28
 8000720:	dc00      	bgt.n	8000724 <__aeabi_dmul+0x508>
 8000722:	e64e      	b.n	80003c2 <__aeabi_dmul+0x1a6>
 8000724:	0002      	movs	r2, r0
 8000726:	0034      	movs	r4, r6
 8000728:	3a08      	subs	r2, #8
 800072a:	2000      	movs	r0, #0
 800072c:	4094      	lsls	r4, r2
 800072e:	e652      	b.n	80003d6 <__aeabi_dmul+0x1ba>
 8000730:	9301      	str	r3, [sp, #4]
 8000732:	e604      	b.n	800033e <__aeabi_dmul+0x122>
 8000734:	4b1c      	ldr	r3, [pc, #112]	@ (80007a8 <__aeabi_dmul+0x58c>)
 8000736:	0021      	movs	r1, r4
 8000738:	469c      	mov	ip, r3
 800073a:	0003      	movs	r3, r0
 800073c:	9d01      	ldr	r5, [sp, #4]
 800073e:	40d3      	lsrs	r3, r2
 8000740:	4465      	add	r5, ip
 8000742:	40a9      	lsls	r1, r5
 8000744:	4319      	orrs	r1, r3
 8000746:	0003      	movs	r3, r0
 8000748:	40ab      	lsls	r3, r5
 800074a:	1e58      	subs	r0, r3, #1
 800074c:	4183      	sbcs	r3, r0
 800074e:	4319      	orrs	r1, r3
 8000750:	0008      	movs	r0, r1
 8000752:	40d4      	lsrs	r4, r2
 8000754:	074b      	lsls	r3, r1, #29
 8000756:	d009      	beq.n	800076c <__aeabi_dmul+0x550>
 8000758:	230f      	movs	r3, #15
 800075a:	400b      	ands	r3, r1
 800075c:	2b04      	cmp	r3, #4
 800075e:	d005      	beq.n	800076c <__aeabi_dmul+0x550>
 8000760:	1d0b      	adds	r3, r1, #4
 8000762:	428b      	cmp	r3, r1
 8000764:	4180      	sbcs	r0, r0
 8000766:	4240      	negs	r0, r0
 8000768:	1824      	adds	r4, r4, r0
 800076a:	0018      	movs	r0, r3
 800076c:	0223      	lsls	r3, r4, #8
 800076e:	d400      	bmi.n	8000772 <__aeabi_dmul+0x556>
 8000770:	e6d6      	b.n	8000520 <__aeabi_dmul+0x304>
 8000772:	2301      	movs	r3, #1
 8000774:	2400      	movs	r4, #0
 8000776:	2200      	movs	r2, #0
 8000778:	e5a6      	b.n	80002c8 <__aeabi_dmul+0xac>
 800077a:	290f      	cmp	r1, #15
 800077c:	d1aa      	bne.n	80006d4 <__aeabi_dmul+0x4b8>
 800077e:	2380      	movs	r3, #128	@ 0x80
 8000780:	4652      	mov	r2, sl
 8000782:	031b      	lsls	r3, r3, #12
 8000784:	421a      	tst	r2, r3
 8000786:	d0a9      	beq.n	80006dc <__aeabi_dmul+0x4c0>
 8000788:	421c      	tst	r4, r3
 800078a:	d1a7      	bne.n	80006dc <__aeabi_dmul+0x4c0>
 800078c:	431c      	orrs	r4, r3
 800078e:	9b00      	ldr	r3, [sp, #0]
 8000790:	0002      	movs	r2, r0
 8000792:	469b      	mov	fp, r3
 8000794:	4b03      	ldr	r3, [pc, #12]	@ (80007a4 <__aeabi_dmul+0x588>)
 8000796:	e597      	b.n	80002c8 <__aeabi_dmul+0xac>
 8000798:	2400      	movs	r4, #0
 800079a:	e6c1      	b.n	8000520 <__aeabi_dmul+0x304>
 800079c:	2400      	movs	r4, #0
 800079e:	4b01      	ldr	r3, [pc, #4]	@ (80007a4 <__aeabi_dmul+0x588>)
 80007a0:	0022      	movs	r2, r4
 80007a2:	e591      	b.n	80002c8 <__aeabi_dmul+0xac>
 80007a4:	000007ff 	.word	0x000007ff
 80007a8:	0000041e 	.word	0x0000041e

080007ac <__aeabi_i2d>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	2800      	cmp	r0, #0
 80007b0:	d016      	beq.n	80007e0 <__aeabi_i2d+0x34>
 80007b2:	17c3      	asrs	r3, r0, #31
 80007b4:	18c5      	adds	r5, r0, r3
 80007b6:	405d      	eors	r5, r3
 80007b8:	0fc4      	lsrs	r4, r0, #31
 80007ba:	0028      	movs	r0, r5
 80007bc:	f000 f824 	bl	8000808 <__clzsi2>
 80007c0:	4b10      	ldr	r3, [pc, #64]	@ (8000804 <__aeabi_i2d+0x58>)
 80007c2:	1a1b      	subs	r3, r3, r0
 80007c4:	055b      	lsls	r3, r3, #21
 80007c6:	0d5b      	lsrs	r3, r3, #21
 80007c8:	280a      	cmp	r0, #10
 80007ca:	dc14      	bgt.n	80007f6 <__aeabi_i2d+0x4a>
 80007cc:	0002      	movs	r2, r0
 80007ce:	002e      	movs	r6, r5
 80007d0:	3215      	adds	r2, #21
 80007d2:	4096      	lsls	r6, r2
 80007d4:	220b      	movs	r2, #11
 80007d6:	1a12      	subs	r2, r2, r0
 80007d8:	40d5      	lsrs	r5, r2
 80007da:	032d      	lsls	r5, r5, #12
 80007dc:	0b2d      	lsrs	r5, r5, #12
 80007de:	e003      	b.n	80007e8 <__aeabi_i2d+0x3c>
 80007e0:	2400      	movs	r4, #0
 80007e2:	2300      	movs	r3, #0
 80007e4:	2500      	movs	r5, #0
 80007e6:	2600      	movs	r6, #0
 80007e8:	051b      	lsls	r3, r3, #20
 80007ea:	432b      	orrs	r3, r5
 80007ec:	07e4      	lsls	r4, r4, #31
 80007ee:	4323      	orrs	r3, r4
 80007f0:	0030      	movs	r0, r6
 80007f2:	0019      	movs	r1, r3
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	380b      	subs	r0, #11
 80007f8:	4085      	lsls	r5, r0
 80007fa:	032d      	lsls	r5, r5, #12
 80007fc:	2600      	movs	r6, #0
 80007fe:	0b2d      	lsrs	r5, r5, #12
 8000800:	e7f2      	b.n	80007e8 <__aeabi_i2d+0x3c>
 8000802:	46c0      	nop			@ (mov r8, r8)
 8000804:	0000041e 	.word	0x0000041e

08000808 <__clzsi2>:
 8000808:	211c      	movs	r1, #28
 800080a:	2301      	movs	r3, #1
 800080c:	041b      	lsls	r3, r3, #16
 800080e:	4298      	cmp	r0, r3
 8000810:	d301      	bcc.n	8000816 <__clzsi2+0xe>
 8000812:	0c00      	lsrs	r0, r0, #16
 8000814:	3910      	subs	r1, #16
 8000816:	0a1b      	lsrs	r3, r3, #8
 8000818:	4298      	cmp	r0, r3
 800081a:	d301      	bcc.n	8000820 <__clzsi2+0x18>
 800081c:	0a00      	lsrs	r0, r0, #8
 800081e:	3908      	subs	r1, #8
 8000820:	091b      	lsrs	r3, r3, #4
 8000822:	4298      	cmp	r0, r3
 8000824:	d301      	bcc.n	800082a <__clzsi2+0x22>
 8000826:	0900      	lsrs	r0, r0, #4
 8000828:	3904      	subs	r1, #4
 800082a:	a202      	add	r2, pc, #8	@ (adr r2, 8000834 <__clzsi2+0x2c>)
 800082c:	5c10      	ldrb	r0, [r2, r0]
 800082e:	1840      	adds	r0, r0, r1
 8000830:	4770      	bx	lr
 8000832:	46c0      	nop			@ (mov r8, r8)
 8000834:	02020304 	.word	0x02020304
 8000838:	01010101 	.word	0x01010101
	...

08000844 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	0002      	movs	r2, r0
 800084c:	1dfb      	adds	r3, r7, #7
 800084e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000850:	1dfb      	adds	r3, r7, #7
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b7f      	cmp	r3, #127	@ 0x7f
 8000856:	d809      	bhi.n	800086c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000858:	1dfb      	adds	r3, r7, #7
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	001a      	movs	r2, r3
 800085e:	231f      	movs	r3, #31
 8000860:	401a      	ands	r2, r3
 8000862:	4b04      	ldr	r3, [pc, #16]	@ (8000874 <__NVIC_EnableIRQ+0x30>)
 8000864:	2101      	movs	r1, #1
 8000866:	4091      	lsls	r1, r2
 8000868:	000a      	movs	r2, r1
 800086a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800086c:	46c0      	nop			@ (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	b002      	add	sp, #8
 8000872:	bd80      	pop	{r7, pc}
 8000874:	e000e100 	.word	0xe000e100

08000878 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000878:	b590      	push	{r4, r7, lr}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	0002      	movs	r2, r0
 8000880:	6039      	str	r1, [r7, #0]
 8000882:	1dfb      	adds	r3, r7, #7
 8000884:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000886:	1dfb      	adds	r3, r7, #7
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	2b7f      	cmp	r3, #127	@ 0x7f
 800088c:	d828      	bhi.n	80008e0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800088e:	4a2f      	ldr	r2, [pc, #188]	@ (800094c <__NVIC_SetPriority+0xd4>)
 8000890:	1dfb      	adds	r3, r7, #7
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	b25b      	sxtb	r3, r3
 8000896:	089b      	lsrs	r3, r3, #2
 8000898:	33c0      	adds	r3, #192	@ 0xc0
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	589b      	ldr	r3, [r3, r2]
 800089e:	1dfa      	adds	r2, r7, #7
 80008a0:	7812      	ldrb	r2, [r2, #0]
 80008a2:	0011      	movs	r1, r2
 80008a4:	2203      	movs	r2, #3
 80008a6:	400a      	ands	r2, r1
 80008a8:	00d2      	lsls	r2, r2, #3
 80008aa:	21ff      	movs	r1, #255	@ 0xff
 80008ac:	4091      	lsls	r1, r2
 80008ae:	000a      	movs	r2, r1
 80008b0:	43d2      	mvns	r2, r2
 80008b2:	401a      	ands	r2, r3
 80008b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	019b      	lsls	r3, r3, #6
 80008ba:	22ff      	movs	r2, #255	@ 0xff
 80008bc:	401a      	ands	r2, r3
 80008be:	1dfb      	adds	r3, r7, #7
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	0018      	movs	r0, r3
 80008c4:	2303      	movs	r3, #3
 80008c6:	4003      	ands	r3, r0
 80008c8:	00db      	lsls	r3, r3, #3
 80008ca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008cc:	481f      	ldr	r0, [pc, #124]	@ (800094c <__NVIC_SetPriority+0xd4>)
 80008ce:	1dfb      	adds	r3, r7, #7
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	b25b      	sxtb	r3, r3
 80008d4:	089b      	lsrs	r3, r3, #2
 80008d6:	430a      	orrs	r2, r1
 80008d8:	33c0      	adds	r3, #192	@ 0xc0
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008de:	e031      	b.n	8000944 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008e0:	4a1b      	ldr	r2, [pc, #108]	@ (8000950 <__NVIC_SetPriority+0xd8>)
 80008e2:	1dfb      	adds	r3, r7, #7
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	0019      	movs	r1, r3
 80008e8:	230f      	movs	r3, #15
 80008ea:	400b      	ands	r3, r1
 80008ec:	3b08      	subs	r3, #8
 80008ee:	089b      	lsrs	r3, r3, #2
 80008f0:	3306      	adds	r3, #6
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	18d3      	adds	r3, r2, r3
 80008f6:	3304      	adds	r3, #4
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	1dfa      	adds	r2, r7, #7
 80008fc:	7812      	ldrb	r2, [r2, #0]
 80008fe:	0011      	movs	r1, r2
 8000900:	2203      	movs	r2, #3
 8000902:	400a      	ands	r2, r1
 8000904:	00d2      	lsls	r2, r2, #3
 8000906:	21ff      	movs	r1, #255	@ 0xff
 8000908:	4091      	lsls	r1, r2
 800090a:	000a      	movs	r2, r1
 800090c:	43d2      	mvns	r2, r2
 800090e:	401a      	ands	r2, r3
 8000910:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	019b      	lsls	r3, r3, #6
 8000916:	22ff      	movs	r2, #255	@ 0xff
 8000918:	401a      	ands	r2, r3
 800091a:	1dfb      	adds	r3, r7, #7
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	0018      	movs	r0, r3
 8000920:	2303      	movs	r3, #3
 8000922:	4003      	ands	r3, r0
 8000924:	00db      	lsls	r3, r3, #3
 8000926:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000928:	4809      	ldr	r0, [pc, #36]	@ (8000950 <__NVIC_SetPriority+0xd8>)
 800092a:	1dfb      	adds	r3, r7, #7
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	001c      	movs	r4, r3
 8000930:	230f      	movs	r3, #15
 8000932:	4023      	ands	r3, r4
 8000934:	3b08      	subs	r3, #8
 8000936:	089b      	lsrs	r3, r3, #2
 8000938:	430a      	orrs	r2, r1
 800093a:	3306      	adds	r3, #6
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	18c3      	adds	r3, r0, r3
 8000940:	3304      	adds	r3, #4
 8000942:	601a      	str	r2, [r3, #0]
}
 8000944:	46c0      	nop			@ (mov r8, r8)
 8000946:	46bd      	mov	sp, r7
 8000948:	b003      	add	sp, #12
 800094a:	bd90      	pop	{r4, r7, pc}
 800094c:	e000e100 	.word	0xe000e100
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(const DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8000962:	4a0b      	ldr	r2, [pc, #44]	@ (8000990 <LL_DMA_EnableChannel+0x3c>)
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	18d3      	adds	r3, r2, r3
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	001a      	movs	r2, r3
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	18d3      	adds	r3, r2, r3
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	4907      	ldr	r1, [pc, #28]	@ (8000990 <LL_DMA_EnableChannel+0x3c>)
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	18cb      	adds	r3, r1, r3
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	0019      	movs	r1, r3
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	18cb      	adds	r3, r1, r3
 8000980:	2101      	movs	r1, #1
 8000982:	430a      	orrs	r2, r1
 8000984:	601a      	str	r2, [r3, #0]
}
 8000986:	46c0      	nop			@ (mov r8, r8)
 8000988:	46bd      	mov	sp, r7
 800098a:	b004      	add	sp, #16
 800098c:	bd80      	pop	{r7, pc}
 800098e:	46c0      	nop			@ (mov r8, r8)
 8000990:	08002864 	.word	0x08002864

08000994 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(const DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 80009a2:	4a0b      	ldr	r2, [pc, #44]	@ (80009d0 <LL_DMA_DisableChannel+0x3c>)
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	18d3      	adds	r3, r2, r3
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	001a      	movs	r2, r3
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	18d3      	adds	r3, r2, r3
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	4907      	ldr	r1, [pc, #28]	@ (80009d0 <LL_DMA_DisableChannel+0x3c>)
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	18cb      	adds	r3, r1, r3
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	0019      	movs	r1, r3
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	18cb      	adds	r3, r1, r3
 80009c0:	2101      	movs	r1, #1
 80009c2:	438a      	bics	r2, r1
 80009c4:	601a      	str	r2, [r3, #0]
}
 80009c6:	46c0      	nop			@ (mov r8, r8)
 80009c8:	46bd      	mov	sp, r7
 80009ca:	b004      	add	sp, #16
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	46c0      	nop			@ (mov r8, r8)
 80009d0:	08002864 	.word	0x08002864

080009d4 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 80009e4:	4a0c      	ldr	r2, [pc, #48]	@ (8000a18 <LL_DMA_SetDataTransferDirection+0x44>)
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	18d3      	adds	r3, r2, r3
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	001a      	movs	r2, r3
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	18d3      	adds	r3, r2, r3
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a09      	ldr	r2, [pc, #36]	@ (8000a1c <LL_DMA_SetDataTransferDirection+0x48>)
 80009f6:	4013      	ands	r3, r2
 80009f8:	0019      	movs	r1, r3
 80009fa:	4a07      	ldr	r2, [pc, #28]	@ (8000a18 <LL_DMA_SetDataTransferDirection+0x44>)
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	18d3      	adds	r3, r2, r3
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	001a      	movs	r2, r3
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	18d3      	adds	r3, r2, r3
 8000a08:	687a      	ldr	r2, [r7, #4]
 8000a0a:	430a      	orrs	r2, r1
 8000a0c:	601a      	str	r2, [r3, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8000a0e:	46c0      	nop			@ (mov r8, r8)
 8000a10:	46bd      	mov	sp, r7
 8000a12:	b006      	add	sp, #24
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	46c0      	nop			@ (mov r8, r8)
 8000a18:	08002864 	.word	0x08002864
 8000a1c:	ffffbfef 	.word	0xffffbfef

08000a20 <LL_DMA_GetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataTransferDirection(const DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	60fb      	str	r3, [r7, #12]
  return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8000a2e:	4a07      	ldr	r2, [pc, #28]	@ (8000a4c <LL_DMA_GetDataTransferDirection+0x2c>)
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	18d3      	adds	r3, r2, r3
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	001a      	movs	r2, r3
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	18d3      	adds	r3, r2, r3
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a04      	ldr	r2, [pc, #16]	@ (8000a50 <LL_DMA_GetDataTransferDirection+0x30>)
 8000a40:	4013      	ands	r3, r2
                   DMA_CCR_DIR | DMA_CCR_MEM2MEM));
}
 8000a42:	0018      	movs	r0, r3
 8000a44:	46bd      	mov	sp, r7
 8000a46:	b004      	add	sp, #16
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	46c0      	nop			@ (mov r8, r8)
 8000a4c:	08002864 	.word	0x08002864
 8000a50:	00004010 	.word	0x00004010

08000a54 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8000a64:	4a0c      	ldr	r2, [pc, #48]	@ (8000a98 <LL_DMA_SetMode+0x44>)
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	18d3      	adds	r3, r2, r3
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	001a      	movs	r2, r3
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	18d3      	adds	r3, r2, r3
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2220      	movs	r2, #32
 8000a76:	4393      	bics	r3, r2
 8000a78:	0019      	movs	r1, r3
 8000a7a:	4a07      	ldr	r2, [pc, #28]	@ (8000a98 <LL_DMA_SetMode+0x44>)
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	18d3      	adds	r3, r2, r3
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	001a      	movs	r2, r3
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	18d3      	adds	r3, r2, r3
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	601a      	str	r2, [r3, #0]
             Mode);
}
 8000a8e:	46c0      	nop			@ (mov r8, r8)
 8000a90:	46bd      	mov	sp, r7
 8000a92:	b006      	add	sp, #24
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	46c0      	nop			@ (mov r8, r8)
 8000a98:	08002864 	.word	0x08002864

08000a9c <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8000aac:	4a0c      	ldr	r2, [pc, #48]	@ (8000ae0 <LL_DMA_SetPeriphIncMode+0x44>)
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	18d3      	adds	r3, r2, r3
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	001a      	movs	r2, r3
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	18d3      	adds	r3, r2, r3
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2240      	movs	r2, #64	@ 0x40
 8000abe:	4393      	bics	r3, r2
 8000ac0:	0019      	movs	r1, r3
 8000ac2:	4a07      	ldr	r2, [pc, #28]	@ (8000ae0 <LL_DMA_SetPeriphIncMode+0x44>)
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	18d3      	adds	r3, r2, r3
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	001a      	movs	r2, r3
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	18d3      	adds	r3, r2, r3
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcIncMode);
}
 8000ad6:	46c0      	nop			@ (mov r8, r8)
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	b006      	add	sp, #24
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	46c0      	nop			@ (mov r8, r8)
 8000ae0:	08002864 	.word	0x08002864

08000ae4 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8000af4:	4a0c      	ldr	r2, [pc, #48]	@ (8000b28 <LL_DMA_SetMemoryIncMode+0x44>)
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	18d3      	adds	r3, r2, r3
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	001a      	movs	r2, r3
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	18d3      	adds	r3, r2, r3
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2280      	movs	r2, #128	@ 0x80
 8000b06:	4393      	bics	r3, r2
 8000b08:	0019      	movs	r1, r3
 8000b0a:	4a07      	ldr	r2, [pc, #28]	@ (8000b28 <LL_DMA_SetMemoryIncMode+0x44>)
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	18d3      	adds	r3, r2, r3
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	001a      	movs	r2, r3
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	18d3      	adds	r3, r2, r3
 8000b18:	687a      	ldr	r2, [r7, #4]
 8000b1a:	430a      	orrs	r2, r1
 8000b1c:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstIncMode);
}
 8000b1e:	46c0      	nop			@ (mov r8, r8)
 8000b20:	46bd      	mov	sp, r7
 8000b22:	b006      	add	sp, #24
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	46c0      	nop			@ (mov r8, r8)
 8000b28:	08002864 	.word	0x08002864

08000b2c <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 8000b3c:	4a0c      	ldr	r2, [pc, #48]	@ (8000b70 <LL_DMA_SetPeriphSize+0x44>)
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	18d3      	adds	r3, r2, r3
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	001a      	movs	r2, r3
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	18d3      	adds	r3, r2, r3
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a09      	ldr	r2, [pc, #36]	@ (8000b74 <LL_DMA_SetPeriphSize+0x48>)
 8000b4e:	4013      	ands	r3, r2
 8000b50:	0019      	movs	r1, r3
 8000b52:	4a07      	ldr	r2, [pc, #28]	@ (8000b70 <LL_DMA_SetPeriphSize+0x44>)
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	18d3      	adds	r3, r2, r3
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	001a      	movs	r2, r3
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	18d3      	adds	r3, r2, r3
 8000b60:	687a      	ldr	r2, [r7, #4]
 8000b62:	430a      	orrs	r2, r1
 8000b64:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcDataSize);
}
 8000b66:	46c0      	nop			@ (mov r8, r8)
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	b006      	add	sp, #24
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	46c0      	nop			@ (mov r8, r8)
 8000b70:	08002864 	.word	0x08002864
 8000b74:	fffffcff 	.word	0xfffffcff

08000b78 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8000b88:	4a0c      	ldr	r2, [pc, #48]	@ (8000bbc <LL_DMA_SetMemorySize+0x44>)
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	18d3      	adds	r3, r2, r3
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	001a      	movs	r2, r3
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	18d3      	adds	r3, r2, r3
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a09      	ldr	r2, [pc, #36]	@ (8000bc0 <LL_DMA_SetMemorySize+0x48>)
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	0019      	movs	r1, r3
 8000b9e:	4a07      	ldr	r2, [pc, #28]	@ (8000bbc <LL_DMA_SetMemorySize+0x44>)
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	18d3      	adds	r3, r2, r3
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	001a      	movs	r2, r3
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	18d3      	adds	r3, r2, r3
 8000bac:	687a      	ldr	r2, [r7, #4]
 8000bae:	430a      	orrs	r2, r1
 8000bb0:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstDataSize);
}
 8000bb2:	46c0      	nop			@ (mov r8, r8)
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	b006      	add	sp, #24
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	46c0      	nop			@ (mov r8, r8)
 8000bbc:	08002864 	.word	0x08002864
 8000bc0:	fffff3ff 	.word	0xfffff3ff

08000bc4 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8000bd4:	4a0c      	ldr	r2, [pc, #48]	@ (8000c08 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	18d3      	adds	r3, r2, r3
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	001a      	movs	r2, r3
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	18d3      	adds	r3, r2, r3
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a09      	ldr	r2, [pc, #36]	@ (8000c0c <LL_DMA_SetChannelPriorityLevel+0x48>)
 8000be6:	4013      	ands	r3, r2
 8000be8:	0019      	movs	r1, r3
 8000bea:	4a07      	ldr	r2, [pc, #28]	@ (8000c08 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	18d3      	adds	r3, r2, r3
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	001a      	movs	r2, r3
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	18d3      	adds	r3, r2, r3
 8000bf8:	687a      	ldr	r2, [r7, #4]
 8000bfa:	430a      	orrs	r2, r1
 8000bfc:	601a      	str	r2, [r3, #0]
             Priority);
}
 8000bfe:	46c0      	nop			@ (mov r8, r8)
 8000c00:	46bd      	mov	sp, r7
 8000c02:	b006      	add	sp, #24
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	46c0      	nop			@ (mov r8, r8)
 8000c08:	08002864 	.word	0x08002864
 8000c0c:	ffffcfff 	.word	0xffffcfff

08000c10 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8000c20:	4a0b      	ldr	r2, [pc, #44]	@ (8000c50 <LL_DMA_SetDataLength+0x40>)
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	18d3      	adds	r3, r2, r3
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	001a      	movs	r2, r3
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	18d3      	adds	r3, r2, r3
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	0c1b      	lsrs	r3, r3, #16
 8000c32:	0419      	lsls	r1, r3, #16
 8000c34:	4a06      	ldr	r2, [pc, #24]	@ (8000c50 <LL_DMA_SetDataLength+0x40>)
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	18d3      	adds	r3, r2, r3
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	001a      	movs	r2, r3
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	18d3      	adds	r3, r2, r3
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	430a      	orrs	r2, r1
 8000c46:	605a      	str	r2, [r3, #4]
             DMA_CNDTR_NDT, NbData);
}
 8000c48:	46c0      	nop			@ (mov r8, r8)
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	b006      	add	sp, #24
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	08002864 	.word	0x08002864

08000c54 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
 8000c60:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	617b      	str	r3, [r7, #20]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8000c66:	6a3b      	ldr	r3, [r7, #32]
 8000c68:	2b10      	cmp	r3, #16
 8000c6a:	d112      	bne.n	8000c92 <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, SrcAddress);
 8000c6c:	4a14      	ldr	r2, [pc, #80]	@ (8000cc0 <LL_DMA_ConfigAddresses+0x6c>)
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	18d3      	adds	r3, r2, r3
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	001a      	movs	r2, r3
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	18d3      	adds	r3, r2, r3
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	60da      	str	r2, [r3, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, DstAddress);
 8000c7e:	4a10      	ldr	r2, [pc, #64]	@ (8000cc0 <LL_DMA_ConfigAddresses+0x6c>)
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	18d3      	adds	r3, r2, r3
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	001a      	movs	r2, r3
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	18d3      	adds	r3, r2, r3
 8000c8c:	683a      	ldr	r2, [r7, #0]
 8000c8e:	609a      	str	r2, [r3, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, DstAddress);
  }
}
 8000c90:	e011      	b.n	8000cb6 <LL_DMA_ConfigAddresses+0x62>
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, SrcAddress);
 8000c92:	4a0b      	ldr	r2, [pc, #44]	@ (8000cc0 <LL_DMA_ConfigAddresses+0x6c>)
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	18d3      	adds	r3, r2, r3
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	001a      	movs	r2, r3
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	18d3      	adds	r3, r2, r3
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, DstAddress);
 8000ca4:	4a06      	ldr	r2, [pc, #24]	@ (8000cc0 <LL_DMA_ConfigAddresses+0x6c>)
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	18d3      	adds	r3, r2, r3
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	001a      	movs	r2, r3
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	18d3      	adds	r3, r2, r3
 8000cb2:	683a      	ldr	r2, [r7, #0]
 8000cb4:	60da      	str	r2, [r3, #12]
}
 8000cb6:	46c0      	nop			@ (mov r8, r8)
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	b006      	add	sp, #24
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	46c0      	nop			@ (mov r8, r8)
 8000cc0:	08002864 	.word	0x08002864

08000cc4 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_RX
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_TX
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Request)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	0a9b      	lsrs	r3, r3, #10
 8000cd4:	4a0f      	ldr	r2, [pc, #60]	@ (8000d14 <LL_DMA_SetPeriphRequest+0x50>)
 8000cd6:	405a      	eors	r2, r3
 8000cd8:	0013      	movs	r3, r2
 8000cda:	00db      	lsls	r3, r3, #3
 8000cdc:	1a9b      	subs	r3, r3, r2
 8000cde:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8000ce0:	68ba      	ldr	r2, [r7, #8]
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	18d3      	adds	r3, r2, r3
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	4a0b      	ldr	r2, [pc, #44]	@ (8000d18 <LL_DMA_SetPeriphRequest+0x54>)
 8000cea:	4694      	mov	ip, r2
 8000cec:	4463      	add	r3, ip
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	223f      	movs	r2, #63	@ 0x3f
 8000cf2:	4393      	bics	r3, r2
 8000cf4:	0019      	movs	r1, r3
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	18d3      	adds	r3, r2, r3
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	4a06      	ldr	r2, [pc, #24]	@ (8000d18 <LL_DMA_SetPeriphRequest+0x54>)
 8000d00:	4694      	mov	ip, r2
 8000d02:	4463      	add	r3, ip
 8000d04:	687a      	ldr	r2, [r7, #4]
 8000d06:	430a      	orrs	r2, r1
 8000d08:	601a      	str	r2, [r3, #0]
}
 8000d0a:	46c0      	nop			@ (mov r8, r8)
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	b006      	add	sp, #24
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	46c0      	nop			@ (mov r8, r8)
 8000d14:	00100080 	.word	0x00100080
 8000d18:	40020800 	.word	0x40020800

08000d1c <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(const DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 8000d2a:	4a0b      	ldr	r2, [pc, #44]	@ (8000d58 <LL_DMA_EnableIT_TC+0x3c>)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	18d3      	adds	r3, r2, r3
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	001a      	movs	r2, r3
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	18d3      	adds	r3, r2, r3
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	4907      	ldr	r1, [pc, #28]	@ (8000d58 <LL_DMA_EnableIT_TC+0x3c>)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	18cb      	adds	r3, r1, r3
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	0019      	movs	r1, r3
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	18cb      	adds	r3, r1, r3
 8000d48:	2102      	movs	r1, #2
 8000d4a:	430a      	orrs	r2, r1
 8000d4c:	601a      	str	r2, [r3, #0]
}
 8000d4e:	46c0      	nop			@ (mov r8, r8)
 8000d50:	46bd      	mov	sp, r7
 8000d52:	b004      	add	sp, #16
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	46c0      	nop			@ (mov r8, r8)
 8000d58:	08002864 	.word	0x08002864

08000d5c <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(const DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TEIE);
 8000d6a:	4a0b      	ldr	r2, [pc, #44]	@ (8000d98 <LL_DMA_EnableIT_TE+0x3c>)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	18d3      	adds	r3, r2, r3
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	001a      	movs	r2, r3
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	18d3      	adds	r3, r2, r3
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	4907      	ldr	r1, [pc, #28]	@ (8000d98 <LL_DMA_EnableIT_TE+0x3c>)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	18cb      	adds	r3, r1, r3
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	0019      	movs	r1, r3
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	18cb      	adds	r3, r1, r3
 8000d88:	2108      	movs	r1, #8
 8000d8a:	430a      	orrs	r2, r1
 8000d8c:	601a      	str	r2, [r3, #0]
}
 8000d8e:	46c0      	nop			@ (mov r8, r8)
 8000d90:	46bd      	mov	sp, r7
 8000d92:	b004      	add	sp, #16
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	46c0      	nop			@ (mov r8, r8)
 8000d98:	08002864 	.word	0x08002864

08000d9c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000da0:	4b04      	ldr	r3, [pc, #16]	@ (8000db4 <LL_RCC_HSI_Enable+0x18>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	4b03      	ldr	r3, [pc, #12]	@ (8000db4 <LL_RCC_HSI_Enable+0x18>)
 8000da6:	2180      	movs	r1, #128	@ 0x80
 8000da8:	0049      	lsls	r1, r1, #1
 8000daa:	430a      	orrs	r2, r1
 8000dac:	601a      	str	r2, [r3, #0]
}
 8000dae:	46c0      	nop			@ (mov r8, r8)
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40021000 	.word	0x40021000

08000db8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000dbc:	4b07      	ldr	r3, [pc, #28]	@ (8000ddc <LL_RCC_HSI_IsReady+0x24>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	2380      	movs	r3, #128	@ 0x80
 8000dc2:	00db      	lsls	r3, r3, #3
 8000dc4:	401a      	ands	r2, r3
 8000dc6:	2380      	movs	r3, #128	@ 0x80
 8000dc8:	00db      	lsls	r3, r3, #3
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d101      	bne.n	8000dd2 <LL_RCC_HSI_IsReady+0x1a>
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e000      	b.n	8000dd4 <LL_RCC_HSI_IsReady+0x1c>
 8000dd2:	2300      	movs	r3, #0
}
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	46c0      	nop			@ (mov r8, r8)
 8000ddc:	40021000 	.word	0x40021000

08000de0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000de8:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <LL_RCC_SetSysClkSource+0x24>)
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	2207      	movs	r2, #7
 8000dee:	4393      	bics	r3, r2
 8000df0:	0019      	movs	r1, r3
 8000df2:	4b04      	ldr	r3, [pc, #16]	@ (8000e04 <LL_RCC_SetSysClkSource+0x24>)
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	430a      	orrs	r2, r1
 8000df8:	609a      	str	r2, [r3, #8]
}
 8000dfa:	46c0      	nop			@ (mov r8, r8)
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	b002      	add	sp, #8
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	46c0      	nop			@ (mov r8, r8)
 8000e04:	40021000 	.word	0x40021000

08000e08 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000e0c:	4b03      	ldr	r3, [pc, #12]	@ (8000e1c <LL_RCC_GetSysClkSource+0x14>)
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	2238      	movs	r2, #56	@ 0x38
 8000e12:	4013      	ands	r3, r2
}
 8000e14:	0018      	movs	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	46c0      	nop			@ (mov r8, r8)
 8000e1c:	40021000 	.word	0x40021000

08000e20 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000e28:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <LL_RCC_SetAHBPrescaler+0x24>)
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	4a06      	ldr	r2, [pc, #24]	@ (8000e48 <LL_RCC_SetAHBPrescaler+0x28>)
 8000e2e:	4013      	ands	r3, r2
 8000e30:	0019      	movs	r1, r3
 8000e32:	4b04      	ldr	r3, [pc, #16]	@ (8000e44 <LL_RCC_SetAHBPrescaler+0x24>)
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	430a      	orrs	r2, r1
 8000e38:	609a      	str	r2, [r3, #8]
}
 8000e3a:	46c0      	nop			@ (mov r8, r8)
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	b002      	add	sp, #8
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	46c0      	nop			@ (mov r8, r8)
 8000e44:	40021000 	.word	0x40021000
 8000e48:	fffff0ff 	.word	0xfffff0ff

08000e4c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8000e54:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	4a06      	ldr	r2, [pc, #24]	@ (8000e74 <LL_RCC_SetAPB1Prescaler+0x28>)
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	0019      	movs	r1, r3
 8000e5e:	4b04      	ldr	r3, [pc, #16]	@ (8000e70 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	430a      	orrs	r2, r1
 8000e64:	609a      	str	r2, [r3, #8]
}
 8000e66:	46c0      	nop			@ (mov r8, r8)
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	b002      	add	sp, #8
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	46c0      	nop			@ (mov r8, r8)
 8000e70:	40021000 	.word	0x40021000
 8000e74:	ffff8fff 	.word	0xffff8fff

08000e78 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000e7c:	4b04      	ldr	r3, [pc, #16]	@ (8000e90 <LL_RCC_PLL_Enable+0x18>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	4b03      	ldr	r3, [pc, #12]	@ (8000e90 <LL_RCC_PLL_Enable+0x18>)
 8000e82:	2180      	movs	r1, #128	@ 0x80
 8000e84:	0449      	lsls	r1, r1, #17
 8000e86:	430a      	orrs	r2, r1
 8000e88:	601a      	str	r2, [r3, #0]
}
 8000e8a:	46c0      	nop			@ (mov r8, r8)
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40021000 	.word	0x40021000

08000e94 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8000e98:	4b07      	ldr	r3, [pc, #28]	@ (8000eb8 <LL_RCC_PLL_IsReady+0x24>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	2380      	movs	r3, #128	@ 0x80
 8000e9e:	049b      	lsls	r3, r3, #18
 8000ea0:	401a      	ands	r2, r3
 8000ea2:	2380      	movs	r3, #128	@ 0x80
 8000ea4:	049b      	lsls	r3, r3, #18
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d101      	bne.n	8000eae <LL_RCC_PLL_IsReady+0x1a>
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e000      	b.n	8000eb0 <LL_RCC_PLL_IsReady+0x1c>
 8000eae:	2300      	movs	r3, #0
}
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	46c0      	nop			@ (mov r8, r8)
 8000eb8:	40021000 	.word	0x40021000

08000ebc <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
 8000ec8:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8000eca:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef4 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef8 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	0019      	movs	r1, r3
 8000ed4:	68fa      	ldr	r2, [r7, #12]
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	431a      	orrs	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	021b      	lsls	r3, r3, #8
 8000ede:	431a      	orrs	r2, r3
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	431a      	orrs	r2, r3
 8000ee4:	4b03      	ldr	r3, [pc, #12]	@ (8000ef4 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000ee6:	430a      	orrs	r2, r1
 8000ee8:	60da      	str	r2, [r3, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8000eea:	46c0      	nop			@ (mov r8, r8)
 8000eec:	46bd      	mov	sp, r7
 8000eee:	b004      	add	sp, #16
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	46c0      	nop			@ (mov r8, r8)
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	1fff808c 	.word	0x1fff808c

08000efc <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000f00:	4b04      	ldr	r3, [pc, #16]	@ (8000f14 <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 8000f02:	68da      	ldr	r2, [r3, #12]
 8000f04:	4b03      	ldr	r3, [pc, #12]	@ (8000f14 <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 8000f06:	2180      	movs	r1, #128	@ 0x80
 8000f08:	0549      	lsls	r1, r1, #21
 8000f0a:	430a      	orrs	r2, r1
 8000f0c:	60da      	str	r2, [r3, #12]
}
 8000f0e:	46c0      	nop			@ (mov r8, r8)
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40021000 	.word	0x40021000

08000f18 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_RNG  (*)
  * @note   (*) RNG & CRYP Peripherals available only on STM32G081xx
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000f20:	4b07      	ldr	r3, [pc, #28]	@ (8000f40 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000f22:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8000f24:	4b06      	ldr	r3, [pc, #24]	@ (8000f40 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000f2c:	4b04      	ldr	r3, [pc, #16]	@ (8000f40 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	4013      	ands	r3, r2
 8000f34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f36:	68fb      	ldr	r3, [r7, #12]
}
 8000f38:	46c0      	nop			@ (mov r8, r8)
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	b004      	add	sp, #16
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40021000 	.word	0x40021000

08000f44 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 8000f4c:	4b07      	ldr	r3, [pc, #28]	@ (8000f6c <LL_APB1_GRP1_EnableClock+0x28>)
 8000f4e:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8000f50:	4b06      	ldr	r3, [pc, #24]	@ (8000f6c <LL_APB1_GRP1_EnableClock+0x28>)
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	430a      	orrs	r2, r1
 8000f56:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8000f58:	4b04      	ldr	r3, [pc, #16]	@ (8000f6c <LL_APB1_GRP1_EnableClock+0x28>)
 8000f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f62:	68fb      	ldr	r3, [r7, #12]
}
 8000f64:	46c0      	nop			@ (mov r8, r8)
 8000f66:	46bd      	mov	sp, r7
 8000f68:	b004      	add	sp, #16
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40021000 	.word	0x40021000

08000f70 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_ADC
  * @note (*) peripheral not available on all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR2, Periphs);
 8000f78:	4b07      	ldr	r3, [pc, #28]	@ (8000f98 <LL_APB2_GRP1_EnableClock+0x28>)
 8000f7a:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8000f7c:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <LL_APB2_GRP1_EnableClock+0x28>)
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	430a      	orrs	r2, r1
 8000f82:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8000f84:	4b04      	ldr	r3, [pc, #16]	@ (8000f98 <LL_APB2_GRP1_EnableClock+0x28>)
 8000f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
}
 8000f90:	46c0      	nop			@ (mov r8, r8)
 8000f92:	46bd      	mov	sp, r7
 8000f94:	b004      	add	sp, #16
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40021000 	.word	0x40021000

08000f9c <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000fa4:	4b07      	ldr	r3, [pc, #28]	@ (8000fc4 <LL_IOP_GRP1_EnableClock+0x28>)
 8000fa6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000fa8:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <LL_IOP_GRP1_EnableClock+0x28>)
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	430a      	orrs	r2, r1
 8000fae:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000fb0:	4b04      	ldr	r3, [pc, #16]	@ (8000fc4 <LL_IOP_GRP1_EnableClock+0x28>)
 8000fb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fba:	68fb      	ldr	r3, [r7, #12]
}
 8000fbc:	46c0      	nop			@ (mov r8, r8)
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	b004      	add	sp, #16
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40021000 	.word	0x40021000

08000fc8 <LL_SYSCFG_DisableDBATT>:
  *         @arg @ref LL_SYSCFG_UCPD2_STROBE
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_DisableDBATT(uint32_t ConfigDeadBattery)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigDeadBattery);
 8000fd0:	4b04      	ldr	r3, [pc, #16]	@ (8000fe4 <LL_SYSCFG_DisableDBATT+0x1c>)
 8000fd2:	6819      	ldr	r1, [r3, #0]
 8000fd4:	4b03      	ldr	r3, [pc, #12]	@ (8000fe4 <LL_SYSCFG_DisableDBATT+0x1c>)
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	601a      	str	r2, [r3, #0]
}
 8000fdc:	46c0      	nop			@ (mov r8, r8)
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	b002      	add	sp, #8
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40010000 	.word	0x40010000

08000fe8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000ff0:	4b06      	ldr	r3, [pc, #24]	@ (800100c <LL_FLASH_SetLatency+0x24>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2207      	movs	r2, #7
 8000ff6:	4393      	bics	r3, r2
 8000ff8:	0019      	movs	r1, r3
 8000ffa:	4b04      	ldr	r3, [pc, #16]	@ (800100c <LL_FLASH_SetLatency+0x24>)
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	430a      	orrs	r2, r1
 8001000:	601a      	str	r2, [r3, #0]
}
 8001002:	46c0      	nop			@ (mov r8, r8)
 8001004:	46bd      	mov	sp, r7
 8001006:	b002      	add	sp, #8
 8001008:	bd80      	pop	{r7, pc}
 800100a:	46c0      	nop			@ (mov r8, r8)
 800100c:	40022000 	.word	0x40022000

08001010 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001018:	4a05      	ldr	r2, [pc, #20]	@ (8001030 <LL_EXTI_EnableIT_0_31+0x20>)
 800101a:	2380      	movs	r3, #128	@ 0x80
 800101c:	58d2      	ldr	r2, [r2, r3]
 800101e:	4904      	ldr	r1, [pc, #16]	@ (8001030 <LL_EXTI_EnableIT_0_31+0x20>)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4313      	orrs	r3, r2
 8001024:	2280      	movs	r2, #128	@ 0x80
 8001026:	508b      	str	r3, [r1, r2]
}
 8001028:	46c0      	nop			@ (mov r8, r8)
 800102a:	46bd      	mov	sp, r7
 800102c:	b002      	add	sp, #8
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40021800 	.word	0x40021800

08001034 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800103c:	4b04      	ldr	r3, [pc, #16]	@ (8001050 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 800103e:	6859      	ldr	r1, [r3, #4]
 8001040:	4b03      	ldr	r3, [pc, #12]	@ (8001050 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	430a      	orrs	r2, r1
 8001046:	605a      	str	r2, [r3, #4]
}
 8001048:	46c0      	nop			@ (mov r8, r8)
 800104a:	46bd      	mov	sp, r7
 800104c:	b002      	add	sp, #8
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40021800 	.word	0x40021800

08001054 <LL_EXTI_SetEXTISource>:
  *         @arg @ref LL_EXTI_CONFIG_LINE14
  *         @arg @ref LL_EXTI_CONFIG_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001054:	b590      	push	{r4, r7, lr}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(EXTI->EXTICR[Line & 0x03u], EXTI_EXTICR1_EXTI0 << (Line >> LL_EXTI_REGISTER_PINPOS_SHFT), Port << (Line >> LL_EXTI_REGISTER_PINPOS_SHFT));
 800105e:	4a0f      	ldr	r2, [pc, #60]	@ (800109c <LL_EXTI_SetEXTISource+0x48>)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	2103      	movs	r1, #3
 8001064:	400b      	ands	r3, r1
 8001066:	3318      	adds	r3, #24
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	589b      	ldr	r3, [r3, r2]
 800106c:	683a      	ldr	r2, [r7, #0]
 800106e:	0c12      	lsrs	r2, r2, #16
 8001070:	2107      	movs	r1, #7
 8001072:	4091      	lsls	r1, r2
 8001074:	000a      	movs	r2, r1
 8001076:	43d2      	mvns	r2, r2
 8001078:	401a      	ands	r2, r3
 800107a:	0011      	movs	r1, r2
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	0c1b      	lsrs	r3, r3, #16
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	409a      	lsls	r2, r3
 8001084:	4805      	ldr	r0, [pc, #20]	@ (800109c <LL_EXTI_SetEXTISource+0x48>)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	2403      	movs	r4, #3
 800108a:	4023      	ands	r3, r4
 800108c:	430a      	orrs	r2, r1
 800108e:	3318      	adds	r3, #24
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	501a      	str	r2, [r3, r0]
}
 8001094:	46c0      	nop			@ (mov r8, r8)
 8001096:	46bd      	mov	sp, r7
 8001098:	b003      	add	sp, #12
 800109a:	bd90      	pop	{r4, r7, pc}
 800109c:	40021800 	.word	0x40021800

080010a0 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2201      	movs	r2, #1
 80010ae:	431a      	orrs	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	601a      	str	r2, [r3, #0]
}
 80010b4:	46c0      	nop			@ (mov r8, r8)
 80010b6:	46bd      	mov	sp, r7
 80010b8:	b002      	add	sp, #8
 80010ba:	bd80      	pop	{r7, pc}

080010bc <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a03      	ldr	r2, [pc, #12]	@ (80010d8 <LL_USART_DisableFIFO+0x1c>)
 80010ca:	401a      	ands	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	601a      	str	r2, [r3, #0]
}
 80010d0:	46c0      	nop			@ (mov r8, r8)
 80010d2:	46bd      	mov	sp, r7
 80010d4:	b002      	add	sp, #8
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	dfffffff 	.word	0xdfffffff

080010dc <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80010e6:	f3ef 8310 	mrs	r3, PRIMASK
 80010ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80010ec:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 80010ee:	617b      	str	r3, [r7, #20]
 80010f0:	2301      	movs	r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f383 8810 	msr	PRIMASK, r3
}
 80010fa:	46c0      	nop			@ (mov r8, r8)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	08da      	lsrs	r2, r3, #3
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	075b      	lsls	r3, r3, #29
 8001108:	431a      	orrs	r2, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	f383 8810 	msr	PRIMASK, r3
}
 8001118:	46c0      	nop			@ (mov r8, r8)
}
 800111a:	46c0      	nop			@ (mov r8, r8)
 800111c:	46bd      	mov	sp, r7
 800111e:	b006      	add	sp, #24
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800112e:	f3ef 8310 	mrs	r3, PRIMASK
 8001132:	60bb      	str	r3, [r7, #8]
  return(result);
 8001134:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8001136:	617b      	str	r3, [r7, #20]
 8001138:	2301      	movs	r3, #1
 800113a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f383 8810 	msr	PRIMASK, r3
}
 8001142:	46c0      	nop			@ (mov r8, r8)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	4a08      	ldr	r2, [pc, #32]	@ (800116c <LL_USART_SetRXFIFOThreshold+0x48>)
 800114a:	401a      	ands	r2, r3
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	065b      	lsls	r3, r3, #25
 8001150:	431a      	orrs	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	f383 8810 	msr	PRIMASK, r3
}
 8001160:	46c0      	nop			@ (mov r8, r8)
}
 8001162:	46c0      	nop			@ (mov r8, r8)
 8001164:	46bd      	mov	sp, r7
 8001166:	b006      	add	sp, #24
 8001168:	bd80      	pop	{r7, pc}
 800116a:	46c0      	nop			@ (mov r8, r8)
 800116c:	f1ffffff 	.word	0xf1ffffff

08001170 <LL_USART_EnableRxTimeout>:
  * @rmtoll CR2          RTOEN         LL_USART_EnableRxTimeout
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableRxTimeout(USART_TypeDef *USARTx)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR2, USART_CR2_RTOEN);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	2280      	movs	r2, #128	@ 0x80
 800117e:	0412      	lsls	r2, r2, #16
 8001180:	431a      	orrs	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	605a      	str	r2, [r3, #4]
}
 8001186:	46c0      	nop			@ (mov r8, r8)
 8001188:	46bd      	mov	sp, r7
 800118a:	b002      	add	sp, #8
 800118c:	bd80      	pop	{r7, pc}

0800118e <LL_USART_SetRxTimeout>:
  * @param  USARTx USART Instance
  * @param  Timeout Value between Min_Data=0x00 and Max_Data=0x00FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRxTimeout(USART_TypeDef *USARTx, uint32_t Timeout)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b082      	sub	sp, #8
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
 8001196:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->RTOR, USART_RTOR_RTO, Timeout);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	695b      	ldr	r3, [r3, #20]
 800119c:	0e1b      	lsrs	r3, r3, #24
 800119e:	061a      	lsls	r2, r3, #24
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	431a      	orrs	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	615a      	str	r2, [r3, #20]
}
 80011a8:	46c0      	nop			@ (mov r8, r8)
 80011aa:	46bd      	mov	sp, r7
 80011ac:	b002      	add	sp, #8
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	4a07      	ldr	r2, [pc, #28]	@ (80011dc <LL_USART_ConfigAsyncMode+0x2c>)
 80011be:	401a      	ands	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	222a      	movs	r2, #42	@ 0x2a
 80011ca:	4393      	bics	r3, r2
 80011cc:	001a      	movs	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	609a      	str	r2, [r3, #8]
}
 80011d2:	46c0      	nop			@ (mov r8, r8)
 80011d4:	46bd      	mov	sp, r7
 80011d6:	b002      	add	sp, #8
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	46c0      	nop			@ (mov r8, r8)
 80011dc:	ffffb7ff 	.word	0xffffb7ff

080011e0 <LL_USART_IsActiveFlag_RTO>:
  * @rmtoll ISR          RTOF          LL_USART_IsActiveFlag_RTO
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RTO(const USART_TypeDef *USARTx)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RTOF) == (USART_ISR_RTOF)) ? 1UL : 0UL);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	69da      	ldr	r2, [r3, #28]
 80011ec:	2380      	movs	r3, #128	@ 0x80
 80011ee:	011b      	lsls	r3, r3, #4
 80011f0:	401a      	ands	r2, r3
 80011f2:	2380      	movs	r3, #128	@ 0x80
 80011f4:	011b      	lsls	r3, r3, #4
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d101      	bne.n	80011fe <LL_USART_IsActiveFlag_RTO+0x1e>
 80011fa:	2301      	movs	r3, #1
 80011fc:	e000      	b.n	8001200 <LL_USART_IsActiveFlag_RTO+0x20>
 80011fe:	2300      	movs	r3, #0
}
 8001200:	0018      	movs	r0, r3
 8001202:	46bd      	mov	sp, r7
 8001204:	b002      	add	sp, #8
 8001206:	bd80      	pop	{r7, pc}

08001208 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(const USART_TypeDef *USARTx)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	69da      	ldr	r2, [r3, #28]
 8001214:	2380      	movs	r3, #128	@ 0x80
 8001216:	039b      	lsls	r3, r3, #14
 8001218:	401a      	ands	r2, r3
 800121a:	2380      	movs	r3, #128	@ 0x80
 800121c:	039b      	lsls	r3, r3, #14
 800121e:	429a      	cmp	r2, r3
 8001220:	d101      	bne.n	8001226 <LL_USART_IsActiveFlag_TEACK+0x1e>
 8001222:	2301      	movs	r3, #1
 8001224:	e000      	b.n	8001228 <LL_USART_IsActiveFlag_TEACK+0x20>
 8001226:	2300      	movs	r3, #0
}
 8001228:	0018      	movs	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	b002      	add	sp, #8
 800122e:	bd80      	pop	{r7, pc}

08001230 <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(const USART_TypeDef *USARTx)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	69da      	ldr	r2, [r3, #28]
 800123c:	2380      	movs	r3, #128	@ 0x80
 800123e:	03db      	lsls	r3, r3, #15
 8001240:	401a      	ands	r2, r3
 8001242:	2380      	movs	r3, #128	@ 0x80
 8001244:	03db      	lsls	r3, r3, #15
 8001246:	429a      	cmp	r2, r3
 8001248:	d101      	bne.n	800124e <LL_USART_IsActiveFlag_REACK+0x1e>
 800124a:	2301      	movs	r3, #1
 800124c:	e000      	b.n	8001250 <LL_USART_IsActiveFlag_REACK+0x20>
 800124e:	2300      	movs	r3, #0
}
 8001250:	0018      	movs	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	b002      	add	sp, #8
 8001256:	bd80      	pop	{r7, pc}

08001258 <LL_USART_ClearFlag_PE>:
  * @rmtoll ICR          PECF          LL_USART_ClearFlag_PE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_PE(USART_TypeDef *USARTx)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2201      	movs	r2, #1
 8001264:	621a      	str	r2, [r3, #32]
}
 8001266:	46c0      	nop			@ (mov r8, r8)
 8001268:	46bd      	mov	sp, r7
 800126a:	b002      	add	sp, #8
 800126c:	bd80      	pop	{r7, pc}

0800126e <LL_USART_ClearFlag_FE>:
  * @rmtoll ICR          FECF          LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2202      	movs	r2, #2
 800127a:	621a      	str	r2, [r3, #32]
}
 800127c:	46c0      	nop			@ (mov r8, r8)
 800127e:	46bd      	mov	sp, r7
 8001280:	b002      	add	sp, #8
 8001282:	bd80      	pop	{r7, pc}

08001284 <LL_USART_ClearFlag_NE>:
  * @rmtoll ICR          NECF          LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2204      	movs	r2, #4
 8001290:	621a      	str	r2, [r3, #32]
}
 8001292:	46c0      	nop			@ (mov r8, r8)
 8001294:	46bd      	mov	sp, r7
 8001296:	b002      	add	sp, #8
 8001298:	bd80      	pop	{r7, pc}

0800129a <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2208      	movs	r2, #8
 80012a6:	621a      	str	r2, [r3, #32]
}
 80012a8:	46c0      	nop			@ (mov r8, r8)
 80012aa:	46bd      	mov	sp, r7
 80012ac:	b002      	add	sp, #8
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <LL_USART_ClearFlag_RTO>:
  * @rmtoll ICR          RTOCF         LL_USART_ClearFlag_RTO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_RTO(USART_TypeDef *USARTx)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_RTOCF);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2280      	movs	r2, #128	@ 0x80
 80012bc:	0112      	lsls	r2, r2, #4
 80012be:	621a      	str	r2, [r3, #32]
}
 80012c0:	46c0      	nop			@ (mov r8, r8)
 80012c2:	46bd      	mov	sp, r7
 80012c4:	b002      	add	sp, #8
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <LL_USART_EnableIT_RTO>:
  * @rmtoll CR1          RTOIE         LL_USART_EnableIT_RTO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RTO(USART_TypeDef *USARTx)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80012d0:	f3ef 8310 	mrs	r3, PRIMASK
 80012d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80012d6:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RTOIE);
 80012d8:	617b      	str	r3, [r7, #20]
 80012da:	2301      	movs	r3, #1
 80012dc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	f383 8810 	msr	PRIMASK, r3
}
 80012e4:	46c0      	nop			@ (mov r8, r8)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2280      	movs	r2, #128	@ 0x80
 80012ec:	04d2      	lsls	r2, r2, #19
 80012ee:	431a      	orrs	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	f383 8810 	msr	PRIMASK, r3
}
 80012fe:	46c0      	nop			@ (mov r8, r8)
}
 8001300:	46c0      	nop			@ (mov r8, r8)
 8001302:	46bd      	mov	sp, r7
 8001304:	b006      	add	sp, #24
 8001306:	bd80      	pop	{r7, pc}

08001308 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001310:	f3ef 8310 	mrs	r3, PRIMASK
 8001314:	60bb      	str	r3, [r7, #8]
  return(result);
 8001316:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8001318:	617b      	str	r3, [r7, #20]
 800131a:	2301      	movs	r3, #1
 800131c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f383 8810 	msr	PRIMASK, r3
}
 8001324:	46c0      	nop			@ (mov r8, r8)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	2240      	movs	r2, #64	@ 0x40
 800132c:	431a      	orrs	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	f383 8810 	msr	PRIMASK, r3
}
 800133c:	46c0      	nop			@ (mov r8, r8)
}
 800133e:	46c0      	nop			@ (mov r8, r8)
 8001340:	46bd      	mov	sp, r7
 8001342:	b006      	add	sp, #24
 8001344:	bd80      	pop	{r7, pc}

08001346 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(const USART_TypeDef *USARTx, uint32_t Direction)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b084      	sub	sp, #16
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
 800134e:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d103      	bne.n	800135e <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	3328      	adds	r3, #40	@ 0x28
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	e002      	b.n	8001364 <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	3324      	adds	r3, #36	@ 0x24
 8001362:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 8001364:	68fb      	ldr	r3, [r7, #12]
}
 8001366:	0018      	movs	r0, r3
 8001368:	46bd      	mov	sp, r7
 800136a:	b004      	add	sp, #16
 800136c:	bd80      	pop	{r7, pc}

0800136e <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b084      	sub	sp, #16
 8001372:	af00      	add	r7, sp, #0
 8001374:	60f8      	str	r0, [r7, #12]
 8001376:	60b9      	str	r1, [r7, #8]
 8001378:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	6819      	ldr	r1, [r3, #0]
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	435b      	muls	r3, r3
 8001382:	001a      	movs	r2, r3
 8001384:	0013      	movs	r3, r2
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	189b      	adds	r3, r3, r2
 800138a:	43db      	mvns	r3, r3
 800138c:	400b      	ands	r3, r1
 800138e:	001a      	movs	r2, r3
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	435b      	muls	r3, r3
 8001394:	6879      	ldr	r1, [r7, #4]
 8001396:	434b      	muls	r3, r1
 8001398:	431a      	orrs	r2, r3
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	601a      	str	r2, [r3, #0]
}
 800139e:	46c0      	nop			@ (mov r8, r8)
 80013a0:	46bd      	mov	sp, r7
 80013a2:	b004      	add	sp, #16
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b084      	sub	sp, #16
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	60f8      	str	r0, [r7, #12]
 80013ae:	60b9      	str	r1, [r7, #8]
 80013b0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	68d9      	ldr	r1, [r3, #12]
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	435b      	muls	r3, r3
 80013ba:	001a      	movs	r2, r3
 80013bc:	0013      	movs	r3, r2
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	189b      	adds	r3, r3, r2
 80013c2:	43db      	mvns	r3, r3
 80013c4:	400b      	ands	r3, r1
 80013c6:	001a      	movs	r2, r3
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	435b      	muls	r3, r3
 80013cc:	6879      	ldr	r1, [r7, #4]
 80013ce:	434b      	muls	r3, r1
 80013d0:	431a      	orrs	r2, r3
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	60da      	str	r2, [r3, #12]
}
 80013d6:	46c0      	nop			@ (mov r8, r8)
 80013d8:	46bd      	mov	sp, r7
 80013da:	b004      	add	sp, #16
 80013dc:	bd80      	pop	{r7, pc}

080013de <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
 80013e6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	683a      	ldr	r2, [r7, #0]
 80013ec:	619a      	str	r2, [r3, #24]
}
 80013ee:	46c0      	nop			@ (mov r8, r8)
 80013f0:	46bd      	mov	sp, r7
 80013f2:	b002      	add	sp, #8
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
 80013fe:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001406:	46c0      	nop			@ (mov r8, r8)
 8001408:	46bd      	mov	sp, r7
 800140a:	b002      	add	sp, #8
 800140c:	bd80      	pop	{r7, pc}

0800140e <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b084      	sub	sp, #16
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
 8001416:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	695b      	ldr	r3, [r3, #20]
 800141c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	683a      	ldr	r2, [r7, #0]
 8001422:	4013      	ands	r3, r2
 8001424:	041a      	lsls	r2, r3, #16
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	43db      	mvns	r3, r3
 800142a:	6839      	ldr	r1, [r7, #0]
 800142c:	400b      	ands	r3, r1
 800142e:	431a      	orrs	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	619a      	str	r2, [r3, #24]
}
 8001434:	46c0      	nop			@ (mov r8, r8)
 8001436:	46bd      	mov	sp, r7
 8001438:	b004      	add	sp, #16
 800143a:	bd80      	pop	{r7, pc}

0800143c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800143c:	b5b0      	push	{r4, r5, r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001442:	2001      	movs	r0, #1
 8001444:	f7ff fd94 	bl	8000f70 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001448:	2380      	movs	r3, #128	@ 0x80
 800144a:	055b      	lsls	r3, r3, #21
 800144c:	0018      	movs	r0, r3
 800144e:	f7ff fd79 	bl	8000f44 <LL_APB1_GRP1_EnableClock>

  /* SysTick_IRQn interrupt configuration */

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  LL_SYSCFG_DisableDBATT(LL_SYSCFG_UCPD1_STROBE | LL_SYSCFG_UCPD2_STROBE);
 8001452:	23c0      	movs	r3, #192	@ 0xc0
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	0018      	movs	r0, r3
 8001458:	f7ff fdb6 	bl	8000fc8 <LL_SYSCFG_DisableDBATT>
  /* USER CODE BEGIN Init */
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800145c:	f000 f83a 	bl	80014d4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* Initialize User push-button in EXTI mode */
   UserButton_Init();
 8001460:	f000 f9da 	bl	8001818 <UserButton_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001464:	f000 f9ab 	bl	80017be <MX_GPIO_Init>
  MX_DMA_Init();
 8001468:	f000 f99a 	bl	80017a0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800146c:	f000 f86c 	bl	8001548 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /*Wait for User push-button to start receive data*/
  WaitForUserButtonPress();
 8001470:	f000 fa28 	bl	80018c4 <WaitForUserButtonPress>

  StartTransfer(); // Enable DMA and its RX Channel
 8001474:	f000 fa52 	bl	800191c <StartTransfer>

  ExecuteTasksAndDisableChannel(); // When data is received, execute the tasks and close the channel
 8001478:	f000 fa62 	bl	8001940 <ExecuteTasksAndDisableChannel>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 ResetFlags();
 800147c:	f000 fa8e 	bl	800199c <ResetFlags>
	 // Start the recursion
	/* Configure the DMA functional parameters for reception */
	LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_2,
 8001480:	4b10      	ldr	r3, [pc, #64]	@ (80014c4 <main+0x88>)
 8001482:	2101      	movs	r1, #1
 8001484:	0018      	movs	r0, r3
 8001486:	f7ff ff5e 	bl	8001346 <LL_USART_DMA_GetRegAddr>
 800148a:	0005      	movs	r5, r0
 800148c:	4c0e      	ldr	r4, [pc, #56]	@ (80014c8 <main+0x8c>)
 800148e:	4b0f      	ldr	r3, [pc, #60]	@ (80014cc <main+0x90>)
 8001490:	2101      	movs	r1, #1
 8001492:	0018      	movs	r0, r3
 8001494:	f7ff fac4 	bl	8000a20 <LL_DMA_GetDataTransferDirection>
 8001498:	0003      	movs	r3, r0
 800149a:	480c      	ldr	r0, [pc, #48]	@ (80014cc <main+0x90>)
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	0023      	movs	r3, r4
 80014a0:	002a      	movs	r2, r5
 80014a2:	2101      	movs	r1, #1
 80014a4:	f7ff fbd6 	bl	8000c54 <LL_DMA_ConfigAddresses>
							   LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
							   (uint32_t)RxRawData,
							   LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2));
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_2, ubNbDataToReceive);
 80014a8:	4b09      	ldr	r3, [pc, #36]	@ (80014d0 <main+0x94>)
 80014aa:	881b      	ldrh	r3, [r3, #0]
 80014ac:	001a      	movs	r2, r3
 80014ae:	4b07      	ldr	r3, [pc, #28]	@ (80014cc <main+0x90>)
 80014b0:	2101      	movs	r1, #1
 80014b2:	0018      	movs	r0, r3
 80014b4:	f7ff fbac 	bl	8000c10 <LL_DMA_SetDataLength>

	StartTransfer();
 80014b8:	f000 fa30 	bl	800191c <StartTransfer>

	ExecuteTasksAndDisableChannel();
 80014bc:	f000 fa40 	bl	8001940 <ExecuteTasksAndDisableChannel>
	 ResetFlags();
 80014c0:	46c0      	nop			@ (mov r8, r8)
 80014c2:	e7db      	b.n	800147c <main+0x40>
 80014c4:	40004400 	.word	0x40004400
 80014c8:	20000028 	.word	0x20000028
 80014cc:	40020000 	.word	0x40020000
 80014d0:	20000000 	.word	0x20000000

080014d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* HSI configuration and activation */
  
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 80014d8:	2002      	movs	r0, #2
 80014da:	f7ff fd85 	bl	8000fe8 <LL_FLASH_SetLatency>

  /* HSI configuration and activation */
  LL_RCC_HSI_Enable();
 80014de:	f7ff fc5d 	bl	8000d9c <LL_RCC_HSI_Enable>
  while(LL_RCC_HSI_IsReady() != 1)
 80014e2:	46c0      	nop			@ (mov r8, r8)
 80014e4:	f7ff fc68 	bl	8000db8 <LL_RCC_HSI_IsReady>
 80014e8:	0003      	movs	r3, r0
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d1fa      	bne.n	80014e4 <SystemClock_Config+0x10>
  {
  }

  /* Main PLL configuration and activation */
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_4, 70, LL_RCC_PLLR_DIV_5);
 80014ee:	2380      	movs	r3, #128	@ 0x80
 80014f0:	061b      	lsls	r3, r3, #24
 80014f2:	2246      	movs	r2, #70	@ 0x46
 80014f4:	2130      	movs	r1, #48	@ 0x30
 80014f6:	2002      	movs	r0, #2
 80014f8:	f7ff fce0 	bl	8000ebc <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80014fc:	f7ff fcbc 	bl	8000e78 <LL_RCC_PLL_Enable>
  LL_RCC_PLL_EnableDomain_SYS();
 8001500:	f7ff fcfc 	bl	8000efc <LL_RCC_PLL_EnableDomain_SYS>
  while(LL_RCC_PLL_IsReady() != 1)
 8001504:	46c0      	nop			@ (mov r8, r8)
 8001506:	f7ff fcc5 	bl	8000e94 <LL_RCC_PLL_IsReady>
 800150a:	0003      	movs	r3, r0
 800150c:	2b01      	cmp	r3, #1
 800150e:	d1fa      	bne.n	8001506 <SystemClock_Config+0x32>
  {
  }

  /* Set AHB prescaler*/
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001510:	2000      	movs	r0, #0
 8001512:	f7ff fc85 	bl	8000e20 <LL_RCC_SetAHBPrescaler>

  /* Sysclk activation on the main PLL */
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001516:	2002      	movs	r0, #2
 8001518:	f7ff fc62 	bl	8000de0 <LL_RCC_SetSysClkSource>
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800151c:	46c0      	nop			@ (mov r8, r8)
 800151e:	f7ff fc73 	bl	8000e08 <LL_RCC_GetSysClkSource>
 8001522:	0003      	movs	r3, r0
 8001524:	2b10      	cmp	r3, #16
 8001526:	d1fa      	bne.n	800151e <SystemClock_Config+0x4a>
  {
  }

  /* Set APB1 prescaler*/
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001528:	2000      	movs	r0, #0
 800152a:	f7ff fc8f 	bl	8000e4c <LL_RCC_SetAPB1Prescaler>
  LL_Init1msTick(56000000);
 800152e:	4b05      	ldr	r3, [pc, #20]	@ (8001544 <SystemClock_Config+0x70>)
 8001530:	0018      	movs	r0, r3
 8001532:	f001 f91d 	bl	8002770 <LL_Init1msTick>
  /* Update CMSIS variable (which can be updated also through SystemCoreClockUpdate function) */
  LL_SetSystemCoreClock(56000000);
 8001536:	4b03      	ldr	r3, [pc, #12]	@ (8001544 <SystemClock_Config+0x70>)
 8001538:	0018      	movs	r0, r3
 800153a:	f001 f94d 	bl	80027d8 <LL_SetSystemCoreClock>
}
 800153e:	46c0      	nop			@ (mov r8, r8)
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	03567e00 	.word	0x03567e00

08001548 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800154a:	b091      	sub	sp, #68	@ 0x44
 800154c:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800154e:	2618      	movs	r6, #24
 8001550:	19bb      	adds	r3, r7, r6
 8001552:	0018      	movs	r0, r3
 8001554:	2320      	movs	r3, #32
 8001556:	001a      	movs	r2, r3
 8001558:	2100      	movs	r1, #0
 800155a:	f001 f94b 	bl	80027f4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155e:	003b      	movs	r3, r7
 8001560:	0018      	movs	r0, r3
 8001562:	2318      	movs	r3, #24
 8001564:	001a      	movs	r2, r3
 8001566:	2100      	movs	r1, #0
 8001568:	f001 f944 	bl	80027f4 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800156c:	2380      	movs	r3, #128	@ 0x80
 800156e:	029b      	lsls	r3, r3, #10
 8001570:	0018      	movs	r0, r3
 8001572:	f7ff fce7 	bl	8000f44 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8001576:	2001      	movs	r0, #1
 8001578:	f7ff fd10 	bl	8000f9c <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800157c:	003b      	movs	r3, r7
 800157e:	2204      	movs	r2, #4
 8001580:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001582:	003b      	movs	r3, r7
 8001584:	2202      	movs	r2, #2
 8001586:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001588:	003b      	movs	r3, r7
 800158a:	2202      	movs	r2, #2
 800158c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800158e:	003b      	movs	r3, r7
 8001590:	2200      	movs	r2, #0
 8001592:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001594:	003b      	movs	r3, r7
 8001596:	2201      	movs	r2, #1
 8001598:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 800159a:	003b      	movs	r3, r7
 800159c:	2201      	movs	r2, #1
 800159e:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a0:	003a      	movs	r2, r7
 80015a2:	23a0      	movs	r3, #160	@ 0xa0
 80015a4:	05db      	lsls	r3, r3, #23
 80015a6:	0011      	movs	r1, r2
 80015a8:	0018      	movs	r0, r3
 80015aa:	f000 fd69 	bl	8002080 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80015ae:	003b      	movs	r3, r7
 80015b0:	2208      	movs	r2, #8
 80015b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80015b4:	003b      	movs	r3, r7
 80015b6:	2202      	movs	r2, #2
 80015b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80015ba:	003b      	movs	r3, r7
 80015bc:	2202      	movs	r2, #2
 80015be:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80015c0:	003b      	movs	r3, r7
 80015c2:	2200      	movs	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80015c6:	003b      	movs	r3, r7
 80015c8:	2201      	movs	r2, #1
 80015ca:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80015cc:	003b      	movs	r3, r7
 80015ce:	2201      	movs	r2, #1
 80015d0:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d2:	003a      	movs	r2, r7
 80015d4:	23a0      	movs	r3, #160	@ 0xa0
 80015d6:	05db      	lsls	r3, r3, #23
 80015d8:	0011      	movs	r1, r2
 80015da:	0018      	movs	r0, r3
 80015dc:	f000 fd50 	bl	8002080 <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_USART2_TX);
 80015e0:	4b6b      	ldr	r3, [pc, #428]	@ (8001790 <MX_USART2_UART_Init+0x248>)
 80015e2:	2235      	movs	r2, #53	@ 0x35
 80015e4:	2100      	movs	r1, #0
 80015e6:	0018      	movs	r0, r3
 80015e8:	f7ff fb6c 	bl	8000cc4 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80015ec:	4b68      	ldr	r3, [pc, #416]	@ (8001790 <MX_USART2_UART_Init+0x248>)
 80015ee:	2210      	movs	r2, #16
 80015f0:	2100      	movs	r1, #0
 80015f2:	0018      	movs	r0, r3
 80015f4:	f7ff f9ee 	bl	80009d4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_HIGH);
 80015f8:	2380      	movs	r3, #128	@ 0x80
 80015fa:	019b      	lsls	r3, r3, #6
 80015fc:	4864      	ldr	r0, [pc, #400]	@ (8001790 <MX_USART2_UART_Init+0x248>)
 80015fe:	001a      	movs	r2, r3
 8001600:	2100      	movs	r1, #0
 8001602:	f7ff fadf 	bl	8000bc4 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 8001606:	4b62      	ldr	r3, [pc, #392]	@ (8001790 <MX_USART2_UART_Init+0x248>)
 8001608:	2200      	movs	r2, #0
 800160a:	2100      	movs	r1, #0
 800160c:	0018      	movs	r0, r3
 800160e:	f7ff fa21 	bl	8000a54 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8001612:	4b5f      	ldr	r3, [pc, #380]	@ (8001790 <MX_USART2_UART_Init+0x248>)
 8001614:	2200      	movs	r2, #0
 8001616:	2100      	movs	r1, #0
 8001618:	0018      	movs	r0, r3
 800161a:	f7ff fa3f 	bl	8000a9c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 800161e:	4b5c      	ldr	r3, [pc, #368]	@ (8001790 <MX_USART2_UART_Init+0x248>)
 8001620:	2280      	movs	r2, #128	@ 0x80
 8001622:	2100      	movs	r1, #0
 8001624:	0018      	movs	r0, r3
 8001626:	f7ff fa5d 	bl	8000ae4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_BYTE);
 800162a:	4b59      	ldr	r3, [pc, #356]	@ (8001790 <MX_USART2_UART_Init+0x248>)
 800162c:	2200      	movs	r2, #0
 800162e:	2100      	movs	r1, #0
 8001630:	0018      	movs	r0, r3
 8001632:	f7ff fa7b 	bl	8000b2c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 8001636:	4b56      	ldr	r3, [pc, #344]	@ (8001790 <MX_USART2_UART_Init+0x248>)
 8001638:	2200      	movs	r2, #0
 800163a:	2100      	movs	r1, #0
 800163c:	0018      	movs	r0, r3
 800163e:	f7ff fa9b 	bl	8000b78 <LL_DMA_SetMemorySize>

  /* USART2_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_2, LL_DMAMUX_REQ_USART2_RX);
 8001642:	4b53      	ldr	r3, [pc, #332]	@ (8001790 <MX_USART2_UART_Init+0x248>)
 8001644:	2234      	movs	r2, #52	@ 0x34
 8001646:	2101      	movs	r1, #1
 8001648:	0018      	movs	r0, r3
 800164a:	f7ff fb3b 	bl	8000cc4 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_PERIPH_TO_MEMORY); //Peripheral to memory
 800164e:	4b50      	ldr	r3, [pc, #320]	@ (8001790 <MX_USART2_UART_Init+0x248>)
 8001650:	2200      	movs	r2, #0
 8001652:	2101      	movs	r1, #1
 8001654:	0018      	movs	r0, r3
 8001656:	f7ff f9bd 	bl	80009d4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_HIGH); //priority high
 800165a:	2380      	movs	r3, #128	@ 0x80
 800165c:	019b      	lsls	r3, r3, #6
 800165e:	484c      	ldr	r0, [pc, #304]	@ (8001790 <MX_USART2_UART_Init+0x248>)
 8001660:	001a      	movs	r2, r3
 8001662:	2101      	movs	r1, #1
 8001664:	f7ff faae 	bl	8000bc4 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);  //Normal DMA
 8001668:	4b49      	ldr	r3, [pc, #292]	@ (8001790 <MX_USART2_UART_Init+0x248>)
 800166a:	2200      	movs	r2, #0
 800166c:	2101      	movs	r1, #1
 800166e:	0018      	movs	r0, r3
 8001670:	f7ff f9f0 	bl	8000a54 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 8001674:	4b46      	ldr	r3, [pc, #280]	@ (8001790 <MX_USART2_UART_Init+0x248>)
 8001676:	2200      	movs	r2, #0
 8001678:	2101      	movs	r1, #1
 800167a:	0018      	movs	r0, r3
 800167c:	f7ff fa0e 	bl	8000a9c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 8001680:	4b43      	ldr	r3, [pc, #268]	@ (8001790 <MX_USART2_UART_Init+0x248>)
 8001682:	2280      	movs	r2, #128	@ 0x80
 8001684:	2101      	movs	r1, #1
 8001686:	0018      	movs	r0, r3
 8001688:	f7ff fa2c 	bl	8000ae4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 800168c:	4b40      	ldr	r3, [pc, #256]	@ (8001790 <MX_USART2_UART_Init+0x248>)
 800168e:	2200      	movs	r2, #0
 8001690:	2101      	movs	r1, #1
 8001692:	0018      	movs	r0, r3
 8001694:	f7ff fa4a 	bl	8000b2c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 8001698:	4b3d      	ldr	r3, [pc, #244]	@ (8001790 <MX_USART2_UART_Init+0x248>)
 800169a:	2200      	movs	r2, #0
 800169c:	2101      	movs	r1, #1
 800169e:	0018      	movs	r0, r3
 80016a0:	f7ff fa6a 	bl	8000b78 <LL_DMA_SetMemorySize>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 80016a4:	2100      	movs	r1, #0
 80016a6:	201c      	movs	r0, #28
 80016a8:	f7ff f8e6 	bl	8000878 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 80016ac:	201c      	movs	r0, #28
 80016ae:	f7ff f8c9 	bl	8000844 <__NVIC_EnableIRQ>
//                         LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT),
//                         LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1));
//  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, ubNbDataToTransmit);

  /* Configure the DMA functional parameters for reception */
  LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_2,
 80016b2:	4b38      	ldr	r3, [pc, #224]	@ (8001794 <MX_USART2_UART_Init+0x24c>)
 80016b4:	2101      	movs	r1, #1
 80016b6:	0018      	movs	r0, r3
 80016b8:	f7ff fe45 	bl	8001346 <LL_USART_DMA_GetRegAddr>
 80016bc:	0005      	movs	r5, r0
 80016be:	4c36      	ldr	r4, [pc, #216]	@ (8001798 <MX_USART2_UART_Init+0x250>)
 80016c0:	4b33      	ldr	r3, [pc, #204]	@ (8001790 <MX_USART2_UART_Init+0x248>)
 80016c2:	2101      	movs	r1, #1
 80016c4:	0018      	movs	r0, r3
 80016c6:	f7ff f9ab 	bl	8000a20 <LL_DMA_GetDataTransferDirection>
 80016ca:	0003      	movs	r3, r0
 80016cc:	4830      	ldr	r0, [pc, #192]	@ (8001790 <MX_USART2_UART_Init+0x248>)
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	0023      	movs	r3, r4
 80016d2:	002a      	movs	r2, r5
 80016d4:	2101      	movs	r1, #1
 80016d6:	f7ff fabd 	bl	8000c54 <LL_DMA_ConfigAddresses>
                         LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
                         (uint32_t)RxRawData,
                         LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2));
  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_2, ubNbDataToReceive);
 80016da:	4b30      	ldr	r3, [pc, #192]	@ (800179c <MX_USART2_UART_Init+0x254>)
 80016dc:	881b      	ldrh	r3, [r3, #0]
 80016de:	001a      	movs	r2, r3
 80016e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001790 <MX_USART2_UART_Init+0x248>)
 80016e2:	2101      	movs	r1, #1
 80016e4:	0018      	movs	r0, r3
 80016e6:	f7ff fa93 	bl	8000c10 <LL_DMA_SetDataLength>

  /* Enable DMA transfer complete/error interrupts  */
//  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_1);
//  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_1);
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_2);
 80016ea:	4b29      	ldr	r3, [pc, #164]	@ (8001790 <MX_USART2_UART_Init+0x248>)
 80016ec:	2101      	movs	r1, #1
 80016ee:	0018      	movs	r0, r3
 80016f0:	f7ff fb14 	bl	8000d1c <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_2);
 80016f4:	4b26      	ldr	r3, [pc, #152]	@ (8001790 <MX_USART2_UART_Init+0x248>)
 80016f6:	2101      	movs	r1, #1
 80016f8:	0018      	movs	r0, r3
 80016fa:	f7ff fb2f 	bl	8000d5c <LL_DMA_EnableIT_TE>
  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 80016fe:	19bb      	adds	r3, r7, r6
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 19200;
 8001704:	19bb      	adds	r3, r7, r6
 8001706:	2296      	movs	r2, #150	@ 0x96
 8001708:	01d2      	lsls	r2, r2, #7
 800170a:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800170c:	0031      	movs	r1, r6
 800170e:	187b      	adds	r3, r7, r1
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001714:	187b      	adds	r3, r7, r1
 8001716:	2200      	movs	r2, #0
 8001718:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800171a:	187b      	adds	r3, r7, r1
 800171c:	2200      	movs	r2, #0
 800171e:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001720:	187b      	adds	r3, r7, r1
 8001722:	220c      	movs	r2, #12
 8001724:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001726:	187b      	adds	r3, r7, r1
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800172c:	187b      	adds	r3, r7, r1
 800172e:	2200      	movs	r2, #0
 8001730:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART2,&USART_InitStruct);
 8001732:	187b      	adds	r3, r7, r1
 8001734:	4a17      	ldr	r2, [pc, #92]	@ (8001794 <MX_USART2_UART_Init+0x24c>)
 8001736:	0019      	movs	r1, r3
 8001738:	0010      	movs	r0, r2
 800173a:	f000 ff71 	bl	8002620 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 800173e:	4b15      	ldr	r3, [pc, #84]	@ (8001794 <MX_USART2_UART_Init+0x24c>)
 8001740:	2100      	movs	r1, #0
 8001742:	0018      	movs	r0, r3
 8001744:	f7ff fcca 	bl	80010dc <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8001748:	4b12      	ldr	r3, [pc, #72]	@ (8001794 <MX_USART2_UART_Init+0x24c>)
 800174a:	2100      	movs	r1, #0
 800174c:	0018      	movs	r0, r3
 800174e:	f7ff fce9 	bl	8001124 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART2);
 8001752:	4b10      	ldr	r3, [pc, #64]	@ (8001794 <MX_USART2_UART_Init+0x24c>)
 8001754:	0018      	movs	r0, r3
 8001756:	f7ff fcb1 	bl	80010bc <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART2);
 800175a:	4b0e      	ldr	r3, [pc, #56]	@ (8001794 <MX_USART2_UART_Init+0x24c>)
 800175c:	0018      	movs	r0, r3
 800175e:	f7ff fd27 	bl	80011b0 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */
  LL_USART_EnableRxTimeout(USART2);
 8001762:	4b0c      	ldr	r3, [pc, #48]	@ (8001794 <MX_USART2_UART_Init+0x24c>)
 8001764:	0018      	movs	r0, r3
 8001766:	f7ff fd03 	bl	8001170 <LL_USART_EnableRxTimeout>
  LL_USART_SetRxTimeout(USART2, 960);
 800176a:	23f0      	movs	r3, #240	@ 0xf0
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4a09      	ldr	r2, [pc, #36]	@ (8001794 <MX_USART2_UART_Init+0x24c>)
 8001770:	0019      	movs	r1, r3
 8001772:	0010      	movs	r0, r2
 8001774:	f7ff fd0b 	bl	800118e <LL_USART_SetRxTimeout>

  LL_USART_ClearFlag_RTO(USART2);
 8001778:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <MX_USART2_UART_Init+0x24c>)
 800177a:	0018      	movs	r0, r3
 800177c:	f7ff fd98 	bl	80012b0 <LL_USART_ClearFlag_RTO>
  LL_USART_EnableIT_RTO(USART2);
 8001780:	4b04      	ldr	r3, [pc, #16]	@ (8001794 <MX_USART2_UART_Init+0x24c>)
 8001782:	0018      	movs	r0, r3
 8001784:	f7ff fda0 	bl	80012c8 <LL_USART_EnableIT_RTO>
//  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
//  {
//  }
  /* USER CODE BEGIN USART2_Init 2 */

}
 8001788:	46c0      	nop			@ (mov r8, r8)
 800178a:	46bd      	mov	sp, r7
 800178c:	b00f      	add	sp, #60	@ 0x3c
 800178e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001790:	40020000 	.word	0x40020000
 8001794:	40004400 	.word	0x40004400
 8001798:	20000028 	.word	0x20000028
 800179c:	20000000 	.word	0x20000000

080017a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80017a4:	2001      	movs	r0, #1
 80017a6:	f7ff fbb7 	bl	8000f18 <LL_AHB1_GRP1_EnableClock>
  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
//  NVIC_SetPriority(DMA1_Channel1_IRQn, 0);
//  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0);
 80017aa:	2100      	movs	r1, #0
 80017ac:	200a      	movs	r0, #10
 80017ae:	f7ff f863 	bl	8000878 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80017b2:	200a      	movs	r0, #10
 80017b4:	f7ff f846 	bl	8000844 <__NVIC_EnableIRQ>

}
 80017b8:	46c0      	nop			@ (mov r8, r8)
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b086      	sub	sp, #24
 80017c2:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	003b      	movs	r3, r7
 80017c6:	0018      	movs	r0, r3
 80017c8:	2318      	movs	r3, #24
 80017ca:	001a      	movs	r2, r3
 80017cc:	2100      	movs	r1, #0
 80017ce:	f001 f811 	bl	80027f4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */


  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80017d2:	2001      	movs	r0, #1
 80017d4:	f7ff fbe2 	bl	8000f9c <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED4_GPIO_Port, LED4_Pin);
 80017d8:	23a0      	movs	r3, #160	@ 0xa0
 80017da:	05db      	lsls	r3, r3, #23
 80017dc:	2120      	movs	r1, #32
 80017de:	0018      	movs	r0, r3
 80017e0:	f7ff fe09 	bl	80013f6 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LED4_Pin;
 80017e4:	003b      	movs	r3, r7
 80017e6:	2220      	movs	r2, #32
 80017e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80017ea:	003b      	movs	r3, r7
 80017ec:	2201      	movs	r2, #1
 80017ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80017f0:	003b      	movs	r3, r7
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80017f6:	003b      	movs	r3, r7
 80017f8:	2200      	movs	r2, #0
 80017fa:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80017fc:	003b      	movs	r3, r7
 80017fe:	2200      	movs	r2, #0
 8001800:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8001802:	003a      	movs	r2, r7
 8001804:	23a0      	movs	r3, #160	@ 0xa0
 8001806:	05db      	lsls	r3, r3, #23
 8001808:	0011      	movs	r1, r2
 800180a:	0018      	movs	r0, r3
 800180c:	f000 fc38 	bl	8002080 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */

}
 8001810:	46c0      	nop			@ (mov r8, r8)
 8001812:	46bd      	mov	sp, r7
 8001814:	b006      	add	sp, #24
 8001816:	bd80      	pop	{r7, pc}

08001818 <UserButton_Init>:

/* USER CODE BEGIN 4 */
void UserButton_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  USER_BUTTON_GPIO_CLK_ENABLE();
 800181c:	2004      	movs	r0, #4
 800181e:	f7ff fbbd 	bl	8000f9c <LL_IOP_GRP1_EnableClock>

  /* Configure GPIO for BUTTON */
  LL_GPIO_SetPinMode(USER_BUTTON_GPIO_PORT, USER_BUTTON_PIN, LL_GPIO_MODE_INPUT);
 8001822:	2380      	movs	r3, #128	@ 0x80
 8001824:	019b      	lsls	r3, r3, #6
 8001826:	4812      	ldr	r0, [pc, #72]	@ (8001870 <UserButton_Init+0x58>)
 8001828:	2200      	movs	r2, #0
 800182a:	0019      	movs	r1, r3
 800182c:	f7ff fd9f 	bl	800136e <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinPull(USER_BUTTON_GPIO_PORT, USER_BUTTON_PIN, LL_GPIO_PULL_NO);
 8001830:	2380      	movs	r3, #128	@ 0x80
 8001832:	019b      	lsls	r3, r3, #6
 8001834:	480e      	ldr	r0, [pc, #56]	@ (8001870 <UserButton_Init+0x58>)
 8001836:	2200      	movs	r2, #0
 8001838:	0019      	movs	r1, r3
 800183a:	f7ff fdb4 	bl	80013a6 <LL_GPIO_SetPinPull>

  /* Connect External Line to the GPIO*/
  USER_BUTTON_SYSCFG_SET_EXTI();
 800183e:	4b0d      	ldr	r3, [pc, #52]	@ (8001874 <UserButton_Init+0x5c>)
 8001840:	0019      	movs	r1, r3
 8001842:	2002      	movs	r0, #2
 8001844:	f7ff fc06 	bl	8001054 <LL_EXTI_SetEXTISource>

  /* Enable a rising trigger EXTI_Line4_15 Interrupt */
  USER_BUTTON_EXTI_LINE_ENABLE();
 8001848:	2380      	movs	r3, #128	@ 0x80
 800184a:	019b      	lsls	r3, r3, #6
 800184c:	0018      	movs	r0, r3
 800184e:	f7ff fbdf 	bl	8001010 <LL_EXTI_EnableIT_0_31>
  USER_BUTTON_EXTI_FALLING_TRIG_ENABLE();
 8001852:	2380      	movs	r3, #128	@ 0x80
 8001854:	019b      	lsls	r3, r3, #6
 8001856:	0018      	movs	r0, r3
 8001858:	f7ff fbec 	bl	8001034 <LL_EXTI_EnableFallingTrig_0_31>

  /* Configure NVIC for USER_BUTTON_EXTI_IRQn */
  NVIC_SetPriority(USER_BUTTON_EXTI_IRQn, 3);
 800185c:	2103      	movs	r1, #3
 800185e:	2007      	movs	r0, #7
 8001860:	f7ff f80a 	bl	8000878 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USER_BUTTON_EXTI_IRQn);
 8001864:	2007      	movs	r0, #7
 8001866:	f7fe ffed 	bl	8000844 <__NVIC_EnableIRQ>
}
 800186a:	46c0      	nop			@ (mov r8, r8)
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	50000800 	.word	0x50000800
 8001874:	00080003 	.word	0x00080003

08001878 <LED_On>:

void LED_On(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* Turn LED4 on */
  LL_GPIO_SetOutputPin(LED4_GPIO_Port, LED4_Pin);
 800187c:	23a0      	movs	r3, #160	@ 0xa0
 800187e:	05db      	lsls	r3, r3, #23
 8001880:	2120      	movs	r1, #32
 8001882:	0018      	movs	r0, r3
 8001884:	f7ff fdab 	bl	80013de <LL_GPIO_SetOutputPin>
}
 8001888:	46c0      	nop			@ (mov r8, r8)
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <LED_Off>:

void LED_Off(void)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	af00      	add	r7, sp, #0
  /* Turn LED4 off */
  LL_GPIO_ResetOutputPin(LED4_GPIO_Port, LED4_Pin);
 8001892:	23a0      	movs	r3, #160	@ 0xa0
 8001894:	05db      	lsls	r3, r3, #23
 8001896:	2120      	movs	r1, #32
 8001898:	0018      	movs	r0, r3
 800189a:	f7ff fdac 	bl	80013f6 <LL_GPIO_ResetOutputPin>
}
 800189e:	46c0      	nop			@ (mov r8, r8)
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <LED_Blinking>:

void LED_Blinking(uint32_t Period)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* Toggle LED4 in an infinite loop */
  while (1)
  {
    LL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 80018ac:	23a0      	movs	r3, #160	@ 0xa0
 80018ae:	05db      	lsls	r3, r3, #23
 80018b0:	2120      	movs	r1, #32
 80018b2:	0018      	movs	r0, r3
 80018b4:	f7ff fdab 	bl	800140e <LL_GPIO_TogglePin>
    LL_mDelay(Period);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	0018      	movs	r0, r3
 80018bc:	f000 ff68 	bl	8002790 <LL_mDelay>
    LL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 80018c0:	46c0      	nop			@ (mov r8, r8)
 80018c2:	e7f3      	b.n	80018ac <LED_Blinking+0x8>

080018c4 <WaitForUserButtonPress>:
  }
}


void WaitForUserButtonPress(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0

  while (ubButtonPress == 0)
 80018c8:	e008      	b.n	80018dc <WaitForUserButtonPress+0x18>
  {

    LL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 80018ca:	23a0      	movs	r3, #160	@ 0xa0
 80018cc:	05db      	lsls	r3, r3, #23
 80018ce:	2120      	movs	r1, #32
 80018d0:	0018      	movs	r0, r3
 80018d2:	f7ff fd9c 	bl	800140e <LL_GPIO_TogglePin>
    LL_mDelay(200);
 80018d6:	20c8      	movs	r0, #200	@ 0xc8
 80018d8:	f000 ff5a 	bl	8002790 <LL_mDelay>
  while (ubButtonPress == 0)
 80018dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001914 <WaitForUserButtonPress+0x50>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d0f1      	beq.n	80018ca <WaitForUserButtonPress+0x6>
  }
  /* Ensure that LED4 is turned Off */
  LL_USART_Enable(USART2);
 80018e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001918 <WaitForUserButtonPress+0x54>)
 80018e8:	0018      	movs	r0, r3
 80018ea:	f7ff fbd9 	bl	80010a0 <LL_USART_Enable>
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 80018ee:	e001      	b.n	80018f4 <WaitForUserButtonPress+0x30>
  //  {
  //  }
  LED_Off();
 80018f0:	f7ff ffcd 	bl	800188e <LED_Off>
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 80018f4:	4b08      	ldr	r3, [pc, #32]	@ (8001918 <WaitForUserButtonPress+0x54>)
 80018f6:	0018      	movs	r0, r3
 80018f8:	f7ff fc86 	bl	8001208 <LL_USART_IsActiveFlag_TEACK>
 80018fc:	1e03      	subs	r3, r0, #0
 80018fe:	d0f7      	beq.n	80018f0 <WaitForUserButtonPress+0x2c>
 8001900:	4b05      	ldr	r3, [pc, #20]	@ (8001918 <WaitForUserButtonPress+0x54>)
 8001902:	0018      	movs	r0, r3
 8001904:	f7ff fc94 	bl	8001230 <LL_USART_IsActiveFlag_REACK>
 8001908:	1e03      	subs	r3, r0, #0
 800190a:	d0f1      	beq.n	80018f0 <WaitForUserButtonPress+0x2c>
}
 800190c:	46c0      	nop			@ (mov r8, r8)
 800190e:	46c0      	nop			@ (mov r8, r8)
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20000024 	.word	0x20000024
 8001918:	40004400 	.word	0x40004400

0800191c <StartTransfer>:

void StartTransfer(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* Enable DMA RX Interrupt */
  LL_USART_EnableDMAReq_RX(USART2);
 8001920:	4b05      	ldr	r3, [pc, #20]	@ (8001938 <StartTransfer+0x1c>)
 8001922:	0018      	movs	r0, r3
 8001924:	f7ff fcf0 	bl	8001308 <LL_USART_EnableDMAReq_RX>

  /* Enable DMA Channel Rx */
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_2);
 8001928:	4b04      	ldr	r3, [pc, #16]	@ (800193c <StartTransfer+0x20>)
 800192a:	2101      	movs	r1, #1
 800192c:	0018      	movs	r0, r3
 800192e:	f7ff f811 	bl	8000954 <LL_DMA_EnableChannel>

  /* Enable DMA Channel Tx */

}
 8001932:	46c0      	nop			@ (mov r8, r8)
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40004400 	.word	0x40004400
 800193c:	40020000 	.word	0x40020000

08001940 <ExecuteTasksAndDisableChannel>:


void ExecuteTasksAndDisableChannel(void){
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
	while(ubReceptionComplete != 1)
 8001944:	46c0      	nop			@ (mov r8, r8)
 8001946:	4b08      	ldr	r3, [pc, #32]	@ (8001968 <ExecuteTasksAndDisableChannel+0x28>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2b01      	cmp	r3, #1
 800194e:	d1fa      	bne.n	8001946 <ExecuteTasksAndDisableChannel+0x6>
	{
		//Task1(RxBuffer);
	}

	Task1(RxBuffer);
 8001950:	4b06      	ldr	r3, [pc, #24]	@ (800196c <ExecuteTasksAndDisableChannel+0x2c>)
 8001952:	0018      	movs	r0, r3
 8001954:	f000 f89c 	bl	8001a90 <Task1>
	LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_2);
 8001958:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <ExecuteTasksAndDisableChannel+0x30>)
 800195a:	2101      	movs	r1, #1
 800195c:	0018      	movs	r0, r3
 800195e:	f7ff f819 	bl	8000994 <LL_DMA_DisableChannel>

}
 8001962:	46c0      	nop			@ (mov r8, r8)
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	2000016d 	.word	0x2000016d
 800196c:	20000154 	.word	0x20000154
 8001970:	40020000 	.word	0x40020000

08001974 <DMA1_ReceiveComplete_Callback>:

void DMA1_ReceiveComplete_Callback(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
	ubReceptionComplete=1;
 8001978:	4b02      	ldr	r3, [pc, #8]	@ (8001984 <DMA1_ReceiveComplete_Callback+0x10>)
 800197a:	2201      	movs	r2, #1
 800197c:	701a      	strb	r2, [r3, #0]
}
 800197e:	46c0      	nop			@ (mov r8, r8)
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	2000016d 	.word	0x2000016d

08001988 <UserButton_Callback>:

void UserButton_Callback(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* Update User push-button variable : to be checked in waiting loop in main program */
	ubButtonPress = 1;
 800198c:	4b02      	ldr	r3, [pc, #8]	@ (8001998 <UserButton_Callback+0x10>)
 800198e:	2201      	movs	r2, #1
 8001990:	701a      	strb	r2, [r3, #0]
}
 8001992:	46c0      	nop			@ (mov r8, r8)
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000024 	.word	0x20000024

0800199c <ResetFlags>:

void ResetFlags(void){
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0

	/* Buffer used for reception */
	ubReceptionComplete = 0;
 80019a0:	4b02      	ldr	r3, [pc, #8]	@ (80019ac <ResetFlags+0x10>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]

}
 80019a6:	46c0      	nop			@ (mov r8, r8)
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	2000016d 	.word	0x2000016d

080019b0 <USART_TransferError_Callback>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void USART_TransferError_Callback(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* Disable DMA1 Tx Channel */
  LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_1);
 80019b4:	4b08      	ldr	r3, [pc, #32]	@ (80019d8 <USART_TransferError_Callback+0x28>)
 80019b6:	2100      	movs	r1, #0
 80019b8:	0018      	movs	r0, r3
 80019ba:	f7fe ffeb 	bl	8000994 <LL_DMA_DisableChannel>

  /* Disable DMA1 Rx Channel */
  LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_2);
 80019be:	4b06      	ldr	r3, [pc, #24]	@ (80019d8 <USART_TransferError_Callback+0x28>)
 80019c0:	2101      	movs	r1, #1
 80019c2:	0018      	movs	r0, r3
 80019c4:	f7fe ffe6 	bl	8000994 <LL_DMA_DisableChannel>

  /* Set LED4 to Blinking mode to indicate error occurs */
  LED_Blinking(500);
 80019c8:	23fa      	movs	r3, #250	@ 0xfa
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	0018      	movs	r0, r3
 80019ce:	f7ff ff69 	bl	80018a4 <LED_Blinking>
}
 80019d2:	46c0      	nop			@ (mov r8, r8)
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40020000 	.word	0x40020000

080019dc <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 80019dc:	b590      	push	{r4, r7, lr}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0

	uint32_t isrflags=READ_REG(USART2->ISR); // Read ISR register
 80019e2:	4b26      	ldr	r3, [pc, #152]	@ (8001a7c <USART2_IRQHandler+0xa0>)
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	607b      	str	r3, [r7, #4]
	uint32_t errorflags=( isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE) ); // Read the error flags
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	220f      	movs	r2, #15
 80019ec:	4013      	ands	r3, r2
 80019ee:	603b      	str	r3, [r7, #0]

  /* USER CODE BEGIN USART2_IRQn 0 */
	if (LL_USART_IsActiveFlag_RTO(USART2)) //Check if Rx Timeou(RTO) flag is set.
 80019f0:	4b22      	ldr	r3, [pc, #136]	@ (8001a7c <USART2_IRQHandler+0xa0>)
 80019f2:	0018      	movs	r0, r3
 80019f4:	f7ff fbf4 	bl	80011e0 <LL_USART_IsActiveFlag_RTO>
 80019f8:	1e03      	subs	r3, r0, #0
 80019fa:	d018      	beq.n	8001a2e <USART2_IRQHandler+0x52>
	    {
	        // Clear the Rx Timeout flag
	        LL_USART_ClearFlag_RTO(USART2);
 80019fc:	4b1f      	ldr	r3, [pc, #124]	@ (8001a7c <USART2_IRQHandler+0xa0>)
 80019fe:	0018      	movs	r0, r3
 8001a00:	f7ff fc56 	bl	80012b0 <LL_USART_ClearFlag_RTO>
//	     if ( DataUsed== 1){
//	    	 memset(RxBuffer,0,sizeof(RxBuffer));
//	    	 DataUsed=0;
//	     }
	    	 memcpy(RxBuffer, RxRawData,sizeof(RxBuffer)); // Keep the input with RxBuffer
 8001a04:	4b1e      	ldr	r3, [pc, #120]	@ (8001a80 <USART2_IRQHandler+0xa4>)
 8001a06:	4a1f      	ldr	r2, [pc, #124]	@ (8001a84 <USART2_IRQHandler+0xa8>)
 8001a08:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001a0a:	c313      	stmia	r3!, {r0, r1, r4}
 8001a0c:	6811      	ldr	r1, [r2, #0]
 8001a0e:	6019      	str	r1, [r3, #0]
 8001a10:	7912      	ldrb	r2, [r2, #4]
 8001a12:	711a      	strb	r2, [r3, #4]
			 IndexRxRawData= 0; // Reset the RawData index
 8001a14:	4b1c      	ldr	r3, [pc, #112]	@ (8001a88 <USART2_IRQHandler+0xac>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	701a      	strb	r2, [r3, #0]
			 memset(RxRawData, 0, sizeof(RxRawData)); // Clear the RxRawData to get new input starting from index 0.
 8001a1a:	2396      	movs	r3, #150	@ 0x96
 8001a1c:	005a      	lsls	r2, r3, #1
 8001a1e:	4b19      	ldr	r3, [pc, #100]	@ (8001a84 <USART2_IRQHandler+0xa8>)
 8001a20:	2100      	movs	r1, #0
 8001a22:	0018      	movs	r0, r3
 8001a24:	f000 fee6 	bl	80027f4 <memset>
			 ubReceptionComplete = 1;
 8001a28:	4b18      	ldr	r3, [pc, #96]	@ (8001a8c <USART2_IRQHandler+0xb0>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	701a      	strb	r2, [r3, #0]
	      //Calls the interrupt then restarts DMA.
			}

	if( errorflags!=0 ){
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d01f      	beq.n	8001a74 <USART2_IRQHandler+0x98>
		if( (isrflags & USART_ISR_PE)!=0 ){
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	4013      	ands	r3, r2
 8001a3a:	d003      	beq.n	8001a44 <USART2_IRQHandler+0x68>
			LL_USART_ClearFlag_PE(USART2);
 8001a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a7c <USART2_IRQHandler+0xa0>)
 8001a3e:	0018      	movs	r0, r3
 8001a40:	f7ff fc0a 	bl	8001258 <LL_USART_ClearFlag_PE>
		}
		if( (isrflags & USART_ISR_FE)!=0 ){
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2202      	movs	r2, #2
 8001a48:	4013      	ands	r3, r2
 8001a4a:	d003      	beq.n	8001a54 <USART2_IRQHandler+0x78>
			LL_USART_ClearFlag_FE(USART2);
 8001a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a7c <USART2_IRQHandler+0xa0>)
 8001a4e:	0018      	movs	r0, r3
 8001a50:	f7ff fc0d 	bl	800126e <LL_USART_ClearFlag_FE>
		}
		if( (isrflags & USART_ISR_NE)!=0 ){
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2204      	movs	r2, #4
 8001a58:	4013      	ands	r3, r2
 8001a5a:	d003      	beq.n	8001a64 <USART2_IRQHandler+0x88>
			LL_USART_ClearFlag_NE(USART2);
 8001a5c:	4b07      	ldr	r3, [pc, #28]	@ (8001a7c <USART2_IRQHandler+0xa0>)
 8001a5e:	0018      	movs	r0, r3
 8001a60:	f7ff fc10 	bl	8001284 <LL_USART_ClearFlag_NE>
		}
		if( (isrflags & USART_ISR_ORE)!=0 ){
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2208      	movs	r2, #8
 8001a68:	4013      	ands	r3, r2
 8001a6a:	d003      	beq.n	8001a74 <USART2_IRQHandler+0x98>
			LL_USART_ClearFlag_ORE(USART2);
 8001a6c:	4b03      	ldr	r3, [pc, #12]	@ (8001a7c <USART2_IRQHandler+0xa0>)
 8001a6e:	0018      	movs	r0, r3
 8001a70:	f7ff fc13 	bl	800129a <LL_USART_ClearFlag_ORE>
//	{
//		RxRawData[IndexRxRawData++] == LL_USART_ReceiveData8(USART2); //Store the received data in RxRawData
//
//
//	}
}
 8001a74:	46c0      	nop			@ (mov r8, r8)
 8001a76:	46bd      	mov	sp, r7
 8001a78:	b003      	add	sp, #12
 8001a7a:	bd90      	pop	{r4, r7, pc}
 8001a7c:	40004400 	.word	0x40004400
 8001a80:	20000154 	.word	0x20000154
 8001a84:	20000028 	.word	0x20000028
 8001a88:	2000016c 	.word	0x2000016c
 8001a8c:	2000016d 	.word	0x2000016d

08001a90 <Task1>:

void Task1(uint8_t *SmallBuffer){ //
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]

	for(int i=0; i<4;i++){ // Store the processed Data from RxBuffer
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	e00c      	b.n	8001ab8 <Task1+0x28>
		ProcessedData[i]= SmallBuffer[i+6];
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	3306      	adds	r3, #6
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	18d3      	adds	r3, r2, r3
 8001aa6:	7819      	ldrb	r1, [r3, #0]
 8001aa8:	4a3b      	ldr	r2, [pc, #236]	@ (8001b98 <Task1+0x108>)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	18d3      	adds	r3, r2, r3
 8001aae:	1c0a      	adds	r2, r1, #0
 8001ab0:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<4;i++){ // Store the processed Data from RxBuffer
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2b03      	cmp	r3, #3
 8001abc:	ddef      	ble.n	8001a9e <Task1+0xe>
	}

	mydata.STX=SmallBuffer[0]; //STX
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	781a      	ldrb	r2, [r3, #0]
 8001ac2:	4b36      	ldr	r3, [pc, #216]	@ (8001b9c <Task1+0x10c>)
 8001ac4:	701a      	strb	r2, [r3, #0]
	mydata.STA=SmallBuffer[1]; //STA
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	785a      	ldrb	r2, [r3, #1]
 8001aca:	4b34      	ldr	r3, [pc, #208]	@ (8001b9c <Task1+0x10c>)
 8001acc:	705a      	strb	r2, [r3, #1]
	mydata.STB=SmallBuffer[2]; //STB
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	789a      	ldrb	r2, [r3, #2]
 8001ad2:	4b32      	ldr	r3, [pc, #200]	@ (8001b9c <Task1+0x10c>)
 8001ad4:	709a      	strb	r2, [r3, #2]
	mydata.STC=SmallBuffer[3]; //STC
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	78da      	ldrb	r2, [r3, #3]
 8001ada:	4b30      	ldr	r3, [pc, #192]	@ (8001b9c <Task1+0x10c>)
 8001adc:	70da      	strb	r2, [r3, #3]
	for (int i = 4; i<15;i++){
 8001ade:	2304      	movs	r3, #4
 8001ae0:	60bb      	str	r3, [r7, #8]
 8001ae2:	e042      	b.n	8001b6a <Task1+0xda>
		if (i<10)
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	2b09      	cmp	r3, #9
 8001ae8:	dc1d      	bgt.n	8001b26 <Task1+0x96>
		{	if(SmallBuffer[i]==' '){ // Check if there is space
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	18d3      	adds	r3, r2, r3
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2b20      	cmp	r3, #32
 8001af4:	d108      	bne.n	8001b08 <Task1+0x78>
				mydata.Indicated[i-4]=0; // Replace space with decimal 0
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	3b04      	subs	r3, #4
 8001afa:	4a28      	ldr	r2, [pc, #160]	@ (8001b9c <Task1+0x10c>)
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	18d3      	adds	r3, r2, r3
 8001b00:	3304      	adds	r3, #4
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	e02d      	b.n	8001b64 <Task1+0xd4>
		}
			else{
				mydata.Indicated[i-4]=SmallBuffer[i]-'0';
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	18d3      	adds	r3, r2, r3
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	3b30      	subs	r3, #48	@ 0x30
 8001b12:	001a      	movs	r2, r3
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	3b04      	subs	r3, #4
 8001b18:	0011      	movs	r1, r2
 8001b1a:	4a20      	ldr	r2, [pc, #128]	@ (8001b9c <Task1+0x10c>)
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	18d3      	adds	r3, r2, r3
 8001b20:	3304      	adds	r3, #4
 8001b22:	6019      	str	r1, [r3, #0]
 8001b24:	e01e      	b.n	8001b64 <Task1+0xd4>
			}
		}
		else{
			if(SmallBuffer[i]==' '){
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	18d3      	adds	r3, r2, r3
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b20      	cmp	r3, #32
 8001b30:	d109      	bne.n	8001b46 <Task1+0xb6>
					mydata.Tare[i-9]=0;
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	3b09      	subs	r3, #9
 8001b36:	4a19      	ldr	r2, [pc, #100]	@ (8001b9c <Task1+0x10c>)
 8001b38:	3306      	adds	r3, #6
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	18d3      	adds	r3, r2, r3
 8001b3e:	3304      	adds	r3, #4
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	e00e      	b.n	8001b64 <Task1+0xd4>
			}
			else{
				mydata.Tare[i-9]=SmallBuffer[i]-'0';
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	18d3      	adds	r3, r2, r3
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	3b30      	subs	r3, #48	@ 0x30
 8001b50:	001a      	movs	r2, r3
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	3b09      	subs	r3, #9
 8001b56:	0011      	movs	r1, r2
 8001b58:	4a10      	ldr	r2, [pc, #64]	@ (8001b9c <Task1+0x10c>)
 8001b5a:	3306      	adds	r3, #6
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	18d3      	adds	r3, r2, r3
 8001b60:	3304      	adds	r3, #4
 8001b62:	6019      	str	r1, [r3, #0]
	for (int i = 4; i<15;i++){
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	3301      	adds	r3, #1
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	2b0e      	cmp	r3, #14
 8001b6e:	ddb9      	ble.n	8001ae4 <Task1+0x54>
				}
		}
	}

	LightTask(ProcessedData);
 8001b70:	4b09      	ldr	r3, [pc, #36]	@ (8001b98 <Task1+0x108>)
 8001b72:	0018      	movs	r0, r3
 8001b74:	f000 f816 	bl	8001ba4 <LightTask>
	memset(ProcessedData,0, sizeof(ProcessedData)); // REset the ProcessedDAta
 8001b78:	4b07      	ldr	r3, [pc, #28]	@ (8001b98 <Task1+0x108>)
 8001b7a:	2204      	movs	r2, #4
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	0018      	movs	r0, r3
 8001b80:	f000 fe38 	bl	80027f4 <memset>
	DataUsed=1; //Raise Flag when the Task1 is done.
 8001b84:	4b06      	ldr	r3, [pc, #24]	@ (8001ba0 <Task1+0x110>)
 8001b86:	2201      	movs	r2, #1
 8001b88:	701a      	strb	r2, [r3, #0]

	ConstructData();
 8001b8a:	f000 f845 	bl	8001c18 <ConstructData>

}
 8001b8e:	46c0      	nop			@ (mov r8, r8)
 8001b90:	46bd      	mov	sp, r7
 8001b92:	b004      	add	sp, #16
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	46c0      	nop			@ (mov r8, r8)
 8001b98:	20000168 	.word	0x20000168
 8001b9c:	20000174 	.word	0x20000174
 8001ba0:	2000016e 	.word	0x2000016e

08001ba4 <LightTask>:

void LightTask(uint8_t *ProcessedData){
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
	int i, k = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	613b      	str	r3, [r7, #16]
	int ProcessedData_Size= sizeof(ProcessedData);
 8001bb0:	2304      	movs	r3, #4
 8001bb2:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < ProcessedData_Size; i++){ // Convert the processed data to whole integer number
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
 8001bb8:	e00f      	b.n	8001bda <LightTask+0x36>
		k = 10 * k + (ProcessedData[i] - '0'); // Turn the character into integer by substracting '0'
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	0013      	movs	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	189b      	adds	r3, r3, r2
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	0019      	movs	r1, r3
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	18d3      	adds	r3, r2, r3
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	3b30      	subs	r3, #48	@ 0x30
 8001bd0:	18cb      	adds	r3, r1, r3
 8001bd2:	613b      	str	r3, [r7, #16]
	for (i = 0; i < ProcessedData_Size; i++){ // Convert the processed data to whole integer number
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	617b      	str	r3, [r7, #20]
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	dbeb      	blt.n	8001bba <LightTask+0x16>
	}
	a=k;
 8001be2:	4b0a      	ldr	r3, [pc, #40]	@ (8001c0c <LightTask+0x68>)
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	601a      	str	r2, [r3, #0]
	if ( k > 1330 && k < 1340){ // Blink LED, if the proccessed integer is at between desired borders
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	4a09      	ldr	r2, [pc, #36]	@ (8001c10 <LightTask+0x6c>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	dd06      	ble.n	8001bfe <LightTask+0x5a>
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	4a08      	ldr	r2, [pc, #32]	@ (8001c14 <LightTask+0x70>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	dc02      	bgt.n	8001bfe <LightTask+0x5a>
		LED_On();
 8001bf8:	f7ff fe3e 	bl	8001878 <LED_On>
 8001bfc:	e002      	b.n	8001c04 <LightTask+0x60>
	}
	else{
		LED_Off();
 8001bfe:	f7ff fe46 	bl	800188e <LED_Off>
	}

}
 8001c02:	46c0      	nop			@ (mov r8, r8)
 8001c04:	46c0      	nop			@ (mov r8, r8)
 8001c06:	46bd      	mov	sp, r7
 8001c08:	b006      	add	sp, #24
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20000170 	.word	0x20000170
 8001c10:	00000532 	.word	0x00000532
 8001c14:	0000053b 	.word	0x0000053b

08001c18 <ConstructData>:

uint8_t var;
double b;
void ConstructData(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
	b=a;
 8001c1e:	4b47      	ldr	r3, [pc, #284]	@ (8001d3c <ConstructData+0x124>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	0018      	movs	r0, r3
 8001c24:	f7fe fdc2 	bl	80007ac <__aeabi_i2d>
 8001c28:	0002      	movs	r2, r0
 8001c2a:	000b      	movs	r3, r1
 8001c2c:	4944      	ldr	r1, [pc, #272]	@ (8001d40 <ConstructData+0x128>)
 8001c2e:	600a      	str	r2, [r1, #0]
 8001c30:	604b      	str	r3, [r1, #4]
	//STA
	uint8_t STA_Bitof_0=((mydata.STA >> 0) & 1);
 8001c32:	4b44      	ldr	r3, [pc, #272]	@ (8001d44 <ConstructData+0x12c>)
 8001c34:	785a      	ldrb	r2, [r3, #1]
 8001c36:	1dfb      	adds	r3, r7, #7
 8001c38:	2101      	movs	r1, #1
 8001c3a:	400a      	ands	r2, r1
 8001c3c:	701a      	strb	r2, [r3, #0]
	uint8_t STA_Bitof_1=((mydata.STA >> 1) & 1);
 8001c3e:	4b41      	ldr	r3, [pc, #260]	@ (8001d44 <ConstructData+0x12c>)
 8001c40:	785b      	ldrb	r3, [r3, #1]
 8001c42:	085b      	lsrs	r3, r3, #1
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	1dbb      	adds	r3, r7, #6
 8001c48:	2101      	movs	r1, #1
 8001c4a:	400a      	ands	r2, r1
 8001c4c:	701a      	strb	r2, [r3, #0]
	uint8_t STA_Bitof_2=((mydata.STA >> 2) & 1);
 8001c4e:	4b3d      	ldr	r3, [pc, #244]	@ (8001d44 <ConstructData+0x12c>)
 8001c50:	785b      	ldrb	r3, [r3, #1]
 8001c52:	089b      	lsrs	r3, r3, #2
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	1d7b      	adds	r3, r7, #5
 8001c58:	2101      	movs	r1, #1
 8001c5a:	400a      	ands	r2, r1
 8001c5c:	701a      	strb	r2, [r3, #0]
	DecOfFirst3 = (4*STA_Bitof_2)+(2* STA_Bitof_1)+(1*STA_Bitof_0);
 8001c5e:	1d7b      	adds	r3, r7, #5
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	005a      	lsls	r2, r3, #1
 8001c64:	1dbb      	adds	r3, r7, #6
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	18d3      	adds	r3, r2, r3
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	18db      	adds	r3, r3, r3
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	1dfb      	adds	r3, r7, #7
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	18d3      	adds	r3, r2, r3
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	4b33      	ldr	r3, [pc, #204]	@ (8001d48 <ConstructData+0x130>)
 8001c7a:	701a      	strb	r2, [r3, #0]
	var=STA_Bitof_0;
 8001c7c:	4b33      	ldr	r3, [pc, #204]	@ (8001d4c <ConstructData+0x134>)
 8001c7e:	1dfa      	adds	r2, r7, #7
 8001c80:	7812      	ldrb	r2, [r2, #0]
 8001c82:	701a      	strb	r2, [r3, #0]

	switch (DecOfFirst3){
 8001c84:	4b30      	ldr	r3, [pc, #192]	@ (8001d48 <ConstructData+0x130>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b06      	cmp	r3, #6
 8001c8a:	d852      	bhi.n	8001d32 <ConstructData+0x11a>
 8001c8c:	009a      	lsls	r2, r3, #2
 8001c8e:	4b30      	ldr	r3, [pc, #192]	@ (8001d50 <ConstructData+0x138>)
 8001c90:	18d3      	adds	r3, r2, r3
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	469f      	mov	pc, r3
		case 0:
			b*=100; // XXXX00
 8001c96:	4b2a      	ldr	r3, [pc, #168]	@ (8001d40 <ConstructData+0x128>)
 8001c98:	6818      	ldr	r0, [r3, #0]
 8001c9a:	6859      	ldr	r1, [r3, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	4b2d      	ldr	r3, [pc, #180]	@ (8001d54 <ConstructData+0x13c>)
 8001ca0:	f7fe fabc 	bl	800021c <__aeabi_dmul>
 8001ca4:	0002      	movs	r2, r0
 8001ca6:	000b      	movs	r3, r1
 8001ca8:	4925      	ldr	r1, [pc, #148]	@ (8001d40 <ConstructData+0x128>)
 8001caa:	600a      	str	r2, [r1, #0]
 8001cac:	604b      	str	r3, [r1, #4]

		case 1:
			b*=10; // XXXXX0
 8001cae:	4b24      	ldr	r3, [pc, #144]	@ (8001d40 <ConstructData+0x128>)
 8001cb0:	6818      	ldr	r0, [r3, #0]
 8001cb2:	6859      	ldr	r1, [r3, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	4b28      	ldr	r3, [pc, #160]	@ (8001d58 <ConstructData+0x140>)
 8001cb8:	f7fe fab0 	bl	800021c <__aeabi_dmul>
 8001cbc:	0002      	movs	r2, r0
 8001cbe:	000b      	movs	r3, r1
 8001cc0:	491f      	ldr	r1, [pc, #124]	@ (8001d40 <ConstructData+0x128>)
 8001cc2:	600a      	str	r2, [r1, #0]
 8001cc4:	604b      	str	r3, [r1, #4]

		case 2:
			b*=1; // XXXXXX
 8001cc6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d40 <ConstructData+0x128>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	491c      	ldr	r1, [pc, #112]	@ (8001d40 <ConstructData+0x128>)
 8001cce:	600a      	str	r2, [r1, #0]
 8001cd0:	604b      	str	r3, [r1, #4]

		case 3:
			b*=0.1; // XXXXX.X
 8001cd2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d40 <ConstructData+0x128>)
 8001cd4:	6818      	ldr	r0, [r3, #0]
 8001cd6:	6859      	ldr	r1, [r3, #4]
 8001cd8:	4a20      	ldr	r2, [pc, #128]	@ (8001d5c <ConstructData+0x144>)
 8001cda:	4b21      	ldr	r3, [pc, #132]	@ (8001d60 <ConstructData+0x148>)
 8001cdc:	f7fe fa9e 	bl	800021c <__aeabi_dmul>
 8001ce0:	0002      	movs	r2, r0
 8001ce2:	000b      	movs	r3, r1
 8001ce4:	4916      	ldr	r1, [pc, #88]	@ (8001d40 <ConstructData+0x128>)
 8001ce6:	600a      	str	r2, [r1, #0]
 8001ce8:	604b      	str	r3, [r1, #4]

		case 4:
			b*=0.01; // XXXX.XX
 8001cea:	4b15      	ldr	r3, [pc, #84]	@ (8001d40 <ConstructData+0x128>)
 8001cec:	6818      	ldr	r0, [r3, #0]
 8001cee:	6859      	ldr	r1, [r3, #4]
 8001cf0:	4a1c      	ldr	r2, [pc, #112]	@ (8001d64 <ConstructData+0x14c>)
 8001cf2:	4b1d      	ldr	r3, [pc, #116]	@ (8001d68 <ConstructData+0x150>)
 8001cf4:	f7fe fa92 	bl	800021c <__aeabi_dmul>
 8001cf8:	0002      	movs	r2, r0
 8001cfa:	000b      	movs	r3, r1
 8001cfc:	4910      	ldr	r1, [pc, #64]	@ (8001d40 <ConstructData+0x128>)
 8001cfe:	600a      	str	r2, [r1, #0]
 8001d00:	604b      	str	r3, [r1, #4]

		case 5:
			b*=0.001; // XXX.XXX
 8001d02:	4b0f      	ldr	r3, [pc, #60]	@ (8001d40 <ConstructData+0x128>)
 8001d04:	6818      	ldr	r0, [r3, #0]
 8001d06:	6859      	ldr	r1, [r3, #4]
 8001d08:	4a18      	ldr	r2, [pc, #96]	@ (8001d6c <ConstructData+0x154>)
 8001d0a:	4b19      	ldr	r3, [pc, #100]	@ (8001d70 <ConstructData+0x158>)
 8001d0c:	f7fe fa86 	bl	800021c <__aeabi_dmul>
 8001d10:	0002      	movs	r2, r0
 8001d12:	000b      	movs	r3, r1
 8001d14:	490a      	ldr	r1, [pc, #40]	@ (8001d40 <ConstructData+0x128>)
 8001d16:	600a      	str	r2, [r1, #0]
 8001d18:	604b      	str	r3, [r1, #4]
		case 6:
			b*=0.0001; // XX.XXXX
 8001d1a:	4b09      	ldr	r3, [pc, #36]	@ (8001d40 <ConstructData+0x128>)
 8001d1c:	6818      	ldr	r0, [r3, #0]
 8001d1e:	6859      	ldr	r1, [r3, #4]
 8001d20:	4a14      	ldr	r2, [pc, #80]	@ (8001d74 <ConstructData+0x15c>)
 8001d22:	4b15      	ldr	r3, [pc, #84]	@ (8001d78 <ConstructData+0x160>)
 8001d24:	f7fe fa7a 	bl	800021c <__aeabi_dmul>
 8001d28:	0002      	movs	r2, r0
 8001d2a:	000b      	movs	r3, r1
 8001d2c:	4904      	ldr	r1, [pc, #16]	@ (8001d40 <ConstructData+0x128>)
 8001d2e:	600a      	str	r2, [r1, #0]
 8001d30:	604b      	str	r3, [r1, #4]
//		b*=1;
//	}
//	else{ // Weight Negative
//		b=-b;
//	}
}
 8001d32:	46c0      	nop			@ (mov r8, r8)
 8001d34:	46bd      	mov	sp, r7
 8001d36:	b002      	add	sp, #8
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	46c0      	nop			@ (mov r8, r8)
 8001d3c:	20000170 	.word	0x20000170
 8001d40:	200001b0 	.word	0x200001b0
 8001d44:	20000174 	.word	0x20000174
 8001d48:	200001ac 	.word	0x200001ac
 8001d4c:	200001ad 	.word	0x200001ad
 8001d50:	0800286c 	.word	0x0800286c
 8001d54:	40590000 	.word	0x40590000
 8001d58:	40240000 	.word	0x40240000
 8001d5c:	9999999a 	.word	0x9999999a
 8001d60:	3fb99999 	.word	0x3fb99999
 8001d64:	47ae147b 	.word	0x47ae147b
 8001d68:	3f847ae1 	.word	0x3f847ae1
 8001d6c:	d2f1a9fc 	.word	0xd2f1a9fc
 8001d70:	3f50624d 	.word	0x3f50624d
 8001d74:	eb1c432d 	.word	0xeb1c432d
 8001d78:	3f1a36e2 	.word	0x3f1a36e2

08001d7c <LL_DMA_IsActiveFlag_TC2>:
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF2) == (DMA_ISR_TCIF2)) ? 1UL : 0UL);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2220      	movs	r2, #32
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	2b20      	cmp	r3, #32
 8001d8e:	d101      	bne.n	8001d94 <LL_DMA_IsActiveFlag_TC2+0x18>
 8001d90:	2301      	movs	r3, #1
 8001d92:	e000      	b.n	8001d96 <LL_DMA_IsActiveFlag_TC2+0x1a>
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	0018      	movs	r0, r3
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	b002      	add	sp, #8
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <LL_DMA_IsActiveFlag_TE2>:
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF2) == (DMA_ISR_TEIF2)) ? 1UL : 0UL);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2280      	movs	r2, #128	@ 0x80
 8001dac:	4013      	ands	r3, r2
 8001dae:	2b80      	cmp	r3, #128	@ 0x80
 8001db0:	d101      	bne.n	8001db6 <LL_DMA_IsActiveFlag_TE2+0x18>
 8001db2:	2301      	movs	r3, #1
 8001db4:	e000      	b.n	8001db8 <LL_DMA_IsActiveFlag_TE2+0x1a>
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	0018      	movs	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	b002      	add	sp, #8
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <LL_DMA_ClearFlag_TC2>:
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF2);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2220      	movs	r2, #32
 8001dcc:	605a      	str	r2, [r3, #4]
}
 8001dce:	46c0      	nop			@ (mov r8, r8)
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	b002      	add	sp, #8
 8001dd4:	bd80      	pop	{r7, pc}
	...

08001dd8 <LL_EXTI_IsActiveFallingFlag_0_31>:
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->FPR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8001de0:	4b06      	ldr	r3, [pc, #24]	@ (8001dfc <LL_EXTI_IsActiveFallingFlag_0_31+0x24>)
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	4013      	ands	r3, r2
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d101      	bne.n	8001df2 <LL_EXTI_IsActiveFallingFlag_0_31+0x1a>
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <LL_EXTI_IsActiveFallingFlag_0_31+0x1c>
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	0018      	movs	r0, r3
 8001df6:	46bd      	mov	sp, r7
 8001df8:	b002      	add	sp, #8
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40021800 	.word	0x40021800

08001e00 <LL_EXTI_ClearFallingFlag_0_31>:
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 8001e08:	4b03      	ldr	r3, [pc, #12]	@ (8001e18 <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	611a      	str	r2, [r3, #16]
}
 8001e0e:	46c0      	nop			@ (mov r8, r8)
 8001e10:	46bd      	mov	sp, r7
 8001e12:	b002      	add	sp, #8
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	46c0      	nop			@ (mov r8, r8)
 8001e18:	40021800 	.word	0x40021800

08001e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e20:	46c0      	nop			@ (mov r8, r8)
 8001e22:	e7fd      	b.n	8001e20 <NMI_Handler+0x4>

08001e24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e28:	46c0      	nop			@ (mov r8, r8)
 8001e2a:	e7fd      	b.n	8001e28 <HardFault_Handler+0x4>

08001e2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001e30:	46c0      	nop			@ (mov r8, r8)
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e3a:	46c0      	nop			@ (mov r8, r8)
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e44:	46c0      	nop			@ (mov r8, r8)
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e4e:	46c0      	nop			@ (mov r8, r8)
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */
	if (LL_DMA_IsActiveFlag_TC2(DMA1))
 8001e58:	4b0b      	ldr	r3, [pc, #44]	@ (8001e88 <DMA1_Channel2_3_IRQHandler+0x34>)
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	f7ff ff8e 	bl	8001d7c <LL_DMA_IsActiveFlag_TC2>
 8001e60:	1e03      	subs	r3, r0, #0
 8001e62:	d006      	beq.n	8001e72 <DMA1_Channel2_3_IRQHandler+0x1e>
  {
    LL_DMA_ClearFlag_TC2(DMA1);
 8001e64:	4b08      	ldr	r3, [pc, #32]	@ (8001e88 <DMA1_Channel2_3_IRQHandler+0x34>)
 8001e66:	0018      	movs	r0, r3
 8001e68:	f7ff ffaa 	bl	8001dc0 <LL_DMA_ClearFlag_TC2>
    /* Call function Reception complete Callback */
    DMA1_ReceiveComplete_Callback();
 8001e6c:	f7ff fd82 	bl	8001974 <DMA1_ReceiveComplete_Callback>
  /* USER CODE END DMA1_Channel2_3_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001e70:	e007      	b.n	8001e82 <DMA1_Channel2_3_IRQHandler+0x2e>
  else if (LL_DMA_IsActiveFlag_TE2(DMA1))
 8001e72:	4b05      	ldr	r3, [pc, #20]	@ (8001e88 <DMA1_Channel2_3_IRQHandler+0x34>)
 8001e74:	0018      	movs	r0, r3
 8001e76:	f7ff ff92 	bl	8001d9e <LL_DMA_IsActiveFlag_TE2>
 8001e7a:	1e03      	subs	r3, r0, #0
 8001e7c:	d001      	beq.n	8001e82 <DMA1_Channel2_3_IRQHandler+0x2e>
    USART_TransferError_Callback();
 8001e7e:	f7ff fd97 	bl	80019b0 <USART_TransferError_Callback>
}
 8001e82:	46c0      	nop			@ (mov r8, r8)
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40020000 	.word	0x40020000

08001e8c <EXTI4_15_IRQHandler>:
//  /* USER CODE END USART2_IRQn 1 */
//}

/* USER CODE BEGIN 1 */
void USER_BUTTON_IRQHANDLER(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* Manage Flags */
  if (LL_EXTI_IsActiveFallingFlag_0_31(USER_BUTTON_EXTI_LINE) != RESET)
 8001e90:	2380      	movs	r3, #128	@ 0x80
 8001e92:	019b      	lsls	r3, r3, #6
 8001e94:	0018      	movs	r0, r3
 8001e96:	f7ff ff9f 	bl	8001dd8 <LL_EXTI_IsActiveFallingFlag_0_31>
 8001e9a:	1e03      	subs	r3, r0, #0
 8001e9c:	d006      	beq.n	8001eac <EXTI4_15_IRQHandler+0x20>
  {
    LL_EXTI_ClearFallingFlag_0_31(USER_BUTTON_EXTI_LINE);
 8001e9e:	2380      	movs	r3, #128	@ 0x80
 8001ea0:	019b      	lsls	r3, r3, #6
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	f7ff ffac 	bl	8001e00 <LL_EXTI_ClearFallingFlag_0_31>

    /* Handle User push-button press in dedicated function */
    UserButton_Callback();
 8001ea8:	f7ff fd6e 	bl	8001988 <UserButton_Callback>
  }
}
 8001eac:	46c0      	nop			@ (mov r8, r8)
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eb6:	46c0      	nop			@ (mov r8, r8)
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ebc:	480d      	ldr	r0, [pc, #52]	@ (8001ef4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ebe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ec0:	f7ff fff7 	bl	8001eb2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ec4:	480c      	ldr	r0, [pc, #48]	@ (8001ef8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ec6:	490d      	ldr	r1, [pc, #52]	@ (8001efc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ec8:	4a0d      	ldr	r2, [pc, #52]	@ (8001f00 <LoopForever+0xe>)
  movs r3, #0
 8001eca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ecc:	e002      	b.n	8001ed4 <LoopCopyDataInit>

08001ece <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ece:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ed0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ed2:	3304      	adds	r3, #4

08001ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ed4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ed6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ed8:	d3f9      	bcc.n	8001ece <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eda:	4a0a      	ldr	r2, [pc, #40]	@ (8001f04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001edc:	4c0a      	ldr	r4, [pc, #40]	@ (8001f08 <LoopForever+0x16>)
  movs r3, #0
 8001ede:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ee0:	e001      	b.n	8001ee6 <LoopFillZerobss>

08001ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ee2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ee4:	3204      	adds	r2, #4

08001ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ee6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ee8:	d3fb      	bcc.n	8001ee2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001eea:	f000 fc8b 	bl	8002804 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001eee:	f7ff faa5 	bl	800143c <main>

08001ef2 <LoopForever>:

LoopForever:
  b LoopForever
 8001ef2:	e7fe      	b.n	8001ef2 <LoopForever>
  ldr   r0, =_estack
 8001ef4:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001ef8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001efc:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8001f00:	08002920 	.word	0x08002920
  ldr r2, =_sbss
 8001f04:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8001f08:	200001b8 	.word	0x200001b8

08001f0c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f0c:	e7fe      	b.n	8001f0c <ADC1_COMP_IRQHandler>

08001f0e <LL_GPIO_SetPinMode>:
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b084      	sub	sp, #16
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	60f8      	str	r0, [r7, #12]
 8001f16:	60b9      	str	r1, [r7, #8]
 8001f18:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6819      	ldr	r1, [r3, #0]
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	435b      	muls	r3, r3
 8001f22:	001a      	movs	r2, r3
 8001f24:	0013      	movs	r3, r2
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	189b      	adds	r3, r3, r2
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	400b      	ands	r3, r1
 8001f2e:	001a      	movs	r2, r3
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	435b      	muls	r3, r3
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	434b      	muls	r3, r1
 8001f38:	431a      	orrs	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	601a      	str	r2, [r3, #0]
}
 8001f3e:	46c0      	nop			@ (mov r8, r8)
 8001f40:	46bd      	mov	sp, r7
 8001f42:	b004      	add	sp, #16
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <LL_GPIO_SetPinOutputType>:
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b084      	sub	sp, #16
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	60f8      	str	r0, [r7, #12]
 8001f4e:	60b9      	str	r1, [r7, #8]
 8001f50:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	43d2      	mvns	r2, r2
 8001f5a:	401a      	ands	r2, r3
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	434b      	muls	r3, r1
 8001f62:	431a      	orrs	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	605a      	str	r2, [r3, #4]
}
 8001f68:	46c0      	nop			@ (mov r8, r8)
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	b004      	add	sp, #16
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <LL_GPIO_SetPinSpeed>:
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6899      	ldr	r1, [r3, #8]
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	435b      	muls	r3, r3
 8001f84:	001a      	movs	r2, r3
 8001f86:	0013      	movs	r3, r2
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	189b      	adds	r3, r3, r2
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	400b      	ands	r3, r1
 8001f90:	001a      	movs	r2, r3
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	435b      	muls	r3, r3
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	434b      	muls	r3, r1
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	609a      	str	r2, [r3, #8]
}
 8001fa0:	46c0      	nop			@ (mov r8, r8)
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	b004      	add	sp, #16
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <LL_GPIO_SetPinPull>:
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	68d9      	ldr	r1, [r3, #12]
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	435b      	muls	r3, r3
 8001fbc:	001a      	movs	r2, r3
 8001fbe:	0013      	movs	r3, r2
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	189b      	adds	r3, r3, r2
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	400b      	ands	r3, r1
 8001fc8:	001a      	movs	r2, r3
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	435b      	muls	r3, r3
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	434b      	muls	r3, r1
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	60da      	str	r2, [r3, #12]
}
 8001fd8:	46c0      	nop			@ (mov r8, r8)
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	b004      	add	sp, #16
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <LL_GPIO_SetAFPin_0_7>:
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6a19      	ldr	r1, [r3, #32]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	435b      	muls	r3, r3
 8001ff4:	68ba      	ldr	r2, [r7, #8]
 8001ff6:	4353      	muls	r3, r2
 8001ff8:	68ba      	ldr	r2, [r7, #8]
 8001ffa:	435a      	muls	r2, r3
 8001ffc:	0013      	movs	r3, r2
 8001ffe:	011b      	lsls	r3, r3, #4
 8002000:	1a9b      	subs	r3, r3, r2
 8002002:	43db      	mvns	r3, r3
 8002004:	400b      	ands	r3, r1
 8002006:	001a      	movs	r2, r3
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	435b      	muls	r3, r3
 800200c:	68b9      	ldr	r1, [r7, #8]
 800200e:	434b      	muls	r3, r1
 8002010:	68b9      	ldr	r1, [r7, #8]
 8002012:	434b      	muls	r3, r1
 8002014:	6879      	ldr	r1, [r7, #4]
 8002016:	434b      	muls	r3, r1
 8002018:	431a      	orrs	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	621a      	str	r2, [r3, #32]
}
 800201e:	46c0      	nop			@ (mov r8, r8)
 8002020:	46bd      	mov	sp, r7
 8002022:	b004      	add	sp, #16
 8002024:	bd80      	pop	{r7, pc}

08002026 <LL_GPIO_SetAFPin_8_15>:
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b084      	sub	sp, #16
 800202a:	af00      	add	r7, sp, #0
 800202c:	60f8      	str	r0, [r7, #12]
 800202e:	60b9      	str	r1, [r7, #8]
 8002030:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	0a1b      	lsrs	r3, r3, #8
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	0a12      	lsrs	r2, r2, #8
 800203e:	4353      	muls	r3, r2
 8002040:	68ba      	ldr	r2, [r7, #8]
 8002042:	0a12      	lsrs	r2, r2, #8
 8002044:	4353      	muls	r3, r2
 8002046:	68ba      	ldr	r2, [r7, #8]
 8002048:	0a12      	lsrs	r2, r2, #8
 800204a:	435a      	muls	r2, r3
 800204c:	0013      	movs	r3, r2
 800204e:	011b      	lsls	r3, r3, #4
 8002050:	1a9b      	subs	r3, r3, r2
 8002052:	43db      	mvns	r3, r3
 8002054:	400b      	ands	r3, r1
 8002056:	001a      	movs	r2, r3
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	0a1b      	lsrs	r3, r3, #8
 800205c:	68b9      	ldr	r1, [r7, #8]
 800205e:	0a09      	lsrs	r1, r1, #8
 8002060:	434b      	muls	r3, r1
 8002062:	68b9      	ldr	r1, [r7, #8]
 8002064:	0a09      	lsrs	r1, r1, #8
 8002066:	434b      	muls	r3, r1
 8002068:	68b9      	ldr	r1, [r7, #8]
 800206a:	0a09      	lsrs	r1, r1, #8
 800206c:	434b      	muls	r3, r1
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	434b      	muls	r3, r1
 8002072:	431a      	orrs	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002078:	46c0      	nop			@ (mov r8, r8)
 800207a:	46bd      	mov	sp, r7
 800207c:	b004      	add	sp, #16
 800207e:	bd80      	pop	{r7, pc}

08002080 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800208a:	2300      	movs	r3, #0
 800208c:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800208e:	e047      	b.n	8002120 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2101      	movs	r1, #1
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	4091      	lsls	r1, r2
 800209a:	000a      	movs	r2, r1
 800209c:	4013      	ands	r3, r2
 800209e:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d039      	beq.n	800211a <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d003      	beq.n	80020b6 <LL_GPIO_Init+0x36>
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d10d      	bne.n	80020d2 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	689a      	ldr	r2, [r3, #8]
 80020ba:	68b9      	ldr	r1, [r7, #8]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	0018      	movs	r0, r3
 80020c0:	f7ff ff56 	bl	8001f70 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	68da      	ldr	r2, [r3, #12]
 80020c8:	68b9      	ldr	r1, [r7, #8]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	0018      	movs	r0, r3
 80020ce:	f7ff ff3a 	bl	8001f46 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	691a      	ldr	r2, [r3, #16]
 80020d6:	68b9      	ldr	r1, [r7, #8]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	0018      	movs	r0, r3
 80020dc:	f7ff ff64 	bl	8001fa8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d111      	bne.n	800210c <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	2bff      	cmp	r3, #255	@ 0xff
 80020ec:	d807      	bhi.n	80020fe <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	695a      	ldr	r2, [r3, #20]
 80020f2:	68b9      	ldr	r1, [r7, #8]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	0018      	movs	r0, r3
 80020f8:	f7ff ff72 	bl	8001fe0 <LL_GPIO_SetAFPin_0_7>
 80020fc:	e006      	b.n	800210c <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	695a      	ldr	r2, [r3, #20]
 8002102:	68b9      	ldr	r1, [r7, #8]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	0018      	movs	r0, r3
 8002108:	f7ff ff8d 	bl	8002026 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	68b9      	ldr	r1, [r7, #8]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	0018      	movs	r0, r3
 8002116:	f7ff fefa 	bl	8001f0e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	3301      	adds	r3, #1
 800211e:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	40da      	lsrs	r2, r3
 8002128:	1e13      	subs	r3, r2, #0
 800212a:	d1b1      	bne.n	8002090 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800212c:	2300      	movs	r3, #0
}
 800212e:	0018      	movs	r0, r3
 8002130:	46bd      	mov	sp, r7
 8002132:	b004      	add	sp, #16
 8002134:	bd80      	pop	{r7, pc}
	...

08002138 <LL_RCC_HSI_IsReady>:
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800213c:	4b07      	ldr	r3, [pc, #28]	@ (800215c <LL_RCC_HSI_IsReady+0x24>)
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	2380      	movs	r3, #128	@ 0x80
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	401a      	ands	r2, r3
 8002146:	2380      	movs	r3, #128	@ 0x80
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	429a      	cmp	r2, r3
 800214c:	d101      	bne.n	8002152 <LL_RCC_HSI_IsReady+0x1a>
 800214e:	2301      	movs	r3, #1
 8002150:	e000      	b.n	8002154 <LL_RCC_HSI_IsReady+0x1c>
 8002152:	2300      	movs	r3, #0
}
 8002154:	0018      	movs	r0, r3
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	46c0      	nop			@ (mov r8, r8)
 800215c:	40021000 	.word	0x40021000

08002160 <LL_RCC_LSE_IsReady>:
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002164:	4b05      	ldr	r3, [pc, #20]	@ (800217c <LL_RCC_LSE_IsReady+0x1c>)
 8002166:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002168:	2202      	movs	r2, #2
 800216a:	4013      	ands	r3, r2
 800216c:	2b02      	cmp	r3, #2
 800216e:	d101      	bne.n	8002174 <LL_RCC_LSE_IsReady+0x14>
 8002170:	2301      	movs	r3, #1
 8002172:	e000      	b.n	8002176 <LL_RCC_LSE_IsReady+0x16>
 8002174:	2300      	movs	r3, #0
}
 8002176:	0018      	movs	r0, r3
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40021000 	.word	0x40021000

08002180 <LL_RCC_GetSysClkSource>:
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002184:	4b03      	ldr	r3, [pc, #12]	@ (8002194 <LL_RCC_GetSysClkSource+0x14>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	2238      	movs	r2, #56	@ 0x38
 800218a:	4013      	ands	r3, r2
}
 800218c:	0018      	movs	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	46c0      	nop			@ (mov r8, r8)
 8002194:	40021000 	.word	0x40021000

08002198 <LL_RCC_GetAHBPrescaler>:
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800219c:	4b03      	ldr	r3, [pc, #12]	@ (80021ac <LL_RCC_GetAHBPrescaler+0x14>)
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	23f0      	movs	r3, #240	@ 0xf0
 80021a2:	011b      	lsls	r3, r3, #4
 80021a4:	4013      	ands	r3, r2
}
 80021a6:	0018      	movs	r0, r3
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40021000 	.word	0x40021000

080021b0 <LL_RCC_GetAPB1Prescaler>:
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80021b4:	4b03      	ldr	r3, [pc, #12]	@ (80021c4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	23e0      	movs	r3, #224	@ 0xe0
 80021ba:	01db      	lsls	r3, r3, #7
 80021bc:	4013      	ands	r3, r2
}
 80021be:	0018      	movs	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40021000 	.word	0x40021000

080021c8 <LL_RCC_GetUSARTClockSource>:
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80021d0:	4b05      	ldr	r3, [pc, #20]	@ (80021e8 <LL_RCC_GetUSARTClockSource+0x20>)
 80021d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	401a      	ands	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	041b      	lsls	r3, r3, #16
 80021dc:	4313      	orrs	r3, r2
}
 80021de:	0018      	movs	r0, r3
 80021e0:	46bd      	mov	sp, r7
 80021e2:	b002      	add	sp, #8
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	46c0      	nop			@ (mov r8, r8)
 80021e8:	40021000 	.word	0x40021000

080021ec <LL_RCC_PLL_GetN>:
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80021f0:	4b03      	ldr	r3, [pc, #12]	@ (8002200 <LL_RCC_PLL_GetN+0x14>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	0a1b      	lsrs	r3, r3, #8
 80021f6:	227f      	movs	r2, #127	@ 0x7f
 80021f8:	4013      	ands	r3, r2
}
 80021fa:	0018      	movs	r0, r3
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40021000 	.word	0x40021000

08002204 <LL_RCC_PLL_GetR>:
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002208:	4b03      	ldr	r3, [pc, #12]	@ (8002218 <LL_RCC_PLL_GetR+0x14>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	0f5b      	lsrs	r3, r3, #29
 800220e:	075b      	lsls	r3, r3, #29
}
 8002210:	0018      	movs	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	46c0      	nop			@ (mov r8, r8)
 8002218:	40021000 	.word	0x40021000

0800221c <LL_RCC_PLL_GetMainSource>:
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002220:	4b03      	ldr	r3, [pc, #12]	@ (8002230 <LL_RCC_PLL_GetMainSource+0x14>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	2203      	movs	r2, #3
 8002226:	4013      	ands	r3, r2
}
 8002228:	0018      	movs	r0, r3
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	46c0      	nop			@ (mov r8, r8)
 8002230:	40021000 	.word	0x40021000

08002234 <LL_RCC_PLL_GetDivider>:
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002238:	4b03      	ldr	r3, [pc, #12]	@ (8002248 <LL_RCC_PLL_GetDivider+0x14>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	2270      	movs	r2, #112	@ 0x70
 800223e:	4013      	ands	r3, r2
}
 8002240:	0018      	movs	r0, r3
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	46c0      	nop			@ (mov r8, r8)
 8002248:	40021000 	.word	0x40021000

0800224c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002254:	f000 f8a8 	bl	80023a8 <RCC_GetSystemClockFreq>
 8002258:	0002      	movs	r2, r0
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	0018      	movs	r0, r3
 8002264:	f000 f8ce 	bl	8002404 <RCC_GetHCLKClockFreq>
 8002268:	0002      	movs	r2, r0
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	0018      	movs	r0, r3
 8002274:	f000 f8de 	bl	8002434 <RCC_GetPCLK1ClockFreq>
 8002278:	0002      	movs	r2, r0
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	609a      	str	r2, [r3, #8]
}
 800227e:	46c0      	nop			@ (mov r8, r8)
 8002280:	46bd      	mov	sp, r7
 8002282:	b002      	add	sp, #8
 8002284:	bd80      	pop	{r7, pc}
	...

08002288 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002290:	2300      	movs	r3, #0
 8002292:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b03      	cmp	r3, #3
 8002298:	d134      	bne.n	8002304 <LL_RCC_GetUSARTClockFreq+0x7c>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	0018      	movs	r0, r3
 800229e:	f7ff ff93 	bl	80021c8 <LL_RCC_GetUSARTClockSource>
 80022a2:	0003      	movs	r3, r0
 80022a4:	4a39      	ldr	r2, [pc, #228]	@ (800238c <LL_RCC_GetUSARTClockFreq+0x104>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d016      	beq.n	80022d8 <LL_RCC_GetUSARTClockFreq+0x50>
 80022aa:	4a38      	ldr	r2, [pc, #224]	@ (800238c <LL_RCC_GetUSARTClockFreq+0x104>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d81c      	bhi.n	80022ea <LL_RCC_GetUSARTClockFreq+0x62>
 80022b0:	4a37      	ldr	r2, [pc, #220]	@ (8002390 <LL_RCC_GetUSARTClockFreq+0x108>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d003      	beq.n	80022be <LL_RCC_GetUSARTClockFreq+0x36>
 80022b6:	4a37      	ldr	r2, [pc, #220]	@ (8002394 <LL_RCC_GetUSARTClockFreq+0x10c>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d005      	beq.n	80022c8 <LL_RCC_GetUSARTClockFreq+0x40>
 80022bc:	e015      	b.n	80022ea <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80022be:	f000 f873 	bl	80023a8 <RCC_GetSystemClockFreq>
 80022c2:	0003      	movs	r3, r0
 80022c4:	60fb      	str	r3, [r7, #12]
        break;
 80022c6:	e05c      	b.n	8002382 <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 80022c8:	f7ff ff36 	bl	8002138 <LL_RCC_HSI_IsReady>
 80022cc:	0003      	movs	r3, r0
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d150      	bne.n	8002374 <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = HSI_VALUE;
 80022d2:	4b31      	ldr	r3, [pc, #196]	@ (8002398 <LL_RCC_GetUSARTClockFreq+0x110>)
 80022d4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80022d6:	e04d      	b.n	8002374 <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 80022d8:	f7ff ff42 	bl	8002160 <LL_RCC_LSE_IsReady>
 80022dc:	0003      	movs	r3, r0
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d14a      	bne.n	8002378 <LL_RCC_GetUSARTClockFreq+0xf0>
        {
          usart_frequency = LSE_VALUE;
 80022e2:	2380      	movs	r3, #128	@ 0x80
 80022e4:	021b      	lsls	r3, r3, #8
 80022e6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80022e8:	e046      	b.n	8002378 <LL_RCC_GetUSARTClockFreq+0xf0>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80022ea:	f000 f85d 	bl	80023a8 <RCC_GetSystemClockFreq>
 80022ee:	0003      	movs	r3, r0
 80022f0:	0018      	movs	r0, r3
 80022f2:	f000 f887 	bl	8002404 <RCC_GetHCLKClockFreq>
 80022f6:	0003      	movs	r3, r0
 80022f8:	0018      	movs	r0, r3
 80022fa:	f000 f89b 	bl	8002434 <RCC_GetPCLK1ClockFreq>
 80022fe:	0003      	movs	r3, r0
 8002300:	60fb      	str	r3, [r7, #12]
        break;
 8002302:	e03e      	b.n	8002382 <LL_RCC_GetUSARTClockFreq+0xfa>
    }
  }
#if defined(RCC_CCIPR_USART2SEL)
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b0c      	cmp	r3, #12
 8002308:	d13b      	bne.n	8002382 <LL_RCC_GetUSARTClockFreq+0xfa>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	0018      	movs	r0, r3
 800230e:	f7ff ff5b 	bl	80021c8 <LL_RCC_GetUSARTClockSource>
 8002312:	0003      	movs	r3, r0
 8002314:	4a21      	ldr	r2, [pc, #132]	@ (800239c <LL_RCC_GetUSARTClockFreq+0x114>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d016      	beq.n	8002348 <LL_RCC_GetUSARTClockFreq+0xc0>
 800231a:	4a20      	ldr	r2, [pc, #128]	@ (800239c <LL_RCC_GetUSARTClockFreq+0x114>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d81c      	bhi.n	800235a <LL_RCC_GetUSARTClockFreq+0xd2>
 8002320:	4a1f      	ldr	r2, [pc, #124]	@ (80023a0 <LL_RCC_GetUSARTClockFreq+0x118>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d003      	beq.n	800232e <LL_RCC_GetUSARTClockFreq+0xa6>
 8002326:	4a1f      	ldr	r2, [pc, #124]	@ (80023a4 <LL_RCC_GetUSARTClockFreq+0x11c>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d005      	beq.n	8002338 <LL_RCC_GetUSARTClockFreq+0xb0>
 800232c:	e015      	b.n	800235a <LL_RCC_GetUSARTClockFreq+0xd2>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800232e:	f000 f83b 	bl	80023a8 <RCC_GetSystemClockFreq>
 8002332:	0003      	movs	r3, r0
 8002334:	60fb      	str	r3, [r7, #12]
        break;
 8002336:	e024      	b.n	8002382 <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 8002338:	f7ff fefe 	bl	8002138 <LL_RCC_HSI_IsReady>
 800233c:	0003      	movs	r3, r0
 800233e:	2b01      	cmp	r3, #1
 8002340:	d11c      	bne.n	800237c <LL_RCC_GetUSARTClockFreq+0xf4>
        {
          usart_frequency = HSI_VALUE;
 8002342:	4b15      	ldr	r3, [pc, #84]	@ (8002398 <LL_RCC_GetUSARTClockFreq+0x110>)
 8002344:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002346:	e019      	b.n	800237c <LL_RCC_GetUSARTClockFreq+0xf4>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 8002348:	f7ff ff0a 	bl	8002160 <LL_RCC_LSE_IsReady>
 800234c:	0003      	movs	r3, r0
 800234e:	2b01      	cmp	r3, #1
 8002350:	d116      	bne.n	8002380 <LL_RCC_GetUSARTClockFreq+0xf8>
        {
          usart_frequency = LSE_VALUE;
 8002352:	2380      	movs	r3, #128	@ 0x80
 8002354:	021b      	lsls	r3, r3, #8
 8002356:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002358:	e012      	b.n	8002380 <LL_RCC_GetUSARTClockFreq+0xf8>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800235a:	f000 f825 	bl	80023a8 <RCC_GetSystemClockFreq>
 800235e:	0003      	movs	r3, r0
 8002360:	0018      	movs	r0, r3
 8002362:	f000 f84f 	bl	8002404 <RCC_GetHCLKClockFreq>
 8002366:	0003      	movs	r3, r0
 8002368:	0018      	movs	r0, r3
 800236a:	f000 f863 	bl	8002434 <RCC_GetPCLK1ClockFreq>
 800236e:	0003      	movs	r3, r0
 8002370:	60fb      	str	r3, [r7, #12]
        break;
 8002372:	e006      	b.n	8002382 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 8002374:	46c0      	nop			@ (mov r8, r8)
 8002376:	e004      	b.n	8002382 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 8002378:	46c0      	nop			@ (mov r8, r8)
 800237a:	e002      	b.n	8002382 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800237c:	46c0      	nop			@ (mov r8, r8)
 800237e:	e000      	b.n	8002382 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 8002380:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 8002382:	68fb      	ldr	r3, [r7, #12]
}
 8002384:	0018      	movs	r0, r3
 8002386:	46bd      	mov	sp, r7
 8002388:	b004      	add	sp, #16
 800238a:	bd80      	pop	{r7, pc}
 800238c:	00030003 	.word	0x00030003
 8002390:	00030001 	.word	0x00030001
 8002394:	00030002 	.word	0x00030002
 8002398:	00f42400 	.word	0x00f42400
 800239c:	000c000c 	.word	0x000c000c
 80023a0:	000c0004 	.word	0x000c0004
 80023a4:	000c0008 	.word	0x000c0008

080023a8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80023ae:	f7ff fee7 	bl	8002180 <LL_RCC_GetSysClkSource>
 80023b2:	0003      	movs	r3, r0
 80023b4:	2b08      	cmp	r3, #8
 80023b6:	d002      	beq.n	80023be <RCC_GetSystemClockFreq+0x16>
 80023b8:	2b10      	cmp	r3, #16
 80023ba:	d003      	beq.n	80023c4 <RCC_GetSystemClockFreq+0x1c>
 80023bc:	e007      	b.n	80023ce <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80023be:	4b0e      	ldr	r3, [pc, #56]	@ (80023f8 <RCC_GetSystemClockFreq+0x50>)
 80023c0:	607b      	str	r3, [r7, #4]
      break;
 80023c2:	e014      	b.n	80023ee <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80023c4:	f000 f84c 	bl	8002460 <RCC_PLL_GetFreqDomain_SYS>
 80023c8:	0003      	movs	r3, r0
 80023ca:	607b      	str	r3, [r7, #4]
      break;
 80023cc:	e00f      	b.n	80023ee <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80023ce:	4b0b      	ldr	r3, [pc, #44]	@ (80023fc <RCC_GetSystemClockFreq+0x54>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	0adb      	lsrs	r3, r3, #11
 80023d4:	2207      	movs	r2, #7
 80023d6:	4013      	ands	r3, r2
 80023d8:	2201      	movs	r2, #1
 80023da:	409a      	lsls	r2, r3
 80023dc:	0013      	movs	r3, r2
 80023de:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 80023e0:	6839      	ldr	r1, [r7, #0]
 80023e2:	4807      	ldr	r0, [pc, #28]	@ (8002400 <RCC_GetSystemClockFreq+0x58>)
 80023e4:	f7fd fe8e 	bl	8000104 <__udivsi3>
 80023e8:	0003      	movs	r3, r0
 80023ea:	607b      	str	r3, [r7, #4]
      break;
 80023ec:	46c0      	nop			@ (mov r8, r8)
  }

  return frequency;
 80023ee:	687b      	ldr	r3, [r7, #4]
}
 80023f0:	0018      	movs	r0, r3
 80023f2:	46bd      	mov	sp, r7
 80023f4:	b002      	add	sp, #8
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	007a1200 	.word	0x007a1200
 80023fc:	40021000 	.word	0x40021000
 8002400:	00f42400 	.word	0x00f42400

08002404 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800240c:	f7ff fec4 	bl	8002198 <LL_RCC_GetAHBPrescaler>
 8002410:	0003      	movs	r3, r0
 8002412:	0a1b      	lsrs	r3, r3, #8
 8002414:	220f      	movs	r2, #15
 8002416:	401a      	ands	r2, r3
 8002418:	4b05      	ldr	r3, [pc, #20]	@ (8002430 <RCC_GetHCLKClockFreq+0x2c>)
 800241a:	0092      	lsls	r2, r2, #2
 800241c:	58d3      	ldr	r3, [r2, r3]
 800241e:	221f      	movs	r2, #31
 8002420:	4013      	ands	r3, r2
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	40da      	lsrs	r2, r3
 8002426:	0013      	movs	r3, r2
}
 8002428:	0018      	movs	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	b002      	add	sp, #8
 800242e:	bd80      	pop	{r7, pc}
 8002430:	08002888 	.word	0x08002888

08002434 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800243c:	f7ff feb8 	bl	80021b0 <LL_RCC_GetAPB1Prescaler>
 8002440:	0003      	movs	r3, r0
 8002442:	0b1a      	lsrs	r2, r3, #12
 8002444:	4b05      	ldr	r3, [pc, #20]	@ (800245c <RCC_GetPCLK1ClockFreq+0x28>)
 8002446:	0092      	lsls	r2, r2, #2
 8002448:	58d3      	ldr	r3, [r2, r3]
 800244a:	221f      	movs	r2, #31
 800244c:	4013      	ands	r3, r2
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	40da      	lsrs	r2, r3
 8002452:	0013      	movs	r3, r2
}
 8002454:	0018      	movs	r0, r3
 8002456:	46bd      	mov	sp, r7
 8002458:	b002      	add	sp, #8
 800245a:	bd80      	pop	{r7, pc}
 800245c:	080028c8 	.word	0x080028c8

08002460 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002460:	b590      	push	{r4, r7, lr}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002466:	f7ff fed9 	bl	800221c <LL_RCC_PLL_GetMainSource>
 800246a:	0003      	movs	r3, r0
 800246c:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	2b02      	cmp	r3, #2
 8002472:	d003      	beq.n	800247c <RCC_PLL_GetFreqDomain_SYS+0x1c>
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	2b03      	cmp	r3, #3
 8002478:	d003      	beq.n	8002482 <RCC_PLL_GetFreqDomain_SYS+0x22>
 800247a:	e005      	b.n	8002488 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800247c:	4b13      	ldr	r3, [pc, #76]	@ (80024cc <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800247e:	607b      	str	r3, [r7, #4]
      break;
 8002480:	e005      	b.n	800248e <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002482:	4b13      	ldr	r3, [pc, #76]	@ (80024d0 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 8002484:	607b      	str	r3, [r7, #4]
      break;
 8002486:	e002      	b.n	800248e <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 8002488:	4b10      	ldr	r3, [pc, #64]	@ (80024cc <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800248a:	607b      	str	r3, [r7, #4]
      break;
 800248c:	46c0      	nop			@ (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800248e:	f7ff fead 	bl	80021ec <LL_RCC_PLL_GetN>
 8002492:	0002      	movs	r2, r0
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4353      	muls	r3, r2
 8002498:	001c      	movs	r4, r3
 800249a:	f7ff fecb 	bl	8002234 <LL_RCC_PLL_GetDivider>
 800249e:	0003      	movs	r3, r0
 80024a0:	091b      	lsrs	r3, r3, #4
 80024a2:	3301      	adds	r3, #1
 80024a4:	0019      	movs	r1, r3
 80024a6:	0020      	movs	r0, r4
 80024a8:	f7fd fe2c 	bl	8000104 <__udivsi3>
 80024ac:	0003      	movs	r3, r0
 80024ae:	001c      	movs	r4, r3
 80024b0:	f7ff fea8 	bl	8002204 <LL_RCC_PLL_GetR>
 80024b4:	0003      	movs	r3, r0
 80024b6:	0f5b      	lsrs	r3, r3, #29
 80024b8:	3301      	adds	r3, #1
 80024ba:	0019      	movs	r1, r3
 80024bc:	0020      	movs	r0, r4
 80024be:	f7fd fe21 	bl	8000104 <__udivsi3>
 80024c2:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 80024c4:	0018      	movs	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	b003      	add	sp, #12
 80024ca:	bd90      	pop	{r4, r7, pc}
 80024cc:	00f42400 	.word	0x00f42400
 80024d0:	007a1200 	.word	0x007a1200

080024d4 <LL_USART_IsEnabled>:
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2201      	movs	r2, #1
 80024e2:	4013      	ands	r3, r2
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d101      	bne.n	80024ec <LL_USART_IsEnabled+0x18>
 80024e8:	2301      	movs	r3, #1
 80024ea:	e000      	b.n	80024ee <LL_USART_IsEnabled+0x1a>
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	0018      	movs	r0, r3
 80024f0:	46bd      	mov	sp, r7
 80024f2:	b002      	add	sp, #8
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <LL_USART_SetPrescaler>:
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b082      	sub	sp, #8
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
 80024fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002504:	220f      	movs	r2, #15
 8002506:	4393      	bics	r3, r2
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	b292      	uxth	r2, r2
 800250c:	431a      	orrs	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8002512:	46c0      	nop			@ (mov r8, r8)
 8002514:	46bd      	mov	sp, r7
 8002516:	b002      	add	sp, #8
 8002518:	bd80      	pop	{r7, pc}
	...

0800251c <LL_USART_SetStopBitsLength>:
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	4a05      	ldr	r2, [pc, #20]	@ (8002540 <LL_USART_SetStopBitsLength+0x24>)
 800252c:	401a      	ands	r2, r3
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	431a      	orrs	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	605a      	str	r2, [r3, #4]
}
 8002536:	46c0      	nop			@ (mov r8, r8)
 8002538:	46bd      	mov	sp, r7
 800253a:	b002      	add	sp, #8
 800253c:	bd80      	pop	{r7, pc}
 800253e:	46c0      	nop			@ (mov r8, r8)
 8002540:	ffffcfff 	.word	0xffffcfff

08002544 <LL_USART_SetHWFlowCtrl>:
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	4a05      	ldr	r2, [pc, #20]	@ (8002568 <LL_USART_SetHWFlowCtrl+0x24>)
 8002554:	401a      	ands	r2, r3
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	431a      	orrs	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	609a      	str	r2, [r3, #8]
}
 800255e:	46c0      	nop			@ (mov r8, r8)
 8002560:	46bd      	mov	sp, r7
 8002562:	b002      	add	sp, #8
 8002564:	bd80      	pop	{r7, pc}
 8002566:	46c0      	nop			@ (mov r8, r8)
 8002568:	fffffcff 	.word	0xfffffcff

0800256c <LL_USART_SetBaudRate>:
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
 8002578:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b0b      	cmp	r3, #11
 800257e:	d846      	bhi.n	800260e <LL_USART_SetBaudRate+0xa2>
  else if (BaudRate == 0U)
 8002580:	6a3b      	ldr	r3, [r7, #32]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d043      	beq.n	800260e <LL_USART_SetBaudRate+0xa2>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	2380      	movs	r3, #128	@ 0x80
 800258a:	021b      	lsls	r3, r3, #8
 800258c:	429a      	cmp	r2, r3
 800258e:	d126      	bne.n	80025de <LL_USART_SetBaudRate+0x72>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	b2db      	uxtb	r3, r3
 8002594:	001a      	movs	r2, r3
 8002596:	4b20      	ldr	r3, [pc, #128]	@ (8002618 <LL_USART_SetBaudRate+0xac>)
 8002598:	0092      	lsls	r2, r2, #2
 800259a:	58d3      	ldr	r3, [r2, r3]
 800259c:	0019      	movs	r1, r3
 800259e:	68b8      	ldr	r0, [r7, #8]
 80025a0:	f7fd fdb0 	bl	8000104 <__udivsi3>
 80025a4:	0003      	movs	r3, r0
 80025a6:	005a      	lsls	r2, r3, #1
 80025a8:	6a3b      	ldr	r3, [r7, #32]
 80025aa:	085b      	lsrs	r3, r3, #1
 80025ac:	18d3      	adds	r3, r2, r3
 80025ae:	6a39      	ldr	r1, [r7, #32]
 80025b0:	0018      	movs	r0, r3
 80025b2:	f7fd fda7 	bl	8000104 <__udivsi3>
 80025b6:	0003      	movs	r3, r0
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	4a17      	ldr	r2, [pc, #92]	@ (800261c <LL_USART_SetBaudRate+0xb0>)
 80025c0:	4013      	ands	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	085b      	lsrs	r3, r3, #1
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	001a      	movs	r2, r3
 80025cc:	2307      	movs	r3, #7
 80025ce:	4013      	ands	r3, r2
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	60da      	str	r2, [r3, #12]
}
 80025dc:	e017      	b.n	800260e <LL_USART_SetBaudRate+0xa2>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	001a      	movs	r2, r3
 80025e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002618 <LL_USART_SetBaudRate+0xac>)
 80025e6:	0092      	lsls	r2, r2, #2
 80025e8:	58d3      	ldr	r3, [r2, r3]
 80025ea:	0019      	movs	r1, r3
 80025ec:	68b8      	ldr	r0, [r7, #8]
 80025ee:	f7fd fd89 	bl	8000104 <__udivsi3>
 80025f2:	0003      	movs	r3, r0
 80025f4:	001a      	movs	r2, r3
 80025f6:	6a3b      	ldr	r3, [r7, #32]
 80025f8:	085b      	lsrs	r3, r3, #1
 80025fa:	18d3      	adds	r3, r2, r3
 80025fc:	6a39      	ldr	r1, [r7, #32]
 80025fe:	0018      	movs	r0, r3
 8002600:	f7fd fd80 	bl	8000104 <__udivsi3>
 8002604:	0003      	movs	r3, r0
 8002606:	b29b      	uxth	r3, r3
 8002608:	001a      	movs	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	60da      	str	r2, [r3, #12]
}
 800260e:	46c0      	nop			@ (mov r8, r8)
 8002610:	46bd      	mov	sp, r7
 8002612:	b006      	add	sp, #24
 8002614:	bd80      	pop	{r7, pc}
 8002616:	46c0      	nop			@ (mov r8, r8)
 8002618:	080028e8 	.word	0x080028e8
 800261c:	0000fff0 	.word	0x0000fff0

08002620 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8002620:	b590      	push	{r4, r7, lr}
 8002622:	b08b      	sub	sp, #44	@ 0x2c
 8002624:	af02      	add	r7, sp, #8
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800262a:	231f      	movs	r3, #31
 800262c:	18fb      	adds	r3, r7, r3
 800262e:	2201      	movs	r2, #1
 8002630:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002632:	2300      	movs	r3, #0
 8002634:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	0018      	movs	r0, r3
 800263a:	f7ff ff4b 	bl	80024d4 <LL_USART_IsEnabled>
 800263e:	1e03      	subs	r3, r0, #0
 8002640:	d16a      	bne.n	8002718 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a38      	ldr	r2, [pc, #224]	@ (8002728 <LL_USART_Init+0x108>)
 8002648:	401a      	ands	r2, r3
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	6899      	ldr	r1, [r3, #8]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	4319      	orrs	r1, r3
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	695b      	ldr	r3, [r3, #20]
 8002658:	4319      	orrs	r1, r3
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	430b      	orrs	r3, r1
 8002660:	431a      	orrs	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	68da      	ldr	r2, [r3, #12]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	0011      	movs	r1, r2
 800266e:	0018      	movs	r0, r3
 8002670:	f7ff ff54 	bl	800251c <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	699a      	ldr	r2, [r3, #24]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	0011      	movs	r1, r2
 800267c:	0018      	movs	r0, r3
 800267e:	f7ff ff61 	bl	8002544 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a29      	ldr	r2, [pc, #164]	@ (800272c <LL_USART_Init+0x10c>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d105      	bne.n	8002696 <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800268a:	2003      	movs	r0, #3
 800268c:	f7ff fdfc 	bl	8002288 <LL_RCC_GetUSARTClockFreq>
 8002690:	0003      	movs	r3, r0
 8002692:	61bb      	str	r3, [r7, #24]
 8002694:	e022      	b.n	80026dc <LL_USART_Init+0xbc>
    }
    else if (USARTx == USART2)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a25      	ldr	r2, [pc, #148]	@ (8002730 <LL_USART_Init+0x110>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d105      	bne.n	80026aa <LL_USART_Init+0x8a>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800269e:	200c      	movs	r0, #12
 80026a0:	f7ff fdf2 	bl	8002288 <LL_RCC_GetUSARTClockFreq>
 80026a4:	0003      	movs	r3, r0
 80026a6:	61bb      	str	r3, [r7, #24]
 80026a8:	e018      	b.n	80026dc <LL_USART_Init+0xbc>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* USART2 Clock selector flag */
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a21      	ldr	r2, [pc, #132]	@ (8002734 <LL_USART_Init+0x114>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d108      	bne.n	80026c4 <LL_USART_Init+0xa4>
    {
#if defined(RCC_CCIPR_USART3SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80026b2:	240c      	movs	r4, #12
 80026b4:	193b      	adds	r3, r7, r4
 80026b6:	0018      	movs	r0, r3
 80026b8:	f7ff fdc8 	bl	800224c <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80026bc:	193b      	adds	r3, r7, r4
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	61bb      	str	r3, [r7, #24]
 80026c2:	e00b      	b.n	80026dc <LL_USART_Init+0xbc>
#endif /* USART3 Clock selector flag */
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a1c      	ldr	r2, [pc, #112]	@ (8002738 <LL_USART_Init+0x118>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d107      	bne.n	80026dc <LL_USART_Init+0xbc>
    {
#if defined(RCC_CCIPR_USART4SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART4_CLKSOURCE);
#else
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80026cc:	240c      	movs	r4, #12
 80026ce:	193b      	adds	r3, r7, r4
 80026d0:	0018      	movs	r0, r3
 80026d2:	f7ff fdbb 	bl	800224c <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80026d6:	193b      	adds	r3, r7, r4
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d013      	beq.n	800270a <LL_USART_Init+0xea>
        && (USART_InitStruct->BaudRate != 0U))
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00f      	beq.n	800270a <LL_USART_Init+0xea>
    {
      status = SUCCESS;
 80026ea:	231f      	movs	r3, #31
 80026ec:	18fb      	adds	r3, r7, r3
 80026ee:	2200      	movs	r2, #0
 80026f0:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->PrescalerValue,
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
                           USART_InitStruct->OverSampling,
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	69dc      	ldr	r4, [r3, #28]
                           USART_InitStruct->BaudRate);
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
      LL_USART_SetBaudRate(USARTx,
 80026fe:	69b9      	ldr	r1, [r7, #24]
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	0023      	movs	r3, r4
 8002706:	f7ff ff31 	bl	800256c <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	0011      	movs	r1, r2
 8002712:	0018      	movs	r0, r3
 8002714:	f7ff feef 	bl	80024f6 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002718:	231f      	movs	r3, #31
 800271a:	18fb      	adds	r3, r7, r3
 800271c:	781b      	ldrb	r3, [r3, #0]
}
 800271e:	0018      	movs	r0, r3
 8002720:	46bd      	mov	sp, r7
 8002722:	b009      	add	sp, #36	@ 0x24
 8002724:	bd90      	pop	{r4, r7, pc}
 8002726:	46c0      	nop			@ (mov r8, r8)
 8002728:	efff69f3 	.word	0xefff69f3
 800272c:	40013800 	.word	0x40013800
 8002730:	40004400 	.word	0x40004400
 8002734:	40004800 	.word	0x40004800
 8002738:	40004c00 	.word	0x40004c00

0800273c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002746:	6839      	ldr	r1, [r7, #0]
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f7fd fcdb 	bl	8000104 <__udivsi3>
 800274e:	0003      	movs	r3, r0
 8002750:	001a      	movs	r2, r3
 8002752:	4b06      	ldr	r3, [pc, #24]	@ (800276c <LL_InitTick+0x30>)
 8002754:	3a01      	subs	r2, #1
 8002756:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002758:	4b04      	ldr	r3, [pc, #16]	@ (800276c <LL_InitTick+0x30>)
 800275a:	2200      	movs	r2, #0
 800275c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800275e:	4b03      	ldr	r3, [pc, #12]	@ (800276c <LL_InitTick+0x30>)
 8002760:	2205      	movs	r2, #5
 8002762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002764:	46c0      	nop			@ (mov r8, r8)
 8002766:	46bd      	mov	sp, r7
 8002768:	b002      	add	sp, #8
 800276a:	bd80      	pop	{r7, pc}
 800276c:	e000e010 	.word	0xe000e010

08002770 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002778:	23fa      	movs	r3, #250	@ 0xfa
 800277a:	009a      	lsls	r2, r3, #2
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	0011      	movs	r1, r2
 8002780:	0018      	movs	r0, r3
 8002782:	f7ff ffdb 	bl	800273c <LL_InitTick>
}
 8002786:	46c0      	nop			@ (mov r8, r8)
 8002788:	46bd      	mov	sp, r7
 800278a:	b002      	add	sp, #8
 800278c:	bd80      	pop	{r7, pc}
	...

08002790 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002798:	4b0e      	ldr	r3, [pc, #56]	@ (80027d4 <LL_mDelay+0x44>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	60bb      	str	r3, [r7, #8]
   uint32_t tmpDelay; /* MISRAC2012-Rule-17.8 */
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800279e:	68bb      	ldr	r3, [r7, #8]
  tmpDelay  = Delay;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	60fb      	str	r3, [r7, #12]
  /* Add a period to guaranty minimum wait */
  if (tmpDelay  < LL_MAX_DELAY)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	3301      	adds	r3, #1
 80027a8:	d00c      	beq.n	80027c4 <LL_mDelay+0x34>
  {
    tmpDelay ++;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	3301      	adds	r3, #1
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	e008      	b.n	80027c4 <LL_mDelay+0x34>
  }

  while (tmpDelay  != 0U)
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80027b2:	4b08      	ldr	r3, [pc, #32]	@ (80027d4 <LL_mDelay+0x44>)
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	2380      	movs	r3, #128	@ 0x80
 80027b8:	025b      	lsls	r3, r3, #9
 80027ba:	4013      	ands	r3, r2
 80027bc:	d002      	beq.n	80027c4 <LL_mDelay+0x34>
    {
      tmpDelay --;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	3b01      	subs	r3, #1
 80027c2:	60fb      	str	r3, [r7, #12]
  while (tmpDelay  != 0U)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f3      	bne.n	80027b2 <LL_mDelay+0x22>
    }
  }
}
 80027ca:	46c0      	nop			@ (mov r8, r8)
 80027cc:	46c0      	nop			@ (mov r8, r8)
 80027ce:	46bd      	mov	sp, r7
 80027d0:	b004      	add	sp, #16
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	e000e010 	.word	0xe000e010

080027d8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80027e0:	4b03      	ldr	r3, [pc, #12]	@ (80027f0 <LL_SetSystemCoreClock+0x18>)
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	601a      	str	r2, [r3, #0]
}
 80027e6:	46c0      	nop			@ (mov r8, r8)
 80027e8:	46bd      	mov	sp, r7
 80027ea:	b002      	add	sp, #8
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	46c0      	nop			@ (mov r8, r8)
 80027f0:	20000004 	.word	0x20000004

080027f4 <memset>:
 80027f4:	0003      	movs	r3, r0
 80027f6:	1882      	adds	r2, r0, r2
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d100      	bne.n	80027fe <memset+0xa>
 80027fc:	4770      	bx	lr
 80027fe:	7019      	strb	r1, [r3, #0]
 8002800:	3301      	adds	r3, #1
 8002802:	e7f9      	b.n	80027f8 <memset+0x4>

08002804 <__libc_init_array>:
 8002804:	b570      	push	{r4, r5, r6, lr}
 8002806:	2600      	movs	r6, #0
 8002808:	4c0c      	ldr	r4, [pc, #48]	@ (800283c <__libc_init_array+0x38>)
 800280a:	4d0d      	ldr	r5, [pc, #52]	@ (8002840 <__libc_init_array+0x3c>)
 800280c:	1b64      	subs	r4, r4, r5
 800280e:	10a4      	asrs	r4, r4, #2
 8002810:	42a6      	cmp	r6, r4
 8002812:	d109      	bne.n	8002828 <__libc_init_array+0x24>
 8002814:	2600      	movs	r6, #0
 8002816:	f000 f819 	bl	800284c <_init>
 800281a:	4c0a      	ldr	r4, [pc, #40]	@ (8002844 <__libc_init_array+0x40>)
 800281c:	4d0a      	ldr	r5, [pc, #40]	@ (8002848 <__libc_init_array+0x44>)
 800281e:	1b64      	subs	r4, r4, r5
 8002820:	10a4      	asrs	r4, r4, #2
 8002822:	42a6      	cmp	r6, r4
 8002824:	d105      	bne.n	8002832 <__libc_init_array+0x2e>
 8002826:	bd70      	pop	{r4, r5, r6, pc}
 8002828:	00b3      	lsls	r3, r6, #2
 800282a:	58eb      	ldr	r3, [r5, r3]
 800282c:	4798      	blx	r3
 800282e:	3601      	adds	r6, #1
 8002830:	e7ee      	b.n	8002810 <__libc_init_array+0xc>
 8002832:	00b3      	lsls	r3, r6, #2
 8002834:	58eb      	ldr	r3, [r5, r3]
 8002836:	4798      	blx	r3
 8002838:	3601      	adds	r6, #1
 800283a:	e7f2      	b.n	8002822 <__libc_init_array+0x1e>
 800283c:	08002918 	.word	0x08002918
 8002840:	08002918 	.word	0x08002918
 8002844:	0800291c 	.word	0x0800291c
 8002848:	08002918 	.word	0x08002918

0800284c <_init>:
 800284c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800284e:	46c0      	nop			@ (mov r8, r8)
 8002850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002852:	bc08      	pop	{r3}
 8002854:	469e      	mov	lr, r3
 8002856:	4770      	bx	lr

08002858 <_fini>:
 8002858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800285a:	46c0      	nop			@ (mov r8, r8)
 800285c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800285e:	bc08      	pop	{r3}
 8002860:	469e      	mov	lr, r3
 8002862:	4770      	bx	lr
