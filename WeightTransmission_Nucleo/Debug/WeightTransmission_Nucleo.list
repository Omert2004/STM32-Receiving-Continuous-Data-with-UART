
WeightTransmission_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b58  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08002c14  08002c14  00003c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ccc  08002ccc  00004008  2**0
                  CONTENTS
  4 .ARM          00000000  08002ccc  08002ccc  00004008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ccc  08002ccc  00004008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ccc  08002ccc  00003ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002cd0  08002cd0  00003cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000008  20000000  08002cd4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000008  08002cdc  00004008  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08002cdc  000041c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00004008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004533  00000000  00000000  00004030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000efc  00000000  00000000  00008563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f8  00000000  00000000  00009460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000527  00000000  00000000  00009b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000115b6  00000000  00000000  0000a07f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000049ac  00000000  00000000  0001b635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00060fed  00000000  00000000  0001ffe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00080fce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019b0  00000000  00000000  00081014  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  000829c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000008 	.word	0x20000008
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002bfc 	.word	0x08002bfc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000000c 	.word	0x2000000c
 8000100:	08002bfc 	.word	0x08002bfc

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_cdrcmple>:
 800021c:	4684      	mov	ip, r0
 800021e:	0010      	movs	r0, r2
 8000220:	4662      	mov	r2, ip
 8000222:	468c      	mov	ip, r1
 8000224:	0019      	movs	r1, r3
 8000226:	4663      	mov	r3, ip
 8000228:	e000      	b.n	800022c <__aeabi_cdcmpeq>
 800022a:	46c0      	nop			@ (mov r8, r8)

0800022c <__aeabi_cdcmpeq>:
 800022c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022e:	f000 f8eb 	bl	8000408 <__ledf2>
 8000232:	2800      	cmp	r0, #0
 8000234:	d401      	bmi.n	800023a <__aeabi_cdcmpeq+0xe>
 8000236:	2100      	movs	r1, #0
 8000238:	42c8      	cmn	r0, r1
 800023a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800023c <__aeabi_dcmpeq>:
 800023c:	b510      	push	{r4, lr}
 800023e:	f000 f82b 	bl	8000298 <__eqdf2>
 8000242:	4240      	negs	r0, r0
 8000244:	3001      	adds	r0, #1
 8000246:	bd10      	pop	{r4, pc}

08000248 <__aeabi_dcmplt>:
 8000248:	b510      	push	{r4, lr}
 800024a:	f000 f8dd 	bl	8000408 <__ledf2>
 800024e:	2800      	cmp	r0, #0
 8000250:	db01      	blt.n	8000256 <__aeabi_dcmplt+0xe>
 8000252:	2000      	movs	r0, #0
 8000254:	bd10      	pop	{r4, pc}
 8000256:	2001      	movs	r0, #1
 8000258:	bd10      	pop	{r4, pc}
 800025a:	46c0      	nop			@ (mov r8, r8)

0800025c <__aeabi_dcmple>:
 800025c:	b510      	push	{r4, lr}
 800025e:	f000 f8d3 	bl	8000408 <__ledf2>
 8000262:	2800      	cmp	r0, #0
 8000264:	dd01      	ble.n	800026a <__aeabi_dcmple+0xe>
 8000266:	2000      	movs	r0, #0
 8000268:	bd10      	pop	{r4, pc}
 800026a:	2001      	movs	r0, #1
 800026c:	bd10      	pop	{r4, pc}
 800026e:	46c0      	nop			@ (mov r8, r8)

08000270 <__aeabi_dcmpgt>:
 8000270:	b510      	push	{r4, lr}
 8000272:	f000 f855 	bl	8000320 <__gedf2>
 8000276:	2800      	cmp	r0, #0
 8000278:	dc01      	bgt.n	800027e <__aeabi_dcmpgt+0xe>
 800027a:	2000      	movs	r0, #0
 800027c:	bd10      	pop	{r4, pc}
 800027e:	2001      	movs	r0, #1
 8000280:	bd10      	pop	{r4, pc}
 8000282:	46c0      	nop			@ (mov r8, r8)

08000284 <__aeabi_dcmpge>:
 8000284:	b510      	push	{r4, lr}
 8000286:	f000 f84b 	bl	8000320 <__gedf2>
 800028a:	2800      	cmp	r0, #0
 800028c:	da01      	bge.n	8000292 <__aeabi_dcmpge+0xe>
 800028e:	2000      	movs	r0, #0
 8000290:	bd10      	pop	{r4, pc}
 8000292:	2001      	movs	r0, #1
 8000294:	bd10      	pop	{r4, pc}
 8000296:	46c0      	nop			@ (mov r8, r8)

08000298 <__eqdf2>:
 8000298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800029a:	4657      	mov	r7, sl
 800029c:	46de      	mov	lr, fp
 800029e:	464e      	mov	r6, r9
 80002a0:	4645      	mov	r5, r8
 80002a2:	b5e0      	push	{r5, r6, r7, lr}
 80002a4:	000d      	movs	r5, r1
 80002a6:	0004      	movs	r4, r0
 80002a8:	0fe8      	lsrs	r0, r5, #31
 80002aa:	4683      	mov	fp, r0
 80002ac:	0309      	lsls	r1, r1, #12
 80002ae:	0fd8      	lsrs	r0, r3, #31
 80002b0:	0b09      	lsrs	r1, r1, #12
 80002b2:	4682      	mov	sl, r0
 80002b4:	4819      	ldr	r0, [pc, #100]	@ (800031c <__eqdf2+0x84>)
 80002b6:	468c      	mov	ip, r1
 80002b8:	031f      	lsls	r7, r3, #12
 80002ba:	0069      	lsls	r1, r5, #1
 80002bc:	005e      	lsls	r6, r3, #1
 80002be:	0d49      	lsrs	r1, r1, #21
 80002c0:	0b3f      	lsrs	r7, r7, #12
 80002c2:	0d76      	lsrs	r6, r6, #21
 80002c4:	4281      	cmp	r1, r0
 80002c6:	d018      	beq.n	80002fa <__eqdf2+0x62>
 80002c8:	4286      	cmp	r6, r0
 80002ca:	d00f      	beq.n	80002ec <__eqdf2+0x54>
 80002cc:	2001      	movs	r0, #1
 80002ce:	42b1      	cmp	r1, r6
 80002d0:	d10d      	bne.n	80002ee <__eqdf2+0x56>
 80002d2:	45bc      	cmp	ip, r7
 80002d4:	d10b      	bne.n	80002ee <__eqdf2+0x56>
 80002d6:	4294      	cmp	r4, r2
 80002d8:	d109      	bne.n	80002ee <__eqdf2+0x56>
 80002da:	45d3      	cmp	fp, sl
 80002dc:	d01c      	beq.n	8000318 <__eqdf2+0x80>
 80002de:	2900      	cmp	r1, #0
 80002e0:	d105      	bne.n	80002ee <__eqdf2+0x56>
 80002e2:	4660      	mov	r0, ip
 80002e4:	4320      	orrs	r0, r4
 80002e6:	1e43      	subs	r3, r0, #1
 80002e8:	4198      	sbcs	r0, r3
 80002ea:	e000      	b.n	80002ee <__eqdf2+0x56>
 80002ec:	2001      	movs	r0, #1
 80002ee:	bcf0      	pop	{r4, r5, r6, r7}
 80002f0:	46bb      	mov	fp, r7
 80002f2:	46b2      	mov	sl, r6
 80002f4:	46a9      	mov	r9, r5
 80002f6:	46a0      	mov	r8, r4
 80002f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fa:	2001      	movs	r0, #1
 80002fc:	428e      	cmp	r6, r1
 80002fe:	d1f6      	bne.n	80002ee <__eqdf2+0x56>
 8000300:	4661      	mov	r1, ip
 8000302:	4339      	orrs	r1, r7
 8000304:	000f      	movs	r7, r1
 8000306:	4317      	orrs	r7, r2
 8000308:	4327      	orrs	r7, r4
 800030a:	d1f0      	bne.n	80002ee <__eqdf2+0x56>
 800030c:	465b      	mov	r3, fp
 800030e:	4652      	mov	r2, sl
 8000310:	1a98      	subs	r0, r3, r2
 8000312:	1e43      	subs	r3, r0, #1
 8000314:	4198      	sbcs	r0, r3
 8000316:	e7ea      	b.n	80002ee <__eqdf2+0x56>
 8000318:	2000      	movs	r0, #0
 800031a:	e7e8      	b.n	80002ee <__eqdf2+0x56>
 800031c:	000007ff 	.word	0x000007ff

08000320 <__gedf2>:
 8000320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000322:	4657      	mov	r7, sl
 8000324:	464e      	mov	r6, r9
 8000326:	4645      	mov	r5, r8
 8000328:	46de      	mov	lr, fp
 800032a:	b5e0      	push	{r5, r6, r7, lr}
 800032c:	000d      	movs	r5, r1
 800032e:	030f      	lsls	r7, r1, #12
 8000330:	0b39      	lsrs	r1, r7, #12
 8000332:	b083      	sub	sp, #12
 8000334:	0004      	movs	r4, r0
 8000336:	4680      	mov	r8, r0
 8000338:	9101      	str	r1, [sp, #4]
 800033a:	0058      	lsls	r0, r3, #1
 800033c:	0fe9      	lsrs	r1, r5, #31
 800033e:	4f31      	ldr	r7, [pc, #196]	@ (8000404 <__gedf2+0xe4>)
 8000340:	0d40      	lsrs	r0, r0, #21
 8000342:	468c      	mov	ip, r1
 8000344:	006e      	lsls	r6, r5, #1
 8000346:	0319      	lsls	r1, r3, #12
 8000348:	4682      	mov	sl, r0
 800034a:	4691      	mov	r9, r2
 800034c:	0d76      	lsrs	r6, r6, #21
 800034e:	0b09      	lsrs	r1, r1, #12
 8000350:	0fd8      	lsrs	r0, r3, #31
 8000352:	42be      	cmp	r6, r7
 8000354:	d01f      	beq.n	8000396 <__gedf2+0x76>
 8000356:	45ba      	cmp	sl, r7
 8000358:	d00f      	beq.n	800037a <__gedf2+0x5a>
 800035a:	2e00      	cmp	r6, #0
 800035c:	d12f      	bne.n	80003be <__gedf2+0x9e>
 800035e:	4655      	mov	r5, sl
 8000360:	9e01      	ldr	r6, [sp, #4]
 8000362:	4334      	orrs	r4, r6
 8000364:	2d00      	cmp	r5, #0
 8000366:	d127      	bne.n	80003b8 <__gedf2+0x98>
 8000368:	430a      	orrs	r2, r1
 800036a:	d03a      	beq.n	80003e2 <__gedf2+0xc2>
 800036c:	2c00      	cmp	r4, #0
 800036e:	d145      	bne.n	80003fc <__gedf2+0xdc>
 8000370:	2800      	cmp	r0, #0
 8000372:	d11a      	bne.n	80003aa <__gedf2+0x8a>
 8000374:	2001      	movs	r0, #1
 8000376:	4240      	negs	r0, r0
 8000378:	e017      	b.n	80003aa <__gedf2+0x8a>
 800037a:	4311      	orrs	r1, r2
 800037c:	d13b      	bne.n	80003f6 <__gedf2+0xd6>
 800037e:	2e00      	cmp	r6, #0
 8000380:	d102      	bne.n	8000388 <__gedf2+0x68>
 8000382:	9f01      	ldr	r7, [sp, #4]
 8000384:	4327      	orrs	r7, r4
 8000386:	d0f3      	beq.n	8000370 <__gedf2+0x50>
 8000388:	4584      	cmp	ip, r0
 800038a:	d109      	bne.n	80003a0 <__gedf2+0x80>
 800038c:	4663      	mov	r3, ip
 800038e:	2b00      	cmp	r3, #0
 8000390:	d0f0      	beq.n	8000374 <__gedf2+0x54>
 8000392:	4660      	mov	r0, ip
 8000394:	e009      	b.n	80003aa <__gedf2+0x8a>
 8000396:	9f01      	ldr	r7, [sp, #4]
 8000398:	4327      	orrs	r7, r4
 800039a:	d12c      	bne.n	80003f6 <__gedf2+0xd6>
 800039c:	45b2      	cmp	sl, r6
 800039e:	d024      	beq.n	80003ea <__gedf2+0xca>
 80003a0:	4663      	mov	r3, ip
 80003a2:	2002      	movs	r0, #2
 80003a4:	3b01      	subs	r3, #1
 80003a6:	4018      	ands	r0, r3
 80003a8:	3801      	subs	r0, #1
 80003aa:	b003      	add	sp, #12
 80003ac:	bcf0      	pop	{r4, r5, r6, r7}
 80003ae:	46bb      	mov	fp, r7
 80003b0:	46b2      	mov	sl, r6
 80003b2:	46a9      	mov	r9, r5
 80003b4:	46a0      	mov	r8, r4
 80003b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003b8:	2c00      	cmp	r4, #0
 80003ba:	d0d9      	beq.n	8000370 <__gedf2+0x50>
 80003bc:	e7e4      	b.n	8000388 <__gedf2+0x68>
 80003be:	4654      	mov	r4, sl
 80003c0:	2c00      	cmp	r4, #0
 80003c2:	d0ed      	beq.n	80003a0 <__gedf2+0x80>
 80003c4:	4584      	cmp	ip, r0
 80003c6:	d1eb      	bne.n	80003a0 <__gedf2+0x80>
 80003c8:	4556      	cmp	r6, sl
 80003ca:	dce9      	bgt.n	80003a0 <__gedf2+0x80>
 80003cc:	dbde      	blt.n	800038c <__gedf2+0x6c>
 80003ce:	9b01      	ldr	r3, [sp, #4]
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d8e5      	bhi.n	80003a0 <__gedf2+0x80>
 80003d4:	d1da      	bne.n	800038c <__gedf2+0x6c>
 80003d6:	45c8      	cmp	r8, r9
 80003d8:	d8e2      	bhi.n	80003a0 <__gedf2+0x80>
 80003da:	2000      	movs	r0, #0
 80003dc:	45c8      	cmp	r8, r9
 80003de:	d2e4      	bcs.n	80003aa <__gedf2+0x8a>
 80003e0:	e7d4      	b.n	800038c <__gedf2+0x6c>
 80003e2:	2000      	movs	r0, #0
 80003e4:	2c00      	cmp	r4, #0
 80003e6:	d0e0      	beq.n	80003aa <__gedf2+0x8a>
 80003e8:	e7da      	b.n	80003a0 <__gedf2+0x80>
 80003ea:	4311      	orrs	r1, r2
 80003ec:	d103      	bne.n	80003f6 <__gedf2+0xd6>
 80003ee:	4584      	cmp	ip, r0
 80003f0:	d1d6      	bne.n	80003a0 <__gedf2+0x80>
 80003f2:	2000      	movs	r0, #0
 80003f4:	e7d9      	b.n	80003aa <__gedf2+0x8a>
 80003f6:	2002      	movs	r0, #2
 80003f8:	4240      	negs	r0, r0
 80003fa:	e7d6      	b.n	80003aa <__gedf2+0x8a>
 80003fc:	4584      	cmp	ip, r0
 80003fe:	d0e6      	beq.n	80003ce <__gedf2+0xae>
 8000400:	e7ce      	b.n	80003a0 <__gedf2+0x80>
 8000402:	46c0      	nop			@ (mov r8, r8)
 8000404:	000007ff 	.word	0x000007ff

08000408 <__ledf2>:
 8000408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800040a:	4657      	mov	r7, sl
 800040c:	464e      	mov	r6, r9
 800040e:	4645      	mov	r5, r8
 8000410:	46de      	mov	lr, fp
 8000412:	b5e0      	push	{r5, r6, r7, lr}
 8000414:	000d      	movs	r5, r1
 8000416:	030f      	lsls	r7, r1, #12
 8000418:	0004      	movs	r4, r0
 800041a:	4680      	mov	r8, r0
 800041c:	0fe8      	lsrs	r0, r5, #31
 800041e:	0b39      	lsrs	r1, r7, #12
 8000420:	4684      	mov	ip, r0
 8000422:	b083      	sub	sp, #12
 8000424:	0058      	lsls	r0, r3, #1
 8000426:	4f30      	ldr	r7, [pc, #192]	@ (80004e8 <__ledf2+0xe0>)
 8000428:	0d40      	lsrs	r0, r0, #21
 800042a:	9101      	str	r1, [sp, #4]
 800042c:	031e      	lsls	r6, r3, #12
 800042e:	0069      	lsls	r1, r5, #1
 8000430:	4682      	mov	sl, r0
 8000432:	4691      	mov	r9, r2
 8000434:	0d49      	lsrs	r1, r1, #21
 8000436:	0b36      	lsrs	r6, r6, #12
 8000438:	0fd8      	lsrs	r0, r3, #31
 800043a:	42b9      	cmp	r1, r7
 800043c:	d020      	beq.n	8000480 <__ledf2+0x78>
 800043e:	45ba      	cmp	sl, r7
 8000440:	d00f      	beq.n	8000462 <__ledf2+0x5a>
 8000442:	2900      	cmp	r1, #0
 8000444:	d12b      	bne.n	800049e <__ledf2+0x96>
 8000446:	9901      	ldr	r1, [sp, #4]
 8000448:	430c      	orrs	r4, r1
 800044a:	4651      	mov	r1, sl
 800044c:	2900      	cmp	r1, #0
 800044e:	d137      	bne.n	80004c0 <__ledf2+0xb8>
 8000450:	4332      	orrs	r2, r6
 8000452:	d038      	beq.n	80004c6 <__ledf2+0xbe>
 8000454:	2c00      	cmp	r4, #0
 8000456:	d144      	bne.n	80004e2 <__ledf2+0xda>
 8000458:	2800      	cmp	r0, #0
 800045a:	d119      	bne.n	8000490 <__ledf2+0x88>
 800045c:	2001      	movs	r0, #1
 800045e:	4240      	negs	r0, r0
 8000460:	e016      	b.n	8000490 <__ledf2+0x88>
 8000462:	4316      	orrs	r6, r2
 8000464:	d113      	bne.n	800048e <__ledf2+0x86>
 8000466:	2900      	cmp	r1, #0
 8000468:	d102      	bne.n	8000470 <__ledf2+0x68>
 800046a:	9f01      	ldr	r7, [sp, #4]
 800046c:	4327      	orrs	r7, r4
 800046e:	d0f3      	beq.n	8000458 <__ledf2+0x50>
 8000470:	4584      	cmp	ip, r0
 8000472:	d020      	beq.n	80004b6 <__ledf2+0xae>
 8000474:	4663      	mov	r3, ip
 8000476:	2002      	movs	r0, #2
 8000478:	3b01      	subs	r3, #1
 800047a:	4018      	ands	r0, r3
 800047c:	3801      	subs	r0, #1
 800047e:	e007      	b.n	8000490 <__ledf2+0x88>
 8000480:	9f01      	ldr	r7, [sp, #4]
 8000482:	4327      	orrs	r7, r4
 8000484:	d103      	bne.n	800048e <__ledf2+0x86>
 8000486:	458a      	cmp	sl, r1
 8000488:	d1f4      	bne.n	8000474 <__ledf2+0x6c>
 800048a:	4316      	orrs	r6, r2
 800048c:	d01f      	beq.n	80004ce <__ledf2+0xc6>
 800048e:	2002      	movs	r0, #2
 8000490:	b003      	add	sp, #12
 8000492:	bcf0      	pop	{r4, r5, r6, r7}
 8000494:	46bb      	mov	fp, r7
 8000496:	46b2      	mov	sl, r6
 8000498:	46a9      	mov	r9, r5
 800049a:	46a0      	mov	r8, r4
 800049c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800049e:	4654      	mov	r4, sl
 80004a0:	2c00      	cmp	r4, #0
 80004a2:	d0e7      	beq.n	8000474 <__ledf2+0x6c>
 80004a4:	4584      	cmp	ip, r0
 80004a6:	d1e5      	bne.n	8000474 <__ledf2+0x6c>
 80004a8:	4551      	cmp	r1, sl
 80004aa:	dce3      	bgt.n	8000474 <__ledf2+0x6c>
 80004ac:	db03      	blt.n	80004b6 <__ledf2+0xae>
 80004ae:	9b01      	ldr	r3, [sp, #4]
 80004b0:	42b3      	cmp	r3, r6
 80004b2:	d8df      	bhi.n	8000474 <__ledf2+0x6c>
 80004b4:	d00f      	beq.n	80004d6 <__ledf2+0xce>
 80004b6:	4663      	mov	r3, ip
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d0cf      	beq.n	800045c <__ledf2+0x54>
 80004bc:	4660      	mov	r0, ip
 80004be:	e7e7      	b.n	8000490 <__ledf2+0x88>
 80004c0:	2c00      	cmp	r4, #0
 80004c2:	d0c9      	beq.n	8000458 <__ledf2+0x50>
 80004c4:	e7d4      	b.n	8000470 <__ledf2+0x68>
 80004c6:	2000      	movs	r0, #0
 80004c8:	2c00      	cmp	r4, #0
 80004ca:	d0e1      	beq.n	8000490 <__ledf2+0x88>
 80004cc:	e7d2      	b.n	8000474 <__ledf2+0x6c>
 80004ce:	4584      	cmp	ip, r0
 80004d0:	d1d0      	bne.n	8000474 <__ledf2+0x6c>
 80004d2:	2000      	movs	r0, #0
 80004d4:	e7dc      	b.n	8000490 <__ledf2+0x88>
 80004d6:	45c8      	cmp	r8, r9
 80004d8:	d8cc      	bhi.n	8000474 <__ledf2+0x6c>
 80004da:	2000      	movs	r0, #0
 80004dc:	45c8      	cmp	r8, r9
 80004de:	d2d7      	bcs.n	8000490 <__ledf2+0x88>
 80004e0:	e7e9      	b.n	80004b6 <__ledf2+0xae>
 80004e2:	4584      	cmp	ip, r0
 80004e4:	d0e3      	beq.n	80004ae <__ledf2+0xa6>
 80004e6:	e7c5      	b.n	8000474 <__ledf2+0x6c>
 80004e8:	000007ff 	.word	0x000007ff

080004ec <__aeabi_dmul>:
 80004ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ee:	4657      	mov	r7, sl
 80004f0:	46de      	mov	lr, fp
 80004f2:	464e      	mov	r6, r9
 80004f4:	4645      	mov	r5, r8
 80004f6:	b5e0      	push	{r5, r6, r7, lr}
 80004f8:	001f      	movs	r7, r3
 80004fa:	030b      	lsls	r3, r1, #12
 80004fc:	0b1b      	lsrs	r3, r3, #12
 80004fe:	0016      	movs	r6, r2
 8000500:	469a      	mov	sl, r3
 8000502:	0fca      	lsrs	r2, r1, #31
 8000504:	004b      	lsls	r3, r1, #1
 8000506:	0004      	movs	r4, r0
 8000508:	4693      	mov	fp, r2
 800050a:	b087      	sub	sp, #28
 800050c:	0d5b      	lsrs	r3, r3, #21
 800050e:	d100      	bne.n	8000512 <__aeabi_dmul+0x26>
 8000510:	e0d5      	b.n	80006be <__aeabi_dmul+0x1d2>
 8000512:	4abb      	ldr	r2, [pc, #748]	@ (8000800 <__aeabi_dmul+0x314>)
 8000514:	4293      	cmp	r3, r2
 8000516:	d100      	bne.n	800051a <__aeabi_dmul+0x2e>
 8000518:	e0f8      	b.n	800070c <__aeabi_dmul+0x220>
 800051a:	4651      	mov	r1, sl
 800051c:	0f42      	lsrs	r2, r0, #29
 800051e:	00c9      	lsls	r1, r1, #3
 8000520:	430a      	orrs	r2, r1
 8000522:	2180      	movs	r1, #128	@ 0x80
 8000524:	0409      	lsls	r1, r1, #16
 8000526:	4311      	orrs	r1, r2
 8000528:	00c2      	lsls	r2, r0, #3
 800052a:	4691      	mov	r9, r2
 800052c:	4ab5      	ldr	r2, [pc, #724]	@ (8000804 <__aeabi_dmul+0x318>)
 800052e:	468a      	mov	sl, r1
 8000530:	189d      	adds	r5, r3, r2
 8000532:	2300      	movs	r3, #0
 8000534:	4698      	mov	r8, r3
 8000536:	9302      	str	r3, [sp, #8]
 8000538:	033c      	lsls	r4, r7, #12
 800053a:	007b      	lsls	r3, r7, #1
 800053c:	0ffa      	lsrs	r2, r7, #31
 800053e:	0030      	movs	r0, r6
 8000540:	0b24      	lsrs	r4, r4, #12
 8000542:	0d5b      	lsrs	r3, r3, #21
 8000544:	9200      	str	r2, [sp, #0]
 8000546:	d100      	bne.n	800054a <__aeabi_dmul+0x5e>
 8000548:	e096      	b.n	8000678 <__aeabi_dmul+0x18c>
 800054a:	4aad      	ldr	r2, [pc, #692]	@ (8000800 <__aeabi_dmul+0x314>)
 800054c:	4293      	cmp	r3, r2
 800054e:	d031      	beq.n	80005b4 <__aeabi_dmul+0xc8>
 8000550:	0f72      	lsrs	r2, r6, #29
 8000552:	00e4      	lsls	r4, r4, #3
 8000554:	4322      	orrs	r2, r4
 8000556:	2480      	movs	r4, #128	@ 0x80
 8000558:	0424      	lsls	r4, r4, #16
 800055a:	4314      	orrs	r4, r2
 800055c:	4aa9      	ldr	r2, [pc, #676]	@ (8000804 <__aeabi_dmul+0x318>)
 800055e:	00f0      	lsls	r0, r6, #3
 8000560:	4694      	mov	ip, r2
 8000562:	4463      	add	r3, ip
 8000564:	195b      	adds	r3, r3, r5
 8000566:	1c5a      	adds	r2, r3, #1
 8000568:	9201      	str	r2, [sp, #4]
 800056a:	4642      	mov	r2, r8
 800056c:	2600      	movs	r6, #0
 800056e:	2a0a      	cmp	r2, #10
 8000570:	dc42      	bgt.n	80005f8 <__aeabi_dmul+0x10c>
 8000572:	465a      	mov	r2, fp
 8000574:	9900      	ldr	r1, [sp, #0]
 8000576:	404a      	eors	r2, r1
 8000578:	4693      	mov	fp, r2
 800057a:	4642      	mov	r2, r8
 800057c:	2a02      	cmp	r2, #2
 800057e:	dc32      	bgt.n	80005e6 <__aeabi_dmul+0xfa>
 8000580:	3a01      	subs	r2, #1
 8000582:	2a01      	cmp	r2, #1
 8000584:	d900      	bls.n	8000588 <__aeabi_dmul+0x9c>
 8000586:	e149      	b.n	800081c <__aeabi_dmul+0x330>
 8000588:	2e02      	cmp	r6, #2
 800058a:	d100      	bne.n	800058e <__aeabi_dmul+0xa2>
 800058c:	e0ca      	b.n	8000724 <__aeabi_dmul+0x238>
 800058e:	2e01      	cmp	r6, #1
 8000590:	d13d      	bne.n	800060e <__aeabi_dmul+0x122>
 8000592:	2300      	movs	r3, #0
 8000594:	2400      	movs	r4, #0
 8000596:	2200      	movs	r2, #0
 8000598:	0010      	movs	r0, r2
 800059a:	465a      	mov	r2, fp
 800059c:	051b      	lsls	r3, r3, #20
 800059e:	4323      	orrs	r3, r4
 80005a0:	07d2      	lsls	r2, r2, #31
 80005a2:	4313      	orrs	r3, r2
 80005a4:	0019      	movs	r1, r3
 80005a6:	b007      	add	sp, #28
 80005a8:	bcf0      	pop	{r4, r5, r6, r7}
 80005aa:	46bb      	mov	fp, r7
 80005ac:	46b2      	mov	sl, r6
 80005ae:	46a9      	mov	r9, r5
 80005b0:	46a0      	mov	r8, r4
 80005b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b4:	4b92      	ldr	r3, [pc, #584]	@ (8000800 <__aeabi_dmul+0x314>)
 80005b6:	4326      	orrs	r6, r4
 80005b8:	18eb      	adds	r3, r5, r3
 80005ba:	2e00      	cmp	r6, #0
 80005bc:	d100      	bne.n	80005c0 <__aeabi_dmul+0xd4>
 80005be:	e0bb      	b.n	8000738 <__aeabi_dmul+0x24c>
 80005c0:	2203      	movs	r2, #3
 80005c2:	4641      	mov	r1, r8
 80005c4:	4311      	orrs	r1, r2
 80005c6:	465a      	mov	r2, fp
 80005c8:	4688      	mov	r8, r1
 80005ca:	9900      	ldr	r1, [sp, #0]
 80005cc:	404a      	eors	r2, r1
 80005ce:	2180      	movs	r1, #128	@ 0x80
 80005d0:	0109      	lsls	r1, r1, #4
 80005d2:	468c      	mov	ip, r1
 80005d4:	0029      	movs	r1, r5
 80005d6:	4461      	add	r1, ip
 80005d8:	9101      	str	r1, [sp, #4]
 80005da:	4641      	mov	r1, r8
 80005dc:	290a      	cmp	r1, #10
 80005de:	dd00      	ble.n	80005e2 <__aeabi_dmul+0xf6>
 80005e0:	e233      	b.n	8000a4a <__aeabi_dmul+0x55e>
 80005e2:	4693      	mov	fp, r2
 80005e4:	2603      	movs	r6, #3
 80005e6:	4642      	mov	r2, r8
 80005e8:	2701      	movs	r7, #1
 80005ea:	4097      	lsls	r7, r2
 80005ec:	21a6      	movs	r1, #166	@ 0xa6
 80005ee:	003a      	movs	r2, r7
 80005f0:	00c9      	lsls	r1, r1, #3
 80005f2:	400a      	ands	r2, r1
 80005f4:	420f      	tst	r7, r1
 80005f6:	d031      	beq.n	800065c <__aeabi_dmul+0x170>
 80005f8:	9e02      	ldr	r6, [sp, #8]
 80005fa:	2e02      	cmp	r6, #2
 80005fc:	d100      	bne.n	8000600 <__aeabi_dmul+0x114>
 80005fe:	e235      	b.n	8000a6c <__aeabi_dmul+0x580>
 8000600:	2e03      	cmp	r6, #3
 8000602:	d100      	bne.n	8000606 <__aeabi_dmul+0x11a>
 8000604:	e1d2      	b.n	80009ac <__aeabi_dmul+0x4c0>
 8000606:	4654      	mov	r4, sl
 8000608:	4648      	mov	r0, r9
 800060a:	2e01      	cmp	r6, #1
 800060c:	d0c1      	beq.n	8000592 <__aeabi_dmul+0xa6>
 800060e:	9a01      	ldr	r2, [sp, #4]
 8000610:	4b7d      	ldr	r3, [pc, #500]	@ (8000808 <__aeabi_dmul+0x31c>)
 8000612:	4694      	mov	ip, r2
 8000614:	4463      	add	r3, ip
 8000616:	2b00      	cmp	r3, #0
 8000618:	dc00      	bgt.n	800061c <__aeabi_dmul+0x130>
 800061a:	e0c0      	b.n	800079e <__aeabi_dmul+0x2b2>
 800061c:	0742      	lsls	r2, r0, #29
 800061e:	d009      	beq.n	8000634 <__aeabi_dmul+0x148>
 8000620:	220f      	movs	r2, #15
 8000622:	4002      	ands	r2, r0
 8000624:	2a04      	cmp	r2, #4
 8000626:	d005      	beq.n	8000634 <__aeabi_dmul+0x148>
 8000628:	1d02      	adds	r2, r0, #4
 800062a:	4282      	cmp	r2, r0
 800062c:	4180      	sbcs	r0, r0
 800062e:	4240      	negs	r0, r0
 8000630:	1824      	adds	r4, r4, r0
 8000632:	0010      	movs	r0, r2
 8000634:	01e2      	lsls	r2, r4, #7
 8000636:	d506      	bpl.n	8000646 <__aeabi_dmul+0x15a>
 8000638:	4b74      	ldr	r3, [pc, #464]	@ (800080c <__aeabi_dmul+0x320>)
 800063a:	9a01      	ldr	r2, [sp, #4]
 800063c:	401c      	ands	r4, r3
 800063e:	2380      	movs	r3, #128	@ 0x80
 8000640:	4694      	mov	ip, r2
 8000642:	00db      	lsls	r3, r3, #3
 8000644:	4463      	add	r3, ip
 8000646:	4a72      	ldr	r2, [pc, #456]	@ (8000810 <__aeabi_dmul+0x324>)
 8000648:	4293      	cmp	r3, r2
 800064a:	dc6b      	bgt.n	8000724 <__aeabi_dmul+0x238>
 800064c:	0762      	lsls	r2, r4, #29
 800064e:	08c0      	lsrs	r0, r0, #3
 8000650:	0264      	lsls	r4, r4, #9
 8000652:	055b      	lsls	r3, r3, #21
 8000654:	4302      	orrs	r2, r0
 8000656:	0b24      	lsrs	r4, r4, #12
 8000658:	0d5b      	lsrs	r3, r3, #21
 800065a:	e79d      	b.n	8000598 <__aeabi_dmul+0xac>
 800065c:	2190      	movs	r1, #144	@ 0x90
 800065e:	0089      	lsls	r1, r1, #2
 8000660:	420f      	tst	r7, r1
 8000662:	d163      	bne.n	800072c <__aeabi_dmul+0x240>
 8000664:	2288      	movs	r2, #136	@ 0x88
 8000666:	423a      	tst	r2, r7
 8000668:	d100      	bne.n	800066c <__aeabi_dmul+0x180>
 800066a:	e0d7      	b.n	800081c <__aeabi_dmul+0x330>
 800066c:	9b00      	ldr	r3, [sp, #0]
 800066e:	46a2      	mov	sl, r4
 8000670:	469b      	mov	fp, r3
 8000672:	4681      	mov	r9, r0
 8000674:	9602      	str	r6, [sp, #8]
 8000676:	e7bf      	b.n	80005f8 <__aeabi_dmul+0x10c>
 8000678:	0023      	movs	r3, r4
 800067a:	4333      	orrs	r3, r6
 800067c:	d100      	bne.n	8000680 <__aeabi_dmul+0x194>
 800067e:	e07f      	b.n	8000780 <__aeabi_dmul+0x294>
 8000680:	2c00      	cmp	r4, #0
 8000682:	d100      	bne.n	8000686 <__aeabi_dmul+0x19a>
 8000684:	e1ad      	b.n	80009e2 <__aeabi_dmul+0x4f6>
 8000686:	0020      	movs	r0, r4
 8000688:	f000 fa26 	bl	8000ad8 <__clzsi2>
 800068c:	0002      	movs	r2, r0
 800068e:	0003      	movs	r3, r0
 8000690:	3a0b      	subs	r2, #11
 8000692:	201d      	movs	r0, #29
 8000694:	0019      	movs	r1, r3
 8000696:	1a82      	subs	r2, r0, r2
 8000698:	0030      	movs	r0, r6
 800069a:	3908      	subs	r1, #8
 800069c:	40d0      	lsrs	r0, r2
 800069e:	408c      	lsls	r4, r1
 80006a0:	4304      	orrs	r4, r0
 80006a2:	0030      	movs	r0, r6
 80006a4:	4088      	lsls	r0, r1
 80006a6:	4a5b      	ldr	r2, [pc, #364]	@ (8000814 <__aeabi_dmul+0x328>)
 80006a8:	1aeb      	subs	r3, r5, r3
 80006aa:	4694      	mov	ip, r2
 80006ac:	4463      	add	r3, ip
 80006ae:	1c5a      	adds	r2, r3, #1
 80006b0:	9201      	str	r2, [sp, #4]
 80006b2:	4642      	mov	r2, r8
 80006b4:	2600      	movs	r6, #0
 80006b6:	2a0a      	cmp	r2, #10
 80006b8:	dc00      	bgt.n	80006bc <__aeabi_dmul+0x1d0>
 80006ba:	e75a      	b.n	8000572 <__aeabi_dmul+0x86>
 80006bc:	e79c      	b.n	80005f8 <__aeabi_dmul+0x10c>
 80006be:	4653      	mov	r3, sl
 80006c0:	4303      	orrs	r3, r0
 80006c2:	4699      	mov	r9, r3
 80006c4:	d054      	beq.n	8000770 <__aeabi_dmul+0x284>
 80006c6:	4653      	mov	r3, sl
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d100      	bne.n	80006ce <__aeabi_dmul+0x1e2>
 80006cc:	e177      	b.n	80009be <__aeabi_dmul+0x4d2>
 80006ce:	4650      	mov	r0, sl
 80006d0:	f000 fa02 	bl	8000ad8 <__clzsi2>
 80006d4:	230b      	movs	r3, #11
 80006d6:	425b      	negs	r3, r3
 80006d8:	469c      	mov	ip, r3
 80006da:	0002      	movs	r2, r0
 80006dc:	4484      	add	ip, r0
 80006de:	0011      	movs	r1, r2
 80006e0:	4650      	mov	r0, sl
 80006e2:	3908      	subs	r1, #8
 80006e4:	4088      	lsls	r0, r1
 80006e6:	231d      	movs	r3, #29
 80006e8:	4680      	mov	r8, r0
 80006ea:	4660      	mov	r0, ip
 80006ec:	1a1b      	subs	r3, r3, r0
 80006ee:	0020      	movs	r0, r4
 80006f0:	40d8      	lsrs	r0, r3
 80006f2:	0003      	movs	r3, r0
 80006f4:	4640      	mov	r0, r8
 80006f6:	4303      	orrs	r3, r0
 80006f8:	469a      	mov	sl, r3
 80006fa:	0023      	movs	r3, r4
 80006fc:	408b      	lsls	r3, r1
 80006fe:	4699      	mov	r9, r3
 8000700:	2300      	movs	r3, #0
 8000702:	4d44      	ldr	r5, [pc, #272]	@ (8000814 <__aeabi_dmul+0x328>)
 8000704:	4698      	mov	r8, r3
 8000706:	1aad      	subs	r5, r5, r2
 8000708:	9302      	str	r3, [sp, #8]
 800070a:	e715      	b.n	8000538 <__aeabi_dmul+0x4c>
 800070c:	4652      	mov	r2, sl
 800070e:	4302      	orrs	r2, r0
 8000710:	4691      	mov	r9, r2
 8000712:	d126      	bne.n	8000762 <__aeabi_dmul+0x276>
 8000714:	2200      	movs	r2, #0
 8000716:	001d      	movs	r5, r3
 8000718:	2302      	movs	r3, #2
 800071a:	4692      	mov	sl, r2
 800071c:	3208      	adds	r2, #8
 800071e:	4690      	mov	r8, r2
 8000720:	9302      	str	r3, [sp, #8]
 8000722:	e709      	b.n	8000538 <__aeabi_dmul+0x4c>
 8000724:	2400      	movs	r4, #0
 8000726:	2200      	movs	r2, #0
 8000728:	4b35      	ldr	r3, [pc, #212]	@ (8000800 <__aeabi_dmul+0x314>)
 800072a:	e735      	b.n	8000598 <__aeabi_dmul+0xac>
 800072c:	2300      	movs	r3, #0
 800072e:	2480      	movs	r4, #128	@ 0x80
 8000730:	469b      	mov	fp, r3
 8000732:	0324      	lsls	r4, r4, #12
 8000734:	4b32      	ldr	r3, [pc, #200]	@ (8000800 <__aeabi_dmul+0x314>)
 8000736:	e72f      	b.n	8000598 <__aeabi_dmul+0xac>
 8000738:	2202      	movs	r2, #2
 800073a:	4641      	mov	r1, r8
 800073c:	4311      	orrs	r1, r2
 800073e:	2280      	movs	r2, #128	@ 0x80
 8000740:	0112      	lsls	r2, r2, #4
 8000742:	4694      	mov	ip, r2
 8000744:	002a      	movs	r2, r5
 8000746:	4462      	add	r2, ip
 8000748:	4688      	mov	r8, r1
 800074a:	9201      	str	r2, [sp, #4]
 800074c:	290a      	cmp	r1, #10
 800074e:	dd00      	ble.n	8000752 <__aeabi_dmul+0x266>
 8000750:	e752      	b.n	80005f8 <__aeabi_dmul+0x10c>
 8000752:	465a      	mov	r2, fp
 8000754:	2000      	movs	r0, #0
 8000756:	9900      	ldr	r1, [sp, #0]
 8000758:	0004      	movs	r4, r0
 800075a:	404a      	eors	r2, r1
 800075c:	4693      	mov	fp, r2
 800075e:	2602      	movs	r6, #2
 8000760:	e70b      	b.n	800057a <__aeabi_dmul+0x8e>
 8000762:	220c      	movs	r2, #12
 8000764:	001d      	movs	r5, r3
 8000766:	2303      	movs	r3, #3
 8000768:	4681      	mov	r9, r0
 800076a:	4690      	mov	r8, r2
 800076c:	9302      	str	r3, [sp, #8]
 800076e:	e6e3      	b.n	8000538 <__aeabi_dmul+0x4c>
 8000770:	2300      	movs	r3, #0
 8000772:	469a      	mov	sl, r3
 8000774:	3304      	adds	r3, #4
 8000776:	4698      	mov	r8, r3
 8000778:	3b03      	subs	r3, #3
 800077a:	2500      	movs	r5, #0
 800077c:	9302      	str	r3, [sp, #8]
 800077e:	e6db      	b.n	8000538 <__aeabi_dmul+0x4c>
 8000780:	4642      	mov	r2, r8
 8000782:	3301      	adds	r3, #1
 8000784:	431a      	orrs	r2, r3
 8000786:	002b      	movs	r3, r5
 8000788:	4690      	mov	r8, r2
 800078a:	1c5a      	adds	r2, r3, #1
 800078c:	9201      	str	r2, [sp, #4]
 800078e:	4642      	mov	r2, r8
 8000790:	2400      	movs	r4, #0
 8000792:	2000      	movs	r0, #0
 8000794:	2601      	movs	r6, #1
 8000796:	2a0a      	cmp	r2, #10
 8000798:	dc00      	bgt.n	800079c <__aeabi_dmul+0x2b0>
 800079a:	e6ea      	b.n	8000572 <__aeabi_dmul+0x86>
 800079c:	e72c      	b.n	80005f8 <__aeabi_dmul+0x10c>
 800079e:	2201      	movs	r2, #1
 80007a0:	1ad2      	subs	r2, r2, r3
 80007a2:	2a38      	cmp	r2, #56	@ 0x38
 80007a4:	dd00      	ble.n	80007a8 <__aeabi_dmul+0x2bc>
 80007a6:	e6f4      	b.n	8000592 <__aeabi_dmul+0xa6>
 80007a8:	2a1f      	cmp	r2, #31
 80007aa:	dc00      	bgt.n	80007ae <__aeabi_dmul+0x2c2>
 80007ac:	e12a      	b.n	8000a04 <__aeabi_dmul+0x518>
 80007ae:	211f      	movs	r1, #31
 80007b0:	4249      	negs	r1, r1
 80007b2:	1acb      	subs	r3, r1, r3
 80007b4:	0021      	movs	r1, r4
 80007b6:	40d9      	lsrs	r1, r3
 80007b8:	000b      	movs	r3, r1
 80007ba:	2a20      	cmp	r2, #32
 80007bc:	d005      	beq.n	80007ca <__aeabi_dmul+0x2de>
 80007be:	4a16      	ldr	r2, [pc, #88]	@ (8000818 <__aeabi_dmul+0x32c>)
 80007c0:	9d01      	ldr	r5, [sp, #4]
 80007c2:	4694      	mov	ip, r2
 80007c4:	4465      	add	r5, ip
 80007c6:	40ac      	lsls	r4, r5
 80007c8:	4320      	orrs	r0, r4
 80007ca:	1e42      	subs	r2, r0, #1
 80007cc:	4190      	sbcs	r0, r2
 80007ce:	4318      	orrs	r0, r3
 80007d0:	2307      	movs	r3, #7
 80007d2:	0019      	movs	r1, r3
 80007d4:	2400      	movs	r4, #0
 80007d6:	4001      	ands	r1, r0
 80007d8:	4203      	tst	r3, r0
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x30a>
 80007dc:	230f      	movs	r3, #15
 80007de:	4003      	ands	r3, r0
 80007e0:	2b04      	cmp	r3, #4
 80007e2:	d100      	bne.n	80007e6 <__aeabi_dmul+0x2fa>
 80007e4:	e140      	b.n	8000a68 <__aeabi_dmul+0x57c>
 80007e6:	1d03      	adds	r3, r0, #4
 80007e8:	4283      	cmp	r3, r0
 80007ea:	41a4      	sbcs	r4, r4
 80007ec:	0018      	movs	r0, r3
 80007ee:	4264      	negs	r4, r4
 80007f0:	0761      	lsls	r1, r4, #29
 80007f2:	0264      	lsls	r4, r4, #9
 80007f4:	0b24      	lsrs	r4, r4, #12
 80007f6:	08c2      	lsrs	r2, r0, #3
 80007f8:	2300      	movs	r3, #0
 80007fa:	430a      	orrs	r2, r1
 80007fc:	e6cc      	b.n	8000598 <__aeabi_dmul+0xac>
 80007fe:	46c0      	nop			@ (mov r8, r8)
 8000800:	000007ff 	.word	0x000007ff
 8000804:	fffffc01 	.word	0xfffffc01
 8000808:	000003ff 	.word	0x000003ff
 800080c:	feffffff 	.word	0xfeffffff
 8000810:	000007fe 	.word	0x000007fe
 8000814:	fffffc0d 	.word	0xfffffc0d
 8000818:	0000043e 	.word	0x0000043e
 800081c:	4649      	mov	r1, r9
 800081e:	464a      	mov	r2, r9
 8000820:	0409      	lsls	r1, r1, #16
 8000822:	0c09      	lsrs	r1, r1, #16
 8000824:	000d      	movs	r5, r1
 8000826:	0c16      	lsrs	r6, r2, #16
 8000828:	0c02      	lsrs	r2, r0, #16
 800082a:	0400      	lsls	r0, r0, #16
 800082c:	0c00      	lsrs	r0, r0, #16
 800082e:	4345      	muls	r5, r0
 8000830:	46ac      	mov	ip, r5
 8000832:	0005      	movs	r5, r0
 8000834:	4375      	muls	r5, r6
 8000836:	46a8      	mov	r8, r5
 8000838:	0015      	movs	r5, r2
 800083a:	000f      	movs	r7, r1
 800083c:	4375      	muls	r5, r6
 800083e:	9200      	str	r2, [sp, #0]
 8000840:	9502      	str	r5, [sp, #8]
 8000842:	002a      	movs	r2, r5
 8000844:	9d00      	ldr	r5, [sp, #0]
 8000846:	436f      	muls	r7, r5
 8000848:	4665      	mov	r5, ip
 800084a:	0c2d      	lsrs	r5, r5, #16
 800084c:	46a9      	mov	r9, r5
 800084e:	4447      	add	r7, r8
 8000850:	444f      	add	r7, r9
 8000852:	45b8      	cmp	r8, r7
 8000854:	d905      	bls.n	8000862 <__aeabi_dmul+0x376>
 8000856:	0015      	movs	r5, r2
 8000858:	2280      	movs	r2, #128	@ 0x80
 800085a:	0252      	lsls	r2, r2, #9
 800085c:	4690      	mov	r8, r2
 800085e:	4445      	add	r5, r8
 8000860:	9502      	str	r5, [sp, #8]
 8000862:	0c3d      	lsrs	r5, r7, #16
 8000864:	9503      	str	r5, [sp, #12]
 8000866:	4665      	mov	r5, ip
 8000868:	042d      	lsls	r5, r5, #16
 800086a:	043f      	lsls	r7, r7, #16
 800086c:	0c2d      	lsrs	r5, r5, #16
 800086e:	46ac      	mov	ip, r5
 8000870:	003d      	movs	r5, r7
 8000872:	4465      	add	r5, ip
 8000874:	9504      	str	r5, [sp, #16]
 8000876:	0c25      	lsrs	r5, r4, #16
 8000878:	0424      	lsls	r4, r4, #16
 800087a:	0c24      	lsrs	r4, r4, #16
 800087c:	46ac      	mov	ip, r5
 800087e:	0025      	movs	r5, r4
 8000880:	4375      	muls	r5, r6
 8000882:	46a8      	mov	r8, r5
 8000884:	4665      	mov	r5, ip
 8000886:	000f      	movs	r7, r1
 8000888:	4369      	muls	r1, r5
 800088a:	4441      	add	r1, r8
 800088c:	4689      	mov	r9, r1
 800088e:	4367      	muls	r7, r4
 8000890:	0c39      	lsrs	r1, r7, #16
 8000892:	4449      	add	r1, r9
 8000894:	436e      	muls	r6, r5
 8000896:	4588      	cmp	r8, r1
 8000898:	d903      	bls.n	80008a2 <__aeabi_dmul+0x3b6>
 800089a:	2280      	movs	r2, #128	@ 0x80
 800089c:	0252      	lsls	r2, r2, #9
 800089e:	4690      	mov	r8, r2
 80008a0:	4446      	add	r6, r8
 80008a2:	0c0d      	lsrs	r5, r1, #16
 80008a4:	46a8      	mov	r8, r5
 80008a6:	0035      	movs	r5, r6
 80008a8:	4445      	add	r5, r8
 80008aa:	9505      	str	r5, [sp, #20]
 80008ac:	9d03      	ldr	r5, [sp, #12]
 80008ae:	043f      	lsls	r7, r7, #16
 80008b0:	46a8      	mov	r8, r5
 80008b2:	0c3f      	lsrs	r7, r7, #16
 80008b4:	0409      	lsls	r1, r1, #16
 80008b6:	19c9      	adds	r1, r1, r7
 80008b8:	4488      	add	r8, r1
 80008ba:	4645      	mov	r5, r8
 80008bc:	9503      	str	r5, [sp, #12]
 80008be:	4655      	mov	r5, sl
 80008c0:	042e      	lsls	r6, r5, #16
 80008c2:	0c36      	lsrs	r6, r6, #16
 80008c4:	0c2f      	lsrs	r7, r5, #16
 80008c6:	0035      	movs	r5, r6
 80008c8:	4345      	muls	r5, r0
 80008ca:	4378      	muls	r0, r7
 80008cc:	4681      	mov	r9, r0
 80008ce:	0038      	movs	r0, r7
 80008d0:	46a8      	mov	r8, r5
 80008d2:	0c2d      	lsrs	r5, r5, #16
 80008d4:	46aa      	mov	sl, r5
 80008d6:	9a00      	ldr	r2, [sp, #0]
 80008d8:	4350      	muls	r0, r2
 80008da:	4372      	muls	r2, r6
 80008dc:	444a      	add	r2, r9
 80008de:	4452      	add	r2, sl
 80008e0:	4591      	cmp	r9, r2
 80008e2:	d903      	bls.n	80008ec <__aeabi_dmul+0x400>
 80008e4:	2580      	movs	r5, #128	@ 0x80
 80008e6:	026d      	lsls	r5, r5, #9
 80008e8:	46a9      	mov	r9, r5
 80008ea:	4448      	add	r0, r9
 80008ec:	0c15      	lsrs	r5, r2, #16
 80008ee:	46a9      	mov	r9, r5
 80008f0:	4645      	mov	r5, r8
 80008f2:	042d      	lsls	r5, r5, #16
 80008f4:	0c2d      	lsrs	r5, r5, #16
 80008f6:	46a8      	mov	r8, r5
 80008f8:	4665      	mov	r5, ip
 80008fa:	437d      	muls	r5, r7
 80008fc:	0412      	lsls	r2, r2, #16
 80008fe:	4448      	add	r0, r9
 8000900:	4490      	add	r8, r2
 8000902:	46a9      	mov	r9, r5
 8000904:	0032      	movs	r2, r6
 8000906:	4665      	mov	r5, ip
 8000908:	4362      	muls	r2, r4
 800090a:	436e      	muls	r6, r5
 800090c:	437c      	muls	r4, r7
 800090e:	0c17      	lsrs	r7, r2, #16
 8000910:	1936      	adds	r6, r6, r4
 8000912:	19bf      	adds	r7, r7, r6
 8000914:	42bc      	cmp	r4, r7
 8000916:	d903      	bls.n	8000920 <__aeabi_dmul+0x434>
 8000918:	2480      	movs	r4, #128	@ 0x80
 800091a:	0264      	lsls	r4, r4, #9
 800091c:	46a4      	mov	ip, r4
 800091e:	44e1      	add	r9, ip
 8000920:	9c02      	ldr	r4, [sp, #8]
 8000922:	9e03      	ldr	r6, [sp, #12]
 8000924:	46a4      	mov	ip, r4
 8000926:	9d05      	ldr	r5, [sp, #20]
 8000928:	4466      	add	r6, ip
 800092a:	428e      	cmp	r6, r1
 800092c:	4189      	sbcs	r1, r1
 800092e:	46ac      	mov	ip, r5
 8000930:	0412      	lsls	r2, r2, #16
 8000932:	043c      	lsls	r4, r7, #16
 8000934:	0c12      	lsrs	r2, r2, #16
 8000936:	18a2      	adds	r2, r4, r2
 8000938:	4462      	add	r2, ip
 800093a:	4249      	negs	r1, r1
 800093c:	1854      	adds	r4, r2, r1
 800093e:	4446      	add	r6, r8
 8000940:	46a4      	mov	ip, r4
 8000942:	4546      	cmp	r6, r8
 8000944:	41a4      	sbcs	r4, r4
 8000946:	4682      	mov	sl, r0
 8000948:	4264      	negs	r4, r4
 800094a:	46a0      	mov	r8, r4
 800094c:	42aa      	cmp	r2, r5
 800094e:	4192      	sbcs	r2, r2
 8000950:	458c      	cmp	ip, r1
 8000952:	4189      	sbcs	r1, r1
 8000954:	44e2      	add	sl, ip
 8000956:	44d0      	add	r8, sl
 8000958:	4249      	negs	r1, r1
 800095a:	4252      	negs	r2, r2
 800095c:	430a      	orrs	r2, r1
 800095e:	45a0      	cmp	r8, r4
 8000960:	41a4      	sbcs	r4, r4
 8000962:	4582      	cmp	sl, r0
 8000964:	4189      	sbcs	r1, r1
 8000966:	4264      	negs	r4, r4
 8000968:	4249      	negs	r1, r1
 800096a:	430c      	orrs	r4, r1
 800096c:	4641      	mov	r1, r8
 800096e:	0c3f      	lsrs	r7, r7, #16
 8000970:	19d2      	adds	r2, r2, r7
 8000972:	1912      	adds	r2, r2, r4
 8000974:	0dcc      	lsrs	r4, r1, #23
 8000976:	9904      	ldr	r1, [sp, #16]
 8000978:	0270      	lsls	r0, r6, #9
 800097a:	4308      	orrs	r0, r1
 800097c:	1e41      	subs	r1, r0, #1
 800097e:	4188      	sbcs	r0, r1
 8000980:	4641      	mov	r1, r8
 8000982:	444a      	add	r2, r9
 8000984:	0df6      	lsrs	r6, r6, #23
 8000986:	0252      	lsls	r2, r2, #9
 8000988:	4330      	orrs	r0, r6
 800098a:	0249      	lsls	r1, r1, #9
 800098c:	4314      	orrs	r4, r2
 800098e:	4308      	orrs	r0, r1
 8000990:	01d2      	lsls	r2, r2, #7
 8000992:	d535      	bpl.n	8000a00 <__aeabi_dmul+0x514>
 8000994:	2201      	movs	r2, #1
 8000996:	0843      	lsrs	r3, r0, #1
 8000998:	4002      	ands	r2, r0
 800099a:	4313      	orrs	r3, r2
 800099c:	07e0      	lsls	r0, r4, #31
 800099e:	4318      	orrs	r0, r3
 80009a0:	0864      	lsrs	r4, r4, #1
 80009a2:	e634      	b.n	800060e <__aeabi_dmul+0x122>
 80009a4:	9b00      	ldr	r3, [sp, #0]
 80009a6:	46a2      	mov	sl, r4
 80009a8:	469b      	mov	fp, r3
 80009aa:	4681      	mov	r9, r0
 80009ac:	2480      	movs	r4, #128	@ 0x80
 80009ae:	4653      	mov	r3, sl
 80009b0:	0324      	lsls	r4, r4, #12
 80009b2:	431c      	orrs	r4, r3
 80009b4:	0324      	lsls	r4, r4, #12
 80009b6:	464a      	mov	r2, r9
 80009b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000a74 <__aeabi_dmul+0x588>)
 80009ba:	0b24      	lsrs	r4, r4, #12
 80009bc:	e5ec      	b.n	8000598 <__aeabi_dmul+0xac>
 80009be:	f000 f88b 	bl	8000ad8 <__clzsi2>
 80009c2:	2315      	movs	r3, #21
 80009c4:	469c      	mov	ip, r3
 80009c6:	4484      	add	ip, r0
 80009c8:	0002      	movs	r2, r0
 80009ca:	4663      	mov	r3, ip
 80009cc:	3220      	adds	r2, #32
 80009ce:	2b1c      	cmp	r3, #28
 80009d0:	dc00      	bgt.n	80009d4 <__aeabi_dmul+0x4e8>
 80009d2:	e684      	b.n	80006de <__aeabi_dmul+0x1f2>
 80009d4:	2300      	movs	r3, #0
 80009d6:	4699      	mov	r9, r3
 80009d8:	0023      	movs	r3, r4
 80009da:	3808      	subs	r0, #8
 80009dc:	4083      	lsls	r3, r0
 80009de:	469a      	mov	sl, r3
 80009e0:	e68e      	b.n	8000700 <__aeabi_dmul+0x214>
 80009e2:	f000 f879 	bl	8000ad8 <__clzsi2>
 80009e6:	0002      	movs	r2, r0
 80009e8:	0003      	movs	r3, r0
 80009ea:	3215      	adds	r2, #21
 80009ec:	3320      	adds	r3, #32
 80009ee:	2a1c      	cmp	r2, #28
 80009f0:	dc00      	bgt.n	80009f4 <__aeabi_dmul+0x508>
 80009f2:	e64e      	b.n	8000692 <__aeabi_dmul+0x1a6>
 80009f4:	0002      	movs	r2, r0
 80009f6:	0034      	movs	r4, r6
 80009f8:	3a08      	subs	r2, #8
 80009fa:	2000      	movs	r0, #0
 80009fc:	4094      	lsls	r4, r2
 80009fe:	e652      	b.n	80006a6 <__aeabi_dmul+0x1ba>
 8000a00:	9301      	str	r3, [sp, #4]
 8000a02:	e604      	b.n	800060e <__aeabi_dmul+0x122>
 8000a04:	4b1c      	ldr	r3, [pc, #112]	@ (8000a78 <__aeabi_dmul+0x58c>)
 8000a06:	0021      	movs	r1, r4
 8000a08:	469c      	mov	ip, r3
 8000a0a:	0003      	movs	r3, r0
 8000a0c:	9d01      	ldr	r5, [sp, #4]
 8000a0e:	40d3      	lsrs	r3, r2
 8000a10:	4465      	add	r5, ip
 8000a12:	40a9      	lsls	r1, r5
 8000a14:	4319      	orrs	r1, r3
 8000a16:	0003      	movs	r3, r0
 8000a18:	40ab      	lsls	r3, r5
 8000a1a:	1e58      	subs	r0, r3, #1
 8000a1c:	4183      	sbcs	r3, r0
 8000a1e:	4319      	orrs	r1, r3
 8000a20:	0008      	movs	r0, r1
 8000a22:	40d4      	lsrs	r4, r2
 8000a24:	074b      	lsls	r3, r1, #29
 8000a26:	d009      	beq.n	8000a3c <__aeabi_dmul+0x550>
 8000a28:	230f      	movs	r3, #15
 8000a2a:	400b      	ands	r3, r1
 8000a2c:	2b04      	cmp	r3, #4
 8000a2e:	d005      	beq.n	8000a3c <__aeabi_dmul+0x550>
 8000a30:	1d0b      	adds	r3, r1, #4
 8000a32:	428b      	cmp	r3, r1
 8000a34:	4180      	sbcs	r0, r0
 8000a36:	4240      	negs	r0, r0
 8000a38:	1824      	adds	r4, r4, r0
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	0223      	lsls	r3, r4, #8
 8000a3e:	d400      	bmi.n	8000a42 <__aeabi_dmul+0x556>
 8000a40:	e6d6      	b.n	80007f0 <__aeabi_dmul+0x304>
 8000a42:	2301      	movs	r3, #1
 8000a44:	2400      	movs	r4, #0
 8000a46:	2200      	movs	r2, #0
 8000a48:	e5a6      	b.n	8000598 <__aeabi_dmul+0xac>
 8000a4a:	290f      	cmp	r1, #15
 8000a4c:	d1aa      	bne.n	80009a4 <__aeabi_dmul+0x4b8>
 8000a4e:	2380      	movs	r3, #128	@ 0x80
 8000a50:	4652      	mov	r2, sl
 8000a52:	031b      	lsls	r3, r3, #12
 8000a54:	421a      	tst	r2, r3
 8000a56:	d0a9      	beq.n	80009ac <__aeabi_dmul+0x4c0>
 8000a58:	421c      	tst	r4, r3
 8000a5a:	d1a7      	bne.n	80009ac <__aeabi_dmul+0x4c0>
 8000a5c:	431c      	orrs	r4, r3
 8000a5e:	9b00      	ldr	r3, [sp, #0]
 8000a60:	0002      	movs	r2, r0
 8000a62:	469b      	mov	fp, r3
 8000a64:	4b03      	ldr	r3, [pc, #12]	@ (8000a74 <__aeabi_dmul+0x588>)
 8000a66:	e597      	b.n	8000598 <__aeabi_dmul+0xac>
 8000a68:	2400      	movs	r4, #0
 8000a6a:	e6c1      	b.n	80007f0 <__aeabi_dmul+0x304>
 8000a6c:	2400      	movs	r4, #0
 8000a6e:	4b01      	ldr	r3, [pc, #4]	@ (8000a74 <__aeabi_dmul+0x588>)
 8000a70:	0022      	movs	r2, r4
 8000a72:	e591      	b.n	8000598 <__aeabi_dmul+0xac>
 8000a74:	000007ff 	.word	0x000007ff
 8000a78:	0000041e 	.word	0x0000041e

08000a7c <__aeabi_i2d>:
 8000a7c:	b570      	push	{r4, r5, r6, lr}
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	d016      	beq.n	8000ab0 <__aeabi_i2d+0x34>
 8000a82:	17c3      	asrs	r3, r0, #31
 8000a84:	18c5      	adds	r5, r0, r3
 8000a86:	405d      	eors	r5, r3
 8000a88:	0fc4      	lsrs	r4, r0, #31
 8000a8a:	0028      	movs	r0, r5
 8000a8c:	f000 f824 	bl	8000ad8 <__clzsi2>
 8000a90:	4b10      	ldr	r3, [pc, #64]	@ (8000ad4 <__aeabi_i2d+0x58>)
 8000a92:	1a1b      	subs	r3, r3, r0
 8000a94:	055b      	lsls	r3, r3, #21
 8000a96:	0d5b      	lsrs	r3, r3, #21
 8000a98:	280a      	cmp	r0, #10
 8000a9a:	dc14      	bgt.n	8000ac6 <__aeabi_i2d+0x4a>
 8000a9c:	0002      	movs	r2, r0
 8000a9e:	002e      	movs	r6, r5
 8000aa0:	3215      	adds	r2, #21
 8000aa2:	4096      	lsls	r6, r2
 8000aa4:	220b      	movs	r2, #11
 8000aa6:	1a12      	subs	r2, r2, r0
 8000aa8:	40d5      	lsrs	r5, r2
 8000aaa:	032d      	lsls	r5, r5, #12
 8000aac:	0b2d      	lsrs	r5, r5, #12
 8000aae:	e003      	b.n	8000ab8 <__aeabi_i2d+0x3c>
 8000ab0:	2400      	movs	r4, #0
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	2500      	movs	r5, #0
 8000ab6:	2600      	movs	r6, #0
 8000ab8:	051b      	lsls	r3, r3, #20
 8000aba:	432b      	orrs	r3, r5
 8000abc:	07e4      	lsls	r4, r4, #31
 8000abe:	4323      	orrs	r3, r4
 8000ac0:	0030      	movs	r0, r6
 8000ac2:	0019      	movs	r1, r3
 8000ac4:	bd70      	pop	{r4, r5, r6, pc}
 8000ac6:	380b      	subs	r0, #11
 8000ac8:	4085      	lsls	r5, r0
 8000aca:	032d      	lsls	r5, r5, #12
 8000acc:	2600      	movs	r6, #0
 8000ace:	0b2d      	lsrs	r5, r5, #12
 8000ad0:	e7f2      	b.n	8000ab8 <__aeabi_i2d+0x3c>
 8000ad2:	46c0      	nop			@ (mov r8, r8)
 8000ad4:	0000041e 	.word	0x0000041e

08000ad8 <__clzsi2>:
 8000ad8:	211c      	movs	r1, #28
 8000ada:	2301      	movs	r3, #1
 8000adc:	041b      	lsls	r3, r3, #16
 8000ade:	4298      	cmp	r0, r3
 8000ae0:	d301      	bcc.n	8000ae6 <__clzsi2+0xe>
 8000ae2:	0c00      	lsrs	r0, r0, #16
 8000ae4:	3910      	subs	r1, #16
 8000ae6:	0a1b      	lsrs	r3, r3, #8
 8000ae8:	4298      	cmp	r0, r3
 8000aea:	d301      	bcc.n	8000af0 <__clzsi2+0x18>
 8000aec:	0a00      	lsrs	r0, r0, #8
 8000aee:	3908      	subs	r1, #8
 8000af0:	091b      	lsrs	r3, r3, #4
 8000af2:	4298      	cmp	r0, r3
 8000af4:	d301      	bcc.n	8000afa <__clzsi2+0x22>
 8000af6:	0900      	lsrs	r0, r0, #4
 8000af8:	3904      	subs	r1, #4
 8000afa:	a202      	add	r2, pc, #8	@ (adr r2, 8000b04 <__clzsi2+0x2c>)
 8000afc:	5c10      	ldrb	r0, [r2, r0]
 8000afe:	1840      	adds	r0, r0, r1
 8000b00:	4770      	bx	lr
 8000b02:	46c0      	nop			@ (mov r8, r8)
 8000b04:	02020304 	.word	0x02020304
 8000b08:	01010101 	.word	0x01010101
	...

08000b14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	0002      	movs	r2, r0
 8000b1c:	1dfb      	adds	r3, r7, #7
 8000b1e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b20:	1dfb      	adds	r3, r7, #7
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b26:	d809      	bhi.n	8000b3c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b28:	1dfb      	adds	r3, r7, #7
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	001a      	movs	r2, r3
 8000b2e:	231f      	movs	r3, #31
 8000b30:	401a      	ands	r2, r3
 8000b32:	4b04      	ldr	r3, [pc, #16]	@ (8000b44 <__NVIC_EnableIRQ+0x30>)
 8000b34:	2101      	movs	r1, #1
 8000b36:	4091      	lsls	r1, r2
 8000b38:	000a      	movs	r2, r1
 8000b3a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000b3c:	46c0      	nop			@ (mov r8, r8)
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	b002      	add	sp, #8
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	e000e100 	.word	0xe000e100

08000b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b48:	b590      	push	{r4, r7, lr}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	0002      	movs	r2, r0
 8000b50:	6039      	str	r1, [r7, #0]
 8000b52:	1dfb      	adds	r3, r7, #7
 8000b54:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b56:	1dfb      	adds	r3, r7, #7
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b5c:	d828      	bhi.n	8000bb0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b5e:	4a2f      	ldr	r2, [pc, #188]	@ (8000c1c <__NVIC_SetPriority+0xd4>)
 8000b60:	1dfb      	adds	r3, r7, #7
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	b25b      	sxtb	r3, r3
 8000b66:	089b      	lsrs	r3, r3, #2
 8000b68:	33c0      	adds	r3, #192	@ 0xc0
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	589b      	ldr	r3, [r3, r2]
 8000b6e:	1dfa      	adds	r2, r7, #7
 8000b70:	7812      	ldrb	r2, [r2, #0]
 8000b72:	0011      	movs	r1, r2
 8000b74:	2203      	movs	r2, #3
 8000b76:	400a      	ands	r2, r1
 8000b78:	00d2      	lsls	r2, r2, #3
 8000b7a:	21ff      	movs	r1, #255	@ 0xff
 8000b7c:	4091      	lsls	r1, r2
 8000b7e:	000a      	movs	r2, r1
 8000b80:	43d2      	mvns	r2, r2
 8000b82:	401a      	ands	r2, r3
 8000b84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	019b      	lsls	r3, r3, #6
 8000b8a:	22ff      	movs	r2, #255	@ 0xff
 8000b8c:	401a      	ands	r2, r3
 8000b8e:	1dfb      	adds	r3, r7, #7
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	0018      	movs	r0, r3
 8000b94:	2303      	movs	r3, #3
 8000b96:	4003      	ands	r3, r0
 8000b98:	00db      	lsls	r3, r3, #3
 8000b9a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b9c:	481f      	ldr	r0, [pc, #124]	@ (8000c1c <__NVIC_SetPriority+0xd4>)
 8000b9e:	1dfb      	adds	r3, r7, #7
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	b25b      	sxtb	r3, r3
 8000ba4:	089b      	lsrs	r3, r3, #2
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	33c0      	adds	r3, #192	@ 0xc0
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bae:	e031      	b.n	8000c14 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bb0:	4a1b      	ldr	r2, [pc, #108]	@ (8000c20 <__NVIC_SetPriority+0xd8>)
 8000bb2:	1dfb      	adds	r3, r7, #7
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	0019      	movs	r1, r3
 8000bb8:	230f      	movs	r3, #15
 8000bba:	400b      	ands	r3, r1
 8000bbc:	3b08      	subs	r3, #8
 8000bbe:	089b      	lsrs	r3, r3, #2
 8000bc0:	3306      	adds	r3, #6
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	18d3      	adds	r3, r2, r3
 8000bc6:	3304      	adds	r3, #4
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	1dfa      	adds	r2, r7, #7
 8000bcc:	7812      	ldrb	r2, [r2, #0]
 8000bce:	0011      	movs	r1, r2
 8000bd0:	2203      	movs	r2, #3
 8000bd2:	400a      	ands	r2, r1
 8000bd4:	00d2      	lsls	r2, r2, #3
 8000bd6:	21ff      	movs	r1, #255	@ 0xff
 8000bd8:	4091      	lsls	r1, r2
 8000bda:	000a      	movs	r2, r1
 8000bdc:	43d2      	mvns	r2, r2
 8000bde:	401a      	ands	r2, r3
 8000be0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	019b      	lsls	r3, r3, #6
 8000be6:	22ff      	movs	r2, #255	@ 0xff
 8000be8:	401a      	ands	r2, r3
 8000bea:	1dfb      	adds	r3, r7, #7
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	0018      	movs	r0, r3
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	4003      	ands	r3, r0
 8000bf4:	00db      	lsls	r3, r3, #3
 8000bf6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bf8:	4809      	ldr	r0, [pc, #36]	@ (8000c20 <__NVIC_SetPriority+0xd8>)
 8000bfa:	1dfb      	adds	r3, r7, #7
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	001c      	movs	r4, r3
 8000c00:	230f      	movs	r3, #15
 8000c02:	4023      	ands	r3, r4
 8000c04:	3b08      	subs	r3, #8
 8000c06:	089b      	lsrs	r3, r3, #2
 8000c08:	430a      	orrs	r2, r1
 8000c0a:	3306      	adds	r3, #6
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	18c3      	adds	r3, r0, r3
 8000c10:	3304      	adds	r3, #4
 8000c12:	601a      	str	r2, [r3, #0]
}
 8000c14:	46c0      	nop			@ (mov r8, r8)
 8000c16:	46bd      	mov	sp, r7
 8000c18:	b003      	add	sp, #12
 8000c1a:	bd90      	pop	{r4, r7, pc}
 8000c1c:	e000e100 	.word	0xe000e100
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(const DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8000c32:	4a0b      	ldr	r2, [pc, #44]	@ (8000c60 <LL_DMA_EnableChannel+0x3c>)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	18d3      	adds	r3, r2, r3
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	001a      	movs	r2, r3
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	18d3      	adds	r3, r2, r3
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	4907      	ldr	r1, [pc, #28]	@ (8000c60 <LL_DMA_EnableChannel+0x3c>)
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	18cb      	adds	r3, r1, r3
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	0019      	movs	r1, r3
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	18cb      	adds	r3, r1, r3
 8000c50:	2101      	movs	r1, #1
 8000c52:	430a      	orrs	r2, r1
 8000c54:	601a      	str	r2, [r3, #0]
}
 8000c56:	46c0      	nop			@ (mov r8, r8)
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	b004      	add	sp, #16
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	46c0      	nop			@ (mov r8, r8)
 8000c60:	08002c14 	.word	0x08002c14

08000c64 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(const DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8000c72:	4a0b      	ldr	r2, [pc, #44]	@ (8000ca0 <LL_DMA_DisableChannel+0x3c>)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	18d3      	adds	r3, r2, r3
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	001a      	movs	r2, r3
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	18d3      	adds	r3, r2, r3
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	4907      	ldr	r1, [pc, #28]	@ (8000ca0 <LL_DMA_DisableChannel+0x3c>)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	18cb      	adds	r3, r1, r3
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	0019      	movs	r1, r3
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	18cb      	adds	r3, r1, r3
 8000c90:	2101      	movs	r1, #1
 8000c92:	438a      	bics	r2, r1
 8000c94:	601a      	str	r2, [r3, #0]
}
 8000c96:	46c0      	nop			@ (mov r8, r8)
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	b004      	add	sp, #16
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	46c0      	nop			@ (mov r8, r8)
 8000ca0:	08002c14 	.word	0x08002c14

08000ca4 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8000cb4:	4a0c      	ldr	r2, [pc, #48]	@ (8000ce8 <LL_DMA_SetDataTransferDirection+0x44>)
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	18d3      	adds	r3, r2, r3
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	001a      	movs	r2, r3
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	18d3      	adds	r3, r2, r3
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a09      	ldr	r2, [pc, #36]	@ (8000cec <LL_DMA_SetDataTransferDirection+0x48>)
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	0019      	movs	r1, r3
 8000cca:	4a07      	ldr	r2, [pc, #28]	@ (8000ce8 <LL_DMA_SetDataTransferDirection+0x44>)
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	18d3      	adds	r3, r2, r3
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	001a      	movs	r2, r3
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	18d3      	adds	r3, r2, r3
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	601a      	str	r2, [r3, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8000cde:	46c0      	nop			@ (mov r8, r8)
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	b006      	add	sp, #24
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	46c0      	nop			@ (mov r8, r8)
 8000ce8:	08002c14 	.word	0x08002c14
 8000cec:	ffffbfef 	.word	0xffffbfef

08000cf0 <LL_DMA_GetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataTransferDirection(const DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	60fb      	str	r3, [r7, #12]
  return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8000cfe:	4a07      	ldr	r2, [pc, #28]	@ (8000d1c <LL_DMA_GetDataTransferDirection+0x2c>)
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	18d3      	adds	r3, r2, r3
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	001a      	movs	r2, r3
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	18d3      	adds	r3, r2, r3
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a04      	ldr	r2, [pc, #16]	@ (8000d20 <LL_DMA_GetDataTransferDirection+0x30>)
 8000d10:	4013      	ands	r3, r2
                   DMA_CCR_DIR | DMA_CCR_MEM2MEM));
}
 8000d12:	0018      	movs	r0, r3
 8000d14:	46bd      	mov	sp, r7
 8000d16:	b004      	add	sp, #16
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	46c0      	nop			@ (mov r8, r8)
 8000d1c:	08002c14 	.word	0x08002c14
 8000d20:	00004010 	.word	0x00004010

08000d24 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8000d34:	4a0c      	ldr	r2, [pc, #48]	@ (8000d68 <LL_DMA_SetMode+0x44>)
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	18d3      	adds	r3, r2, r3
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	001a      	movs	r2, r3
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	18d3      	adds	r3, r2, r3
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2220      	movs	r2, #32
 8000d46:	4393      	bics	r3, r2
 8000d48:	0019      	movs	r1, r3
 8000d4a:	4a07      	ldr	r2, [pc, #28]	@ (8000d68 <LL_DMA_SetMode+0x44>)
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	18d3      	adds	r3, r2, r3
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	001a      	movs	r2, r3
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	18d3      	adds	r3, r2, r3
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	430a      	orrs	r2, r1
 8000d5c:	601a      	str	r2, [r3, #0]
             Mode);
}
 8000d5e:	46c0      	nop			@ (mov r8, r8)
 8000d60:	46bd      	mov	sp, r7
 8000d62:	b006      	add	sp, #24
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	46c0      	nop			@ (mov r8, r8)
 8000d68:	08002c14 	.word	0x08002c14

08000d6c <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8000d7c:	4a0c      	ldr	r2, [pc, #48]	@ (8000db0 <LL_DMA_SetPeriphIncMode+0x44>)
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	18d3      	adds	r3, r2, r3
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	001a      	movs	r2, r3
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	18d3      	adds	r3, r2, r3
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2240      	movs	r2, #64	@ 0x40
 8000d8e:	4393      	bics	r3, r2
 8000d90:	0019      	movs	r1, r3
 8000d92:	4a07      	ldr	r2, [pc, #28]	@ (8000db0 <LL_DMA_SetPeriphIncMode+0x44>)
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	18d3      	adds	r3, r2, r3
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	001a      	movs	r2, r3
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	18d3      	adds	r3, r2, r3
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	430a      	orrs	r2, r1
 8000da4:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcIncMode);
}
 8000da6:	46c0      	nop			@ (mov r8, r8)
 8000da8:	46bd      	mov	sp, r7
 8000daa:	b006      	add	sp, #24
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	46c0      	nop			@ (mov r8, r8)
 8000db0:	08002c14 	.word	0x08002c14

08000db4 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8000dc4:	4a0c      	ldr	r2, [pc, #48]	@ (8000df8 <LL_DMA_SetMemoryIncMode+0x44>)
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	18d3      	adds	r3, r2, r3
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	001a      	movs	r2, r3
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	18d3      	adds	r3, r2, r3
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2280      	movs	r2, #128	@ 0x80
 8000dd6:	4393      	bics	r3, r2
 8000dd8:	0019      	movs	r1, r3
 8000dda:	4a07      	ldr	r2, [pc, #28]	@ (8000df8 <LL_DMA_SetMemoryIncMode+0x44>)
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	18d3      	adds	r3, r2, r3
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	001a      	movs	r2, r3
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	18d3      	adds	r3, r2, r3
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	430a      	orrs	r2, r1
 8000dec:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstIncMode);
}
 8000dee:	46c0      	nop			@ (mov r8, r8)
 8000df0:	46bd      	mov	sp, r7
 8000df2:	b006      	add	sp, #24
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	46c0      	nop			@ (mov r8, r8)
 8000df8:	08002c14 	.word	0x08002c14

08000dfc <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 8000e0c:	4a0c      	ldr	r2, [pc, #48]	@ (8000e40 <LL_DMA_SetPeriphSize+0x44>)
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	18d3      	adds	r3, r2, r3
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	001a      	movs	r2, r3
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	18d3      	adds	r3, r2, r3
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a09      	ldr	r2, [pc, #36]	@ (8000e44 <LL_DMA_SetPeriphSize+0x48>)
 8000e1e:	4013      	ands	r3, r2
 8000e20:	0019      	movs	r1, r3
 8000e22:	4a07      	ldr	r2, [pc, #28]	@ (8000e40 <LL_DMA_SetPeriphSize+0x44>)
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	18d3      	adds	r3, r2, r3
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	001a      	movs	r2, r3
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	18d3      	adds	r3, r2, r3
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	430a      	orrs	r2, r1
 8000e34:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcDataSize);
}
 8000e36:	46c0      	nop			@ (mov r8, r8)
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	b006      	add	sp, #24
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	46c0      	nop			@ (mov r8, r8)
 8000e40:	08002c14 	.word	0x08002c14
 8000e44:	fffffcff 	.word	0xfffffcff

08000e48 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8000e58:	4a0c      	ldr	r2, [pc, #48]	@ (8000e8c <LL_DMA_SetMemorySize+0x44>)
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	18d3      	adds	r3, r2, r3
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	001a      	movs	r2, r3
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	18d3      	adds	r3, r2, r3
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a09      	ldr	r2, [pc, #36]	@ (8000e90 <LL_DMA_SetMemorySize+0x48>)
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	0019      	movs	r1, r3
 8000e6e:	4a07      	ldr	r2, [pc, #28]	@ (8000e8c <LL_DMA_SetMemorySize+0x44>)
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	18d3      	adds	r3, r2, r3
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	001a      	movs	r2, r3
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	18d3      	adds	r3, r2, r3
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstDataSize);
}
 8000e82:	46c0      	nop			@ (mov r8, r8)
 8000e84:	46bd      	mov	sp, r7
 8000e86:	b006      	add	sp, #24
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	46c0      	nop			@ (mov r8, r8)
 8000e8c:	08002c14 	.word	0x08002c14
 8000e90:	fffff3ff 	.word	0xfffff3ff

08000e94 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8000ea4:	4a0c      	ldr	r2, [pc, #48]	@ (8000ed8 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	18d3      	adds	r3, r2, r3
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	001a      	movs	r2, r3
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	18d3      	adds	r3, r2, r3
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a09      	ldr	r2, [pc, #36]	@ (8000edc <LL_DMA_SetChannelPriorityLevel+0x48>)
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	0019      	movs	r1, r3
 8000eba:	4a07      	ldr	r2, [pc, #28]	@ (8000ed8 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	18d3      	adds	r3, r2, r3
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	001a      	movs	r2, r3
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	18d3      	adds	r3, r2, r3
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	430a      	orrs	r2, r1
 8000ecc:	601a      	str	r2, [r3, #0]
             Priority);
}
 8000ece:	46c0      	nop			@ (mov r8, r8)
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	b006      	add	sp, #24
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	46c0      	nop			@ (mov r8, r8)
 8000ed8:	08002c14 	.word	0x08002c14
 8000edc:	ffffcfff 	.word	0xffffcfff

08000ee0 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8000ef0:	4a0b      	ldr	r2, [pc, #44]	@ (8000f20 <LL_DMA_SetDataLength+0x40>)
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	18d3      	adds	r3, r2, r3
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	001a      	movs	r2, r3
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	18d3      	adds	r3, r2, r3
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	0c1b      	lsrs	r3, r3, #16
 8000f02:	0419      	lsls	r1, r3, #16
 8000f04:	4a06      	ldr	r2, [pc, #24]	@ (8000f20 <LL_DMA_SetDataLength+0x40>)
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	18d3      	adds	r3, r2, r3
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	001a      	movs	r2, r3
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	18d3      	adds	r3, r2, r3
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	430a      	orrs	r2, r1
 8000f16:	605a      	str	r2, [r3, #4]
             DMA_CNDTR_NDT, NbData);
}
 8000f18:	46c0      	nop			@ (mov r8, r8)
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	b006      	add	sp, #24
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	08002c14 	.word	0x08002c14

08000f24 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
 8000f30:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	617b      	str	r3, [r7, #20]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8000f36:	6a3b      	ldr	r3, [r7, #32]
 8000f38:	2b10      	cmp	r3, #16
 8000f3a:	d112      	bne.n	8000f62 <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, SrcAddress);
 8000f3c:	4a14      	ldr	r2, [pc, #80]	@ (8000f90 <LL_DMA_ConfigAddresses+0x6c>)
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	18d3      	adds	r3, r2, r3
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	001a      	movs	r2, r3
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	18d3      	adds	r3, r2, r3
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	60da      	str	r2, [r3, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, DstAddress);
 8000f4e:	4a10      	ldr	r2, [pc, #64]	@ (8000f90 <LL_DMA_ConfigAddresses+0x6c>)
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	18d3      	adds	r3, r2, r3
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	001a      	movs	r2, r3
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	18d3      	adds	r3, r2, r3
 8000f5c:	683a      	ldr	r2, [r7, #0]
 8000f5e:	609a      	str	r2, [r3, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, DstAddress);
  }
}
 8000f60:	e011      	b.n	8000f86 <LL_DMA_ConfigAddresses+0x62>
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, SrcAddress);
 8000f62:	4a0b      	ldr	r2, [pc, #44]	@ (8000f90 <LL_DMA_ConfigAddresses+0x6c>)
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	18d3      	adds	r3, r2, r3
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	001a      	movs	r2, r3
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	18d3      	adds	r3, r2, r3
 8000f70:	687a      	ldr	r2, [r7, #4]
 8000f72:	609a      	str	r2, [r3, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, DstAddress);
 8000f74:	4a06      	ldr	r2, [pc, #24]	@ (8000f90 <LL_DMA_ConfigAddresses+0x6c>)
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	18d3      	adds	r3, r2, r3
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	001a      	movs	r2, r3
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	18d3      	adds	r3, r2, r3
 8000f82:	683a      	ldr	r2, [r7, #0]
 8000f84:	60da      	str	r2, [r3, #12]
}
 8000f86:	46c0      	nop			@ (mov r8, r8)
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	b006      	add	sp, #24
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	46c0      	nop			@ (mov r8, r8)
 8000f90:	08002c14 	.word	0x08002c14

08000f94 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_RX
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_TX
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Request)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	0a9b      	lsrs	r3, r3, #10
 8000fa4:	4a0f      	ldr	r2, [pc, #60]	@ (8000fe4 <LL_DMA_SetPeriphRequest+0x50>)
 8000fa6:	405a      	eors	r2, r3
 8000fa8:	0013      	movs	r3, r2
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	1a9b      	subs	r3, r3, r2
 8000fae:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8000fb0:	68ba      	ldr	r2, [r7, #8]
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	18d3      	adds	r3, r2, r3
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	4a0b      	ldr	r2, [pc, #44]	@ (8000fe8 <LL_DMA_SetPeriphRequest+0x54>)
 8000fba:	4694      	mov	ip, r2
 8000fbc:	4463      	add	r3, ip
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	223f      	movs	r2, #63	@ 0x3f
 8000fc2:	4393      	bics	r3, r2
 8000fc4:	0019      	movs	r1, r3
 8000fc6:	68ba      	ldr	r2, [r7, #8]
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	18d3      	adds	r3, r2, r3
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	4a06      	ldr	r2, [pc, #24]	@ (8000fe8 <LL_DMA_SetPeriphRequest+0x54>)
 8000fd0:	4694      	mov	ip, r2
 8000fd2:	4463      	add	r3, ip
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	601a      	str	r2, [r3, #0]
}
 8000fda:	46c0      	nop			@ (mov r8, r8)
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	b006      	add	sp, #24
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	46c0      	nop			@ (mov r8, r8)
 8000fe4:	00100080 	.word	0x00100080
 8000fe8:	40020800 	.word	0x40020800

08000fec <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(const DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 8000ffa:	4a0b      	ldr	r2, [pc, #44]	@ (8001028 <LL_DMA_EnableIT_TC+0x3c>)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	18d3      	adds	r3, r2, r3
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	001a      	movs	r2, r3
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	18d3      	adds	r3, r2, r3
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	4907      	ldr	r1, [pc, #28]	@ (8001028 <LL_DMA_EnableIT_TC+0x3c>)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	18cb      	adds	r3, r1, r3
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	0019      	movs	r1, r3
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	18cb      	adds	r3, r1, r3
 8001018:	2102      	movs	r1, #2
 800101a:	430a      	orrs	r2, r1
 800101c:	601a      	str	r2, [r3, #0]
}
 800101e:	46c0      	nop			@ (mov r8, r8)
 8001020:	46bd      	mov	sp, r7
 8001022:	b004      	add	sp, #16
 8001024:	bd80      	pop	{r7, pc}
 8001026:	46c0      	nop			@ (mov r8, r8)
 8001028:	08002c14 	.word	0x08002c14

0800102c <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(const DMA_TypeDef *DMAx, uint32_t Channel)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TEIE);
 800103a:	4a0b      	ldr	r2, [pc, #44]	@ (8001068 <LL_DMA_EnableIT_TE+0x3c>)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	18d3      	adds	r3, r2, r3
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	001a      	movs	r2, r3
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	18d3      	adds	r3, r2, r3
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	4907      	ldr	r1, [pc, #28]	@ (8001068 <LL_DMA_EnableIT_TE+0x3c>)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	18cb      	adds	r3, r1, r3
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	0019      	movs	r1, r3
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	18cb      	adds	r3, r1, r3
 8001058:	2108      	movs	r1, #8
 800105a:	430a      	orrs	r2, r1
 800105c:	601a      	str	r2, [r3, #0]
}
 800105e:	46c0      	nop			@ (mov r8, r8)
 8001060:	46bd      	mov	sp, r7
 8001062:	b004      	add	sp, #16
 8001064:	bd80      	pop	{r7, pc}
 8001066:	46c0      	nop			@ (mov r8, r8)
 8001068:	08002c14 	.word	0x08002c14

0800106c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001070:	4b04      	ldr	r3, [pc, #16]	@ (8001084 <LL_RCC_HSI_Enable+0x18>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4b03      	ldr	r3, [pc, #12]	@ (8001084 <LL_RCC_HSI_Enable+0x18>)
 8001076:	2180      	movs	r1, #128	@ 0x80
 8001078:	0049      	lsls	r1, r1, #1
 800107a:	430a      	orrs	r2, r1
 800107c:	601a      	str	r2, [r3, #0]
}
 800107e:	46c0      	nop			@ (mov r8, r8)
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40021000 	.word	0x40021000

08001088 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800108c:	4b07      	ldr	r3, [pc, #28]	@ (80010ac <LL_RCC_HSI_IsReady+0x24>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	2380      	movs	r3, #128	@ 0x80
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	401a      	ands	r2, r3
 8001096:	2380      	movs	r3, #128	@ 0x80
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	429a      	cmp	r2, r3
 800109c:	d101      	bne.n	80010a2 <LL_RCC_HSI_IsReady+0x1a>
 800109e:	2301      	movs	r3, #1
 80010a0:	e000      	b.n	80010a4 <LL_RCC_HSI_IsReady+0x1c>
 80010a2:	2300      	movs	r3, #0
}
 80010a4:	0018      	movs	r0, r3
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	46c0      	nop			@ (mov r8, r8)
 80010ac:	40021000 	.word	0x40021000

080010b0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80010b8:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <LL_RCC_SetSysClkSource+0x24>)
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	2207      	movs	r2, #7
 80010be:	4393      	bics	r3, r2
 80010c0:	0019      	movs	r1, r3
 80010c2:	4b04      	ldr	r3, [pc, #16]	@ (80010d4 <LL_RCC_SetSysClkSource+0x24>)
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	430a      	orrs	r2, r1
 80010c8:	609a      	str	r2, [r3, #8]
}
 80010ca:	46c0      	nop			@ (mov r8, r8)
 80010cc:	46bd      	mov	sp, r7
 80010ce:	b002      	add	sp, #8
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	46c0      	nop			@ (mov r8, r8)
 80010d4:	40021000 	.word	0x40021000

080010d8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80010dc:	4b03      	ldr	r3, [pc, #12]	@ (80010ec <LL_RCC_GetSysClkSource+0x14>)
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	2238      	movs	r2, #56	@ 0x38
 80010e2:	4013      	ands	r3, r2
}
 80010e4:	0018      	movs	r0, r3
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	46c0      	nop			@ (mov r8, r8)
 80010ec:	40021000 	.word	0x40021000

080010f0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80010f8:	4b06      	ldr	r3, [pc, #24]	@ (8001114 <LL_RCC_SetAHBPrescaler+0x24>)
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	4a06      	ldr	r2, [pc, #24]	@ (8001118 <LL_RCC_SetAHBPrescaler+0x28>)
 80010fe:	4013      	ands	r3, r2
 8001100:	0019      	movs	r1, r3
 8001102:	4b04      	ldr	r3, [pc, #16]	@ (8001114 <LL_RCC_SetAHBPrescaler+0x24>)
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	430a      	orrs	r2, r1
 8001108:	609a      	str	r2, [r3, #8]
}
 800110a:	46c0      	nop			@ (mov r8, r8)
 800110c:	46bd      	mov	sp, r7
 800110e:	b002      	add	sp, #8
 8001110:	bd80      	pop	{r7, pc}
 8001112:	46c0      	nop			@ (mov r8, r8)
 8001114:	40021000 	.word	0x40021000
 8001118:	fffff0ff 	.word	0xfffff0ff

0800111c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8001124:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	4a06      	ldr	r2, [pc, #24]	@ (8001144 <LL_RCC_SetAPB1Prescaler+0x28>)
 800112a:	4013      	ands	r3, r2
 800112c:	0019      	movs	r1, r3
 800112e:	4b04      	ldr	r3, [pc, #16]	@ (8001140 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	430a      	orrs	r2, r1
 8001134:	609a      	str	r2, [r3, #8]
}
 8001136:	46c0      	nop			@ (mov r8, r8)
 8001138:	46bd      	mov	sp, r7
 800113a:	b002      	add	sp, #8
 800113c:	bd80      	pop	{r7, pc}
 800113e:	46c0      	nop			@ (mov r8, r8)
 8001140:	40021000 	.word	0x40021000
 8001144:	ffff8fff 	.word	0xffff8fff

08001148 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8001150:	4b08      	ldr	r3, [pc, #32]	@ (8001174 <LL_RCC_SetUSARTClockSource+0x2c>)
 8001152:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	0c12      	lsrs	r2, r2, #16
 8001158:	43d2      	mvns	r2, r2
 800115a:	401a      	ands	r2, r3
 800115c:	0011      	movs	r1, r2
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	041b      	lsls	r3, r3, #16
 8001162:	0c1a      	lsrs	r2, r3, #16
 8001164:	4b03      	ldr	r3, [pc, #12]	@ (8001174 <LL_RCC_SetUSARTClockSource+0x2c>)
 8001166:	430a      	orrs	r2, r1
 8001168:	655a      	str	r2, [r3, #84]	@ 0x54
}
 800116a:	46c0      	nop			@ (mov r8, r8)
 800116c:	46bd      	mov	sp, r7
 800116e:	b002      	add	sp, #8
 8001170:	bd80      	pop	{r7, pc}
 8001172:	46c0      	nop			@ (mov r8, r8)
 8001174:	40021000 	.word	0x40021000

08001178 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800117c:	4b04      	ldr	r3, [pc, #16]	@ (8001190 <LL_RCC_PLL_Enable+0x18>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b03      	ldr	r3, [pc, #12]	@ (8001190 <LL_RCC_PLL_Enable+0x18>)
 8001182:	2180      	movs	r1, #128	@ 0x80
 8001184:	0449      	lsls	r1, r1, #17
 8001186:	430a      	orrs	r2, r1
 8001188:	601a      	str	r2, [r3, #0]
}
 800118a:	46c0      	nop			@ (mov r8, r8)
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40021000 	.word	0x40021000

08001194 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001198:	4b07      	ldr	r3, [pc, #28]	@ (80011b8 <LL_RCC_PLL_IsReady+0x24>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	2380      	movs	r3, #128	@ 0x80
 800119e:	049b      	lsls	r3, r3, #18
 80011a0:	401a      	ands	r2, r3
 80011a2:	2380      	movs	r3, #128	@ 0x80
 80011a4:	049b      	lsls	r3, r3, #18
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d101      	bne.n	80011ae <LL_RCC_PLL_IsReady+0x1a>
 80011aa:	2301      	movs	r3, #1
 80011ac:	e000      	b.n	80011b0 <LL_RCC_PLL_IsReady+0x1c>
 80011ae:	2300      	movs	r3, #0
}
 80011b0:	0018      	movs	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	46c0      	nop			@ (mov r8, r8)
 80011b8:	40021000 	.word	0x40021000

080011bc <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
 80011c8:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80011ca:	4b0a      	ldr	r3, [pc, #40]	@ (80011f4 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80011cc:	68db      	ldr	r3, [r3, #12]
 80011ce:	4a0a      	ldr	r2, [pc, #40]	@ (80011f8 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80011d0:	4013      	ands	r3, r2
 80011d2:	0019      	movs	r1, r3
 80011d4:	68fa      	ldr	r2, [r7, #12]
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	431a      	orrs	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	021b      	lsls	r3, r3, #8
 80011de:	431a      	orrs	r2, r3
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	431a      	orrs	r2, r3
 80011e4:	4b03      	ldr	r3, [pc, #12]	@ (80011f4 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80011e6:	430a      	orrs	r2, r1
 80011e8:	60da      	str	r2, [r3, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 80011ea:	46c0      	nop			@ (mov r8, r8)
 80011ec:	46bd      	mov	sp, r7
 80011ee:	b004      	add	sp, #16
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	46c0      	nop			@ (mov r8, r8)
 80011f4:	40021000 	.word	0x40021000
 80011f8:	1fff808c 	.word	0x1fff808c

080011fc <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8001200:	4b04      	ldr	r3, [pc, #16]	@ (8001214 <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 8001202:	68da      	ldr	r2, [r3, #12]
 8001204:	4b03      	ldr	r3, [pc, #12]	@ (8001214 <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 8001206:	2180      	movs	r1, #128	@ 0x80
 8001208:	0549      	lsls	r1, r1, #21
 800120a:	430a      	orrs	r2, r1
 800120c:	60da      	str	r2, [r3, #12]
}
 800120e:	46c0      	nop			@ (mov r8, r8)
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40021000 	.word	0x40021000

08001218 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_RNG  (*)
  * @note   (*) RNG & CRYP Peripherals available only on STM32G081xx
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001220:	4b07      	ldr	r3, [pc, #28]	@ (8001240 <LL_AHB1_GRP1_EnableClock+0x28>)
 8001222:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001224:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <LL_AHB1_GRP1_EnableClock+0x28>)
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	430a      	orrs	r2, r1
 800122a:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800122c:	4b04      	ldr	r3, [pc, #16]	@ (8001240 <LL_AHB1_GRP1_EnableClock+0x28>)
 800122e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	4013      	ands	r3, r2
 8001234:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001236:	68fb      	ldr	r3, [r7, #12]
}
 8001238:	46c0      	nop			@ (mov r8, r8)
 800123a:	46bd      	mov	sp, r7
 800123c:	b004      	add	sp, #16
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40021000 	.word	0x40021000

08001244 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 800124c:	4b07      	ldr	r3, [pc, #28]	@ (800126c <LL_APB1_GRP1_EnableClock+0x28>)
 800124e:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001250:	4b06      	ldr	r3, [pc, #24]	@ (800126c <LL_APB1_GRP1_EnableClock+0x28>)
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	430a      	orrs	r2, r1
 8001256:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8001258:	4b04      	ldr	r3, [pc, #16]	@ (800126c <LL_APB1_GRP1_EnableClock+0x28>)
 800125a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	4013      	ands	r3, r2
 8001260:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001262:	68fb      	ldr	r3, [r7, #12]
}
 8001264:	46c0      	nop			@ (mov r8, r8)
 8001266:	46bd      	mov	sp, r7
 8001268:	b004      	add	sp, #16
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40021000 	.word	0x40021000

08001270 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_ADC
  * @note (*) peripheral not available on all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR2, Periphs);
 8001278:	4b07      	ldr	r3, [pc, #28]	@ (8001298 <LL_APB2_GRP1_EnableClock+0x28>)
 800127a:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800127c:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <LL_APB2_GRP1_EnableClock+0x28>)
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	430a      	orrs	r2, r1
 8001282:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8001284:	4b04      	ldr	r3, [pc, #16]	@ (8001298 <LL_APB2_GRP1_EnableClock+0x28>)
 8001286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	4013      	ands	r3, r2
 800128c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800128e:	68fb      	ldr	r3, [r7, #12]
}
 8001290:	46c0      	nop			@ (mov r8, r8)
 8001292:	46bd      	mov	sp, r7
 8001294:	b004      	add	sp, #16
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40021000 	.word	0x40021000

0800129c <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 80012a4:	4b07      	ldr	r3, [pc, #28]	@ (80012c4 <LL_IOP_GRP1_EnableClock+0x28>)
 80012a6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80012a8:	4b06      	ldr	r3, [pc, #24]	@ (80012c4 <LL_IOP_GRP1_EnableClock+0x28>)
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	430a      	orrs	r2, r1
 80012ae:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80012b0:	4b04      	ldr	r3, [pc, #16]	@ (80012c4 <LL_IOP_GRP1_EnableClock+0x28>)
 80012b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	4013      	ands	r3, r2
 80012b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012ba:	68fb      	ldr	r3, [r7, #12]
}
 80012bc:	46c0      	nop			@ (mov r8, r8)
 80012be:	46bd      	mov	sp, r7
 80012c0:	b004      	add	sp, #16
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40021000 	.word	0x40021000

080012c8 <LL_SYSCFG_DisableDBATT>:
  *         @arg @ref LL_SYSCFG_UCPD2_STROBE
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_DisableDBATT(uint32_t ConfigDeadBattery)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigDeadBattery);
 80012d0:	4b04      	ldr	r3, [pc, #16]	@ (80012e4 <LL_SYSCFG_DisableDBATT+0x1c>)
 80012d2:	6819      	ldr	r1, [r3, #0]
 80012d4:	4b03      	ldr	r3, [pc, #12]	@ (80012e4 <LL_SYSCFG_DisableDBATT+0x1c>)
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	430a      	orrs	r2, r1
 80012da:	601a      	str	r2, [r3, #0]
}
 80012dc:	46c0      	nop			@ (mov r8, r8)
 80012de:	46bd      	mov	sp, r7
 80012e0:	b002      	add	sp, #8
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40010000 	.word	0x40010000

080012e8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80012f0:	4b06      	ldr	r3, [pc, #24]	@ (800130c <LL_FLASH_SetLatency+0x24>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2207      	movs	r2, #7
 80012f6:	4393      	bics	r3, r2
 80012f8:	0019      	movs	r1, r3
 80012fa:	4b04      	ldr	r3, [pc, #16]	@ (800130c <LL_FLASH_SetLatency+0x24>)
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	430a      	orrs	r2, r1
 8001300:	601a      	str	r2, [r3, #0]
}
 8001302:	46c0      	nop			@ (mov r8, r8)
 8001304:	46bd      	mov	sp, r7
 8001306:	b002      	add	sp, #8
 8001308:	bd80      	pop	{r7, pc}
 800130a:	46c0      	nop			@ (mov r8, r8)
 800130c:	40022000 	.word	0x40022000

08001310 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001318:	4a05      	ldr	r2, [pc, #20]	@ (8001330 <LL_EXTI_EnableIT_0_31+0x20>)
 800131a:	2380      	movs	r3, #128	@ 0x80
 800131c:	58d2      	ldr	r2, [r2, r3]
 800131e:	4904      	ldr	r1, [pc, #16]	@ (8001330 <LL_EXTI_EnableIT_0_31+0x20>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4313      	orrs	r3, r2
 8001324:	2280      	movs	r2, #128	@ 0x80
 8001326:	508b      	str	r3, [r1, r2]
}
 8001328:	46c0      	nop			@ (mov r8, r8)
 800132a:	46bd      	mov	sp, r7
 800132c:	b002      	add	sp, #8
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40021800 	.word	0x40021800

08001334 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800133c:	4b04      	ldr	r3, [pc, #16]	@ (8001350 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 800133e:	6859      	ldr	r1, [r3, #4]
 8001340:	4b03      	ldr	r3, [pc, #12]	@ (8001350 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	430a      	orrs	r2, r1
 8001346:	605a      	str	r2, [r3, #4]
}
 8001348:	46c0      	nop			@ (mov r8, r8)
 800134a:	46bd      	mov	sp, r7
 800134c:	b002      	add	sp, #8
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40021800 	.word	0x40021800

08001354 <LL_EXTI_SetEXTISource>:
  *         @arg @ref LL_EXTI_CONFIG_LINE14
  *         @arg @ref LL_EXTI_CONFIG_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001354:	b590      	push	{r4, r7, lr}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(EXTI->EXTICR[Line & 0x03u], EXTI_EXTICR1_EXTI0 << (Line >> LL_EXTI_REGISTER_PINPOS_SHFT), Port << (Line >> LL_EXTI_REGISTER_PINPOS_SHFT));
 800135e:	4a0f      	ldr	r2, [pc, #60]	@ (800139c <LL_EXTI_SetEXTISource+0x48>)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	2103      	movs	r1, #3
 8001364:	400b      	ands	r3, r1
 8001366:	3318      	adds	r3, #24
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	589b      	ldr	r3, [r3, r2]
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	0c12      	lsrs	r2, r2, #16
 8001370:	2107      	movs	r1, #7
 8001372:	4091      	lsls	r1, r2
 8001374:	000a      	movs	r2, r1
 8001376:	43d2      	mvns	r2, r2
 8001378:	401a      	ands	r2, r3
 800137a:	0011      	movs	r1, r2
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	0c1b      	lsrs	r3, r3, #16
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	409a      	lsls	r2, r3
 8001384:	4805      	ldr	r0, [pc, #20]	@ (800139c <LL_EXTI_SetEXTISource+0x48>)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	2403      	movs	r4, #3
 800138a:	4023      	ands	r3, r4
 800138c:	430a      	orrs	r2, r1
 800138e:	3318      	adds	r3, #24
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	501a      	str	r2, [r3, r0]
}
 8001394:	46c0      	nop			@ (mov r8, r8)
 8001396:	46bd      	mov	sp, r7
 8001398:	b003      	add	sp, #12
 800139a:	bd90      	pop	{r4, r7, pc}
 800139c:	40021800 	.word	0x40021800

080013a0 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2201      	movs	r2, #1
 80013ae:	431a      	orrs	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	601a      	str	r2, [r3, #0]
}
 80013b4:	46c0      	nop			@ (mov r8, r8)
 80013b6:	46bd      	mov	sp, r7
 80013b8:	b002      	add	sp, #8
 80013ba:	bd80      	pop	{r7, pc}

080013bc <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a03      	ldr	r2, [pc, #12]	@ (80013d8 <LL_USART_DisableFIFO+0x1c>)
 80013ca:	401a      	ands	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	601a      	str	r2, [r3, #0]
}
 80013d0:	46c0      	nop			@ (mov r8, r8)
 80013d2:	46bd      	mov	sp, r7
 80013d4:	b002      	add	sp, #8
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	dfffffff 	.word	0xdfffffff

080013dc <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013e6:	f3ef 8310 	mrs	r3, PRIMASK
 80013ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80013ec:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	2301      	movs	r3, #1
 80013f2:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f383 8810 	msr	PRIMASK, r3
}
 80013fa:	46c0      	nop			@ (mov r8, r8)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	08da      	lsrs	r2, r3, #3
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	075b      	lsls	r3, r3, #29
 8001408:	431a      	orrs	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	f383 8810 	msr	PRIMASK, r3
}
 8001418:	46c0      	nop			@ (mov r8, r8)
}
 800141a:	46c0      	nop			@ (mov r8, r8)
 800141c:	46bd      	mov	sp, r7
 800141e:	b006      	add	sp, #24
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800142e:	f3ef 8310 	mrs	r3, PRIMASK
 8001432:	60bb      	str	r3, [r7, #8]
  return(result);
 8001434:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8001436:	617b      	str	r3, [r7, #20]
 8001438:	2301      	movs	r3, #1
 800143a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f383 8810 	msr	PRIMASK, r3
}
 8001442:	46c0      	nop			@ (mov r8, r8)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	4a08      	ldr	r2, [pc, #32]	@ (800146c <LL_USART_SetRXFIFOThreshold+0x48>)
 800144a:	401a      	ands	r2, r3
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	065b      	lsls	r3, r3, #25
 8001450:	431a      	orrs	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	f383 8810 	msr	PRIMASK, r3
}
 8001460:	46c0      	nop			@ (mov r8, r8)
}
 8001462:	46c0      	nop			@ (mov r8, r8)
 8001464:	46bd      	mov	sp, r7
 8001466:	b006      	add	sp, #24
 8001468:	bd80      	pop	{r7, pc}
 800146a:	46c0      	nop			@ (mov r8, r8)
 800146c:	f1ffffff 	.word	0xf1ffffff

08001470 <LL_USART_EnableRxTimeout>:
  * @rmtoll CR2          RTOEN         LL_USART_EnableRxTimeout
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableRxTimeout(USART_TypeDef *USARTx)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR2, USART_CR2_RTOEN);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	2280      	movs	r2, #128	@ 0x80
 800147e:	0412      	lsls	r2, r2, #16
 8001480:	431a      	orrs	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	605a      	str	r2, [r3, #4]
}
 8001486:	46c0      	nop			@ (mov r8, r8)
 8001488:	46bd      	mov	sp, r7
 800148a:	b002      	add	sp, #8
 800148c:	bd80      	pop	{r7, pc}

0800148e <LL_USART_SetRxTimeout>:
  * @param  USARTx USART Instance
  * @param  Timeout Value between Min_Data=0x00 and Max_Data=0x00FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRxTimeout(USART_TypeDef *USARTx, uint32_t Timeout)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
 8001496:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->RTOR, USART_RTOR_RTO, Timeout);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	695b      	ldr	r3, [r3, #20]
 800149c:	0e1b      	lsrs	r3, r3, #24
 800149e:	061a      	lsls	r2, r3, #24
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	431a      	orrs	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	615a      	str	r2, [r3, #20]
}
 80014a8:	46c0      	nop			@ (mov r8, r8)
 80014aa:	46bd      	mov	sp, r7
 80014ac:	b002      	add	sp, #8
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	4a07      	ldr	r2, [pc, #28]	@ (80014dc <LL_USART_ConfigAsyncMode+0x2c>)
 80014be:	401a      	ands	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	222a      	movs	r2, #42	@ 0x2a
 80014ca:	4393      	bics	r3, r2
 80014cc:	001a      	movs	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	609a      	str	r2, [r3, #8]
}
 80014d2:	46c0      	nop			@ (mov r8, r8)
 80014d4:	46bd      	mov	sp, r7
 80014d6:	b002      	add	sp, #8
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	46c0      	nop			@ (mov r8, r8)
 80014dc:	ffffb7ff 	.word	0xffffb7ff

080014e0 <LL_USART_IsActiveFlag_RTO>:
  * @rmtoll ISR          RTOF          LL_USART_IsActiveFlag_RTO
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RTO(const USART_TypeDef *USARTx)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RTOF) == (USART_ISR_RTOF)) ? 1UL : 0UL);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	69da      	ldr	r2, [r3, #28]
 80014ec:	2380      	movs	r3, #128	@ 0x80
 80014ee:	011b      	lsls	r3, r3, #4
 80014f0:	401a      	ands	r2, r3
 80014f2:	2380      	movs	r3, #128	@ 0x80
 80014f4:	011b      	lsls	r3, r3, #4
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d101      	bne.n	80014fe <LL_USART_IsActiveFlag_RTO+0x1e>
 80014fa:	2301      	movs	r3, #1
 80014fc:	e000      	b.n	8001500 <LL_USART_IsActiveFlag_RTO+0x20>
 80014fe:	2300      	movs	r3, #0
}
 8001500:	0018      	movs	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	b002      	add	sp, #8
 8001506:	bd80      	pop	{r7, pc}

08001508 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(const USART_TypeDef *USARTx)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	69da      	ldr	r2, [r3, #28]
 8001514:	2380      	movs	r3, #128	@ 0x80
 8001516:	039b      	lsls	r3, r3, #14
 8001518:	401a      	ands	r2, r3
 800151a:	2380      	movs	r3, #128	@ 0x80
 800151c:	039b      	lsls	r3, r3, #14
 800151e:	429a      	cmp	r2, r3
 8001520:	d101      	bne.n	8001526 <LL_USART_IsActiveFlag_TEACK+0x1e>
 8001522:	2301      	movs	r3, #1
 8001524:	e000      	b.n	8001528 <LL_USART_IsActiveFlag_TEACK+0x20>
 8001526:	2300      	movs	r3, #0
}
 8001528:	0018      	movs	r0, r3
 800152a:	46bd      	mov	sp, r7
 800152c:	b002      	add	sp, #8
 800152e:	bd80      	pop	{r7, pc}

08001530 <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(const USART_TypeDef *USARTx)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	69da      	ldr	r2, [r3, #28]
 800153c:	2380      	movs	r3, #128	@ 0x80
 800153e:	03db      	lsls	r3, r3, #15
 8001540:	401a      	ands	r2, r3
 8001542:	2380      	movs	r3, #128	@ 0x80
 8001544:	03db      	lsls	r3, r3, #15
 8001546:	429a      	cmp	r2, r3
 8001548:	d101      	bne.n	800154e <LL_USART_IsActiveFlag_REACK+0x1e>
 800154a:	2301      	movs	r3, #1
 800154c:	e000      	b.n	8001550 <LL_USART_IsActiveFlag_REACK+0x20>
 800154e:	2300      	movs	r3, #0
}
 8001550:	0018      	movs	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	b002      	add	sp, #8
 8001556:	bd80      	pop	{r7, pc}

08001558 <LL_USART_ClearFlag_PE>:
  * @rmtoll ICR          PECF          LL_USART_ClearFlag_PE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_PE(USART_TypeDef *USARTx)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2201      	movs	r2, #1
 8001564:	621a      	str	r2, [r3, #32]
}
 8001566:	46c0      	nop			@ (mov r8, r8)
 8001568:	46bd      	mov	sp, r7
 800156a:	b002      	add	sp, #8
 800156c:	bd80      	pop	{r7, pc}

0800156e <LL_USART_ClearFlag_FE>:
  * @rmtoll ICR          FECF          LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2202      	movs	r2, #2
 800157a:	621a      	str	r2, [r3, #32]
}
 800157c:	46c0      	nop			@ (mov r8, r8)
 800157e:	46bd      	mov	sp, r7
 8001580:	b002      	add	sp, #8
 8001582:	bd80      	pop	{r7, pc}

08001584 <LL_USART_ClearFlag_NE>:
  * @rmtoll ICR          NECF          LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2204      	movs	r2, #4
 8001590:	621a      	str	r2, [r3, #32]
}
 8001592:	46c0      	nop			@ (mov r8, r8)
 8001594:	46bd      	mov	sp, r7
 8001596:	b002      	add	sp, #8
 8001598:	bd80      	pop	{r7, pc}

0800159a <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2208      	movs	r2, #8
 80015a6:	621a      	str	r2, [r3, #32]
}
 80015a8:	46c0      	nop			@ (mov r8, r8)
 80015aa:	46bd      	mov	sp, r7
 80015ac:	b002      	add	sp, #8
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <LL_USART_ClearFlag_RTO>:
  * @rmtoll ICR          RTOCF         LL_USART_ClearFlag_RTO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_RTO(USART_TypeDef *USARTx)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_RTOCF);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2280      	movs	r2, #128	@ 0x80
 80015bc:	0112      	lsls	r2, r2, #4
 80015be:	621a      	str	r2, [r3, #32]
}
 80015c0:	46c0      	nop			@ (mov r8, r8)
 80015c2:	46bd      	mov	sp, r7
 80015c4:	b002      	add	sp, #8
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <LL_USART_EnableIT_RTO>:
  * @rmtoll CR1          RTOIE         LL_USART_EnableIT_RTO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RTO(USART_TypeDef *USARTx)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80015d0:	f3ef 8310 	mrs	r3, PRIMASK
 80015d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80015d6:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RTOIE);
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	2301      	movs	r3, #1
 80015dc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	f383 8810 	msr	PRIMASK, r3
}
 80015e4:	46c0      	nop			@ (mov r8, r8)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2280      	movs	r2, #128	@ 0x80
 80015ec:	04d2      	lsls	r2, r2, #19
 80015ee:	431a      	orrs	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	f383 8810 	msr	PRIMASK, r3
}
 80015fe:	46c0      	nop			@ (mov r8, r8)
}
 8001600:	46c0      	nop			@ (mov r8, r8)
 8001602:	46bd      	mov	sp, r7
 8001604:	b006      	add	sp, #24
 8001606:	bd80      	pop	{r7, pc}

08001608 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001610:	f3ef 8310 	mrs	r3, PRIMASK
 8001614:	60bb      	str	r3, [r7, #8]
  return(result);
 8001616:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	2301      	movs	r3, #1
 800161c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f383 8810 	msr	PRIMASK, r3
}
 8001624:	46c0      	nop			@ (mov r8, r8)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	2240      	movs	r2, #64	@ 0x40
 800162c:	431a      	orrs	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	609a      	str	r2, [r3, #8]
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	f383 8810 	msr	PRIMASK, r3
}
 800163c:	46c0      	nop			@ (mov r8, r8)
}
 800163e:	46c0      	nop			@ (mov r8, r8)
 8001640:	46bd      	mov	sp, r7
 8001642:	b006      	add	sp, #24
 8001644:	bd80      	pop	{r7, pc}

08001646 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(const USART_TypeDef *USARTx, uint32_t Direction)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b084      	sub	sp, #16
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
 800164e:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d103      	bne.n	800165e <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	3328      	adds	r3, #40	@ 0x28
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	e002      	b.n	8001664 <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	3324      	adds	r3, #36	@ 0x24
 8001662:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 8001664:	68fb      	ldr	r3, [r7, #12]
}
 8001666:	0018      	movs	r0, r3
 8001668:	46bd      	mov	sp, r7
 800166a:	b004      	add	sp, #16
 800166c:	bd80      	pop	{r7, pc}

0800166e <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b084      	sub	sp, #16
 8001672:	af00      	add	r7, sp, #0
 8001674:	60f8      	str	r0, [r7, #12]
 8001676:	60b9      	str	r1, [r7, #8]
 8001678:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6819      	ldr	r1, [r3, #0]
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	435b      	muls	r3, r3
 8001682:	001a      	movs	r2, r3
 8001684:	0013      	movs	r3, r2
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	189b      	adds	r3, r3, r2
 800168a:	43db      	mvns	r3, r3
 800168c:	400b      	ands	r3, r1
 800168e:	001a      	movs	r2, r3
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	435b      	muls	r3, r3
 8001694:	6879      	ldr	r1, [r7, #4]
 8001696:	434b      	muls	r3, r1
 8001698:	431a      	orrs	r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	601a      	str	r2, [r3, #0]
}
 800169e:	46c0      	nop			@ (mov r8, r8)
 80016a0:	46bd      	mov	sp, r7
 80016a2:	b004      	add	sp, #16
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b084      	sub	sp, #16
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	60f8      	str	r0, [r7, #12]
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	68d9      	ldr	r1, [r3, #12]
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	435b      	muls	r3, r3
 80016ba:	001a      	movs	r2, r3
 80016bc:	0013      	movs	r3, r2
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	189b      	adds	r3, r3, r2
 80016c2:	43db      	mvns	r3, r3
 80016c4:	400b      	ands	r3, r1
 80016c6:	001a      	movs	r2, r3
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	435b      	muls	r3, r3
 80016cc:	6879      	ldr	r1, [r7, #4]
 80016ce:	434b      	muls	r3, r1
 80016d0:	431a      	orrs	r2, r3
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	60da      	str	r2, [r3, #12]
}
 80016d6:	46c0      	nop			@ (mov r8, r8)
 80016d8:	46bd      	mov	sp, r7
 80016da:	b004      	add	sp, #16
 80016dc:	bd80      	pop	{r7, pc}

080016de <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
 80016e6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	619a      	str	r2, [r3, #24]
}
 80016ee:	46c0      	nop			@ (mov r8, r8)
 80016f0:	46bd      	mov	sp, r7
 80016f2:	b002      	add	sp, #8
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b082      	sub	sp, #8
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
 80016fe:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	683a      	ldr	r2, [r7, #0]
 8001704:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001706:	46c0      	nop			@ (mov r8, r8)
 8001708:	46bd      	mov	sp, r7
 800170a:	b002      	add	sp, #8
 800170c:	bd80      	pop	{r7, pc}

0800170e <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b084      	sub	sp, #16
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
 8001716:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	695b      	ldr	r3, [r3, #20]
 800171c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	4013      	ands	r3, r2
 8001724:	041a      	lsls	r2, r3, #16
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	43db      	mvns	r3, r3
 800172a:	6839      	ldr	r1, [r7, #0]
 800172c:	400b      	ands	r3, r1
 800172e:	431a      	orrs	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	619a      	str	r2, [r3, #24]
}
 8001734:	46c0      	nop			@ (mov r8, r8)
 8001736:	46bd      	mov	sp, r7
 8001738:	b004      	add	sp, #16
 800173a:	bd80      	pop	{r7, pc}

0800173c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800173c:	b5b0      	push	{r4, r5, r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001742:	2001      	movs	r0, #1
 8001744:	f7ff fd94 	bl	8001270 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001748:	2380      	movs	r3, #128	@ 0x80
 800174a:	055b      	lsls	r3, r3, #21
 800174c:	0018      	movs	r0, r3
 800174e:	f7ff fd79 	bl	8001244 <LL_APB1_GRP1_EnableClock>

  /* SysTick_IRQn interrupt configuration */

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  LL_SYSCFG_DisableDBATT(LL_SYSCFG_UCPD1_STROBE | LL_SYSCFG_UCPD2_STROBE);
 8001752:	23c0      	movs	r3, #192	@ 0xc0
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	0018      	movs	r0, r3
 8001758:	f7ff fdb6 	bl	80012c8 <LL_SYSCFG_DisableDBATT>
  /* USER CODE BEGIN Init */
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800175c:	f000 f83a 	bl	80017d4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* Initialize User push-button in EXTI mode */
   UserButton_Init();
 8001760:	f000 f9f0 	bl	8001b44 <UserButton_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001764:	f000 f9c1 	bl	8001aea <MX_GPIO_Init>
  MX_DMA_Init();
 8001768:	f000 f9b0 	bl	8001acc <MX_DMA_Init>
  MX_USART1_UART_Init();
 800176c:	f000 f86c 	bl	8001848 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /*Wait for User push-button to start receive data*/
  WaitForUserButtonPress();
 8001770:	f000 fa3e 	bl	8001bf0 <WaitForUserButtonPress>

  StartTransfer(); // Enable DMA and its RX Channel
 8001774:	f000 fa54 	bl	8001c20 <StartTransfer>

  ExecuteTasksAndDisableChannel(); // When data is received, execute the tasks and close the channel
 8001778:	f000 fa64 	bl	8001c44 <ExecuteTasksAndDisableChannel>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 ResetFlags();
 800177c:	f000 fa90 	bl	8001ca0 <ResetFlags>
	 // Start the recursion
	/* Configure the DMA functional parameters for reception */
	LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_2,
 8001780:	4b10      	ldr	r3, [pc, #64]	@ (80017c4 <main+0x88>)
 8001782:	2101      	movs	r1, #1
 8001784:	0018      	movs	r0, r3
 8001786:	f7ff ff5e 	bl	8001646 <LL_USART_DMA_GetRegAddr>
 800178a:	0005      	movs	r5, r0
 800178c:	4c0e      	ldr	r4, [pc, #56]	@ (80017c8 <main+0x8c>)
 800178e:	4b0f      	ldr	r3, [pc, #60]	@ (80017cc <main+0x90>)
 8001790:	2101      	movs	r1, #1
 8001792:	0018      	movs	r0, r3
 8001794:	f7ff faac 	bl	8000cf0 <LL_DMA_GetDataTransferDirection>
 8001798:	0003      	movs	r3, r0
 800179a:	480c      	ldr	r0, [pc, #48]	@ (80017cc <main+0x90>)
 800179c:	9300      	str	r3, [sp, #0]
 800179e:	0023      	movs	r3, r4
 80017a0:	002a      	movs	r2, r5
 80017a2:	2101      	movs	r1, #1
 80017a4:	f7ff fbbe 	bl	8000f24 <LL_DMA_ConfigAddresses>
							   LL_USART_DMA_GetRegAddr(USART1, LL_USART_DMA_REG_DATA_RECEIVE),
							   (uint32_t)RxRawData,
							   LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2));
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_2, ubNbDataToReceive);
 80017a8:	4b09      	ldr	r3, [pc, #36]	@ (80017d0 <main+0x94>)
 80017aa:	881b      	ldrh	r3, [r3, #0]
 80017ac:	001a      	movs	r2, r3
 80017ae:	4b07      	ldr	r3, [pc, #28]	@ (80017cc <main+0x90>)
 80017b0:	2101      	movs	r1, #1
 80017b2:	0018      	movs	r0, r3
 80017b4:	f7ff fb94 	bl	8000ee0 <LL_DMA_SetDataLength>

	StartTransfer();
 80017b8:	f000 fa32 	bl	8001c20 <StartTransfer>

	ExecuteTasksAndDisableChannel();
 80017bc:	f000 fa42 	bl	8001c44 <ExecuteTasksAndDisableChannel>
	 ResetFlags();
 80017c0:	46c0      	nop			@ (mov r8, r8)
 80017c2:	e7db      	b.n	800177c <main+0x40>
 80017c4:	40013800 	.word	0x40013800
 80017c8:	20000028 	.word	0x20000028
 80017cc:	40020000 	.word	0x40020000
 80017d0:	20000000 	.word	0x20000000

080017d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* HSI configuration and activation */
  
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 80017d8:	2002      	movs	r0, #2
 80017da:	f7ff fd85 	bl	80012e8 <LL_FLASH_SetLatency>

  /* HSI configuration and activation */
  LL_RCC_HSI_Enable();
 80017de:	f7ff fc45 	bl	800106c <LL_RCC_HSI_Enable>
  while(LL_RCC_HSI_IsReady() != 1)
 80017e2:	46c0      	nop			@ (mov r8, r8)
 80017e4:	f7ff fc50 	bl	8001088 <LL_RCC_HSI_IsReady>
 80017e8:	0003      	movs	r3, r0
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d1fa      	bne.n	80017e4 <SystemClock_Config+0x10>
  {
  }

  /* Main PLL configuration and activation */
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_4, 70, LL_RCC_PLLR_DIV_5);
 80017ee:	2380      	movs	r3, #128	@ 0x80
 80017f0:	061b      	lsls	r3, r3, #24
 80017f2:	2246      	movs	r2, #70	@ 0x46
 80017f4:	2130      	movs	r1, #48	@ 0x30
 80017f6:	2002      	movs	r0, #2
 80017f8:	f7ff fce0 	bl	80011bc <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80017fc:	f7ff fcbc 	bl	8001178 <LL_RCC_PLL_Enable>
  LL_RCC_PLL_EnableDomain_SYS();
 8001800:	f7ff fcfc 	bl	80011fc <LL_RCC_PLL_EnableDomain_SYS>
  while(LL_RCC_PLL_IsReady() != 1)
 8001804:	46c0      	nop			@ (mov r8, r8)
 8001806:	f7ff fcc5 	bl	8001194 <LL_RCC_PLL_IsReady>
 800180a:	0003      	movs	r3, r0
 800180c:	2b01      	cmp	r3, #1
 800180e:	d1fa      	bne.n	8001806 <SystemClock_Config+0x32>
  {
  }

  /* Set AHB prescaler*/
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001810:	2000      	movs	r0, #0
 8001812:	f7ff fc6d 	bl	80010f0 <LL_RCC_SetAHBPrescaler>

  /* Sysclk activation on the main PLL */
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001816:	2002      	movs	r0, #2
 8001818:	f7ff fc4a 	bl	80010b0 <LL_RCC_SetSysClkSource>
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800181c:	46c0      	nop			@ (mov r8, r8)
 800181e:	f7ff fc5b 	bl	80010d8 <LL_RCC_GetSysClkSource>
 8001822:	0003      	movs	r3, r0
 8001824:	2b10      	cmp	r3, #16
 8001826:	d1fa      	bne.n	800181e <SystemClock_Config+0x4a>
  {
  }

  /* Set APB1 prescaler*/
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001828:	2000      	movs	r0, #0
 800182a:	f7ff fc77 	bl	800111c <LL_RCC_SetAPB1Prescaler>
  LL_Init1msTick(56000000);
 800182e:	4b05      	ldr	r3, [pc, #20]	@ (8001844 <SystemClock_Config+0x70>)
 8001830:	0018      	movs	r0, r3
 8001832:	f001 f975 	bl	8002b20 <LL_Init1msTick>
  /* Update CMSIS variable (which can be updated also through SystemCoreClockUpdate function) */
  LL_SetSystemCoreClock(56000000);
 8001836:	4b03      	ldr	r3, [pc, #12]	@ (8001844 <SystemClock_Config+0x70>)
 8001838:	0018      	movs	r0, r3
 800183a:	f001 f9a5 	bl	8002b88 <LL_SetSystemCoreClock>
}
 800183e:	46c0      	nop			@ (mov r8, r8)
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	03567e00 	.word	0x03567e00

08001848 <MX_USART1_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800184a:	b091      	sub	sp, #68	@ 0x44
 800184c:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800184e:	2618      	movs	r6, #24
 8001850:	19bb      	adds	r3, r7, r6
 8001852:	0018      	movs	r0, r3
 8001854:	2320      	movs	r3, #32
 8001856:	001a      	movs	r2, r3
 8001858:	2100      	movs	r1, #0
 800185a:	f001 f9a3 	bl	8002ba4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185e:	003b      	movs	r3, r7
 8001860:	0018      	movs	r0, r3
 8001862:	2318      	movs	r3, #24
 8001864:	001a      	movs	r2, r3
 8001866:	2100      	movs	r1, #0
 8001868:	f001 f99c 	bl	8002ba4 <memset>

  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK1);
 800186c:	23c0      	movs	r3, #192	@ 0xc0
 800186e:	029b      	lsls	r3, r3, #10
 8001870:	0018      	movs	r0, r3
 8001872:	f7ff fc69 	bl	8001148 <LL_RCC_SetUSARTClockSource>
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001876:	2380      	movs	r3, #128	@ 0x80
 8001878:	01db      	lsls	r3, r3, #7
 800187a:	0018      	movs	r0, r3
 800187c:	f7ff fcf8 	bl	8001270 <LL_APB2_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8001880:	2004      	movs	r0, #4
 8001882:	f7ff fd0b 	bl	800129c <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8001886:	003b      	movs	r3, r7
 8001888:	2210      	movs	r2, #16
 800188a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800188c:	003b      	movs	r3, r7
 800188e:	2202      	movs	r2, #2
 8001890:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001892:	003b      	movs	r3, r7
 8001894:	2202      	movs	r2, #2
 8001896:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001898:	003b      	movs	r3, r7
 800189a:	2200      	movs	r2, #0
 800189c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800189e:	003b      	movs	r3, r7
 80018a0:	2201      	movs	r2, #1
 80018a2:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80018a4:	003b      	movs	r3, r7
 80018a6:	2201      	movs	r2, #1
 80018a8:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018aa:	003b      	movs	r3, r7
 80018ac:	4a82      	ldr	r2, [pc, #520]	@ (8001ab8 <MX_USART1_UART_Init+0x270>)
 80018ae:	0019      	movs	r1, r3
 80018b0:	0010      	movs	r0, r2
 80018b2:	f000 fdbd 	bl	8002430 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 80018b6:	003b      	movs	r3, r7
 80018b8:	2220      	movs	r2, #32
 80018ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80018bc:	003b      	movs	r3, r7
 80018be:	2202      	movs	r2, #2
 80018c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80018c2:	003b      	movs	r3, r7
 80018c4:	2202      	movs	r2, #2
 80018c6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80018c8:	003b      	movs	r3, r7
 80018ca:	2200      	movs	r2, #0
 80018cc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80018ce:	003b      	movs	r3, r7
 80018d0:	2201      	movs	r2, #1
 80018d2:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80018d4:	003b      	movs	r3, r7
 80018d6:	2201      	movs	r2, #1
 80018d8:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018da:	003b      	movs	r3, r7
 80018dc:	4a76      	ldr	r2, [pc, #472]	@ (8001ab8 <MX_USART1_UART_Init+0x270>)
 80018de:	0019      	movs	r1, r3
 80018e0:	0010      	movs	r0, r2
 80018e2:	f000 fda5 	bl	8002430 <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_USART1_TX);
 80018e6:	4b75      	ldr	r3, [pc, #468]	@ (8001abc <MX_USART1_UART_Init+0x274>)
 80018e8:	2233      	movs	r2, #51	@ 0x33
 80018ea:	2100      	movs	r1, #0
 80018ec:	0018      	movs	r0, r3
 80018ee:	f7ff fb51 	bl	8000f94 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80018f2:	4b72      	ldr	r3, [pc, #456]	@ (8001abc <MX_USART1_UART_Init+0x274>)
 80018f4:	2210      	movs	r2, #16
 80018f6:	2100      	movs	r1, #0
 80018f8:	0018      	movs	r0, r3
 80018fa:	f7ff f9d3 	bl	8000ca4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_HIGH);
 80018fe:	2380      	movs	r3, #128	@ 0x80
 8001900:	019b      	lsls	r3, r3, #6
 8001902:	486e      	ldr	r0, [pc, #440]	@ (8001abc <MX_USART1_UART_Init+0x274>)
 8001904:	001a      	movs	r2, r3
 8001906:	2100      	movs	r1, #0
 8001908:	f7ff fac4 	bl	8000e94 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 800190c:	4b6b      	ldr	r3, [pc, #428]	@ (8001abc <MX_USART1_UART_Init+0x274>)
 800190e:	2200      	movs	r2, #0
 8001910:	2100      	movs	r1, #0
 8001912:	0018      	movs	r0, r3
 8001914:	f7ff fa06 	bl	8000d24 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8001918:	4b68      	ldr	r3, [pc, #416]	@ (8001abc <MX_USART1_UART_Init+0x274>)
 800191a:	2200      	movs	r2, #0
 800191c:	2100      	movs	r1, #0
 800191e:	0018      	movs	r0, r3
 8001920:	f7ff fa24 	bl	8000d6c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8001924:	4b65      	ldr	r3, [pc, #404]	@ (8001abc <MX_USART1_UART_Init+0x274>)
 8001926:	2280      	movs	r2, #128	@ 0x80
 8001928:	2100      	movs	r1, #0
 800192a:	0018      	movs	r0, r3
 800192c:	f7ff fa42 	bl	8000db4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_BYTE);
 8001930:	4b62      	ldr	r3, [pc, #392]	@ (8001abc <MX_USART1_UART_Init+0x274>)
 8001932:	2200      	movs	r2, #0
 8001934:	2100      	movs	r1, #0
 8001936:	0018      	movs	r0, r3
 8001938:	f7ff fa60 	bl	8000dfc <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 800193c:	4b5f      	ldr	r3, [pc, #380]	@ (8001abc <MX_USART1_UART_Init+0x274>)
 800193e:	2200      	movs	r2, #0
 8001940:	2100      	movs	r1, #0
 8001942:	0018      	movs	r0, r3
 8001944:	f7ff fa80 	bl	8000e48 <LL_DMA_SetMemorySize>

  /* USART2_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_2, LL_DMAMUX_REQ_USART1_RX);
 8001948:	4b5c      	ldr	r3, [pc, #368]	@ (8001abc <MX_USART1_UART_Init+0x274>)
 800194a:	2232      	movs	r2, #50	@ 0x32
 800194c:	2101      	movs	r1, #1
 800194e:	0018      	movs	r0, r3
 8001950:	f7ff fb20 	bl	8000f94 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_PERIPH_TO_MEMORY); //Peripheral to memory
 8001954:	4b59      	ldr	r3, [pc, #356]	@ (8001abc <MX_USART1_UART_Init+0x274>)
 8001956:	2200      	movs	r2, #0
 8001958:	2101      	movs	r1, #1
 800195a:	0018      	movs	r0, r3
 800195c:	f7ff f9a2 	bl	8000ca4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_HIGH); //priority high
 8001960:	2380      	movs	r3, #128	@ 0x80
 8001962:	019b      	lsls	r3, r3, #6
 8001964:	4855      	ldr	r0, [pc, #340]	@ (8001abc <MX_USART1_UART_Init+0x274>)
 8001966:	001a      	movs	r2, r3
 8001968:	2101      	movs	r1, #1
 800196a:	f7ff fa93 	bl	8000e94 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);  //Normal DMA
 800196e:	4b53      	ldr	r3, [pc, #332]	@ (8001abc <MX_USART1_UART_Init+0x274>)
 8001970:	2200      	movs	r2, #0
 8001972:	2101      	movs	r1, #1
 8001974:	0018      	movs	r0, r3
 8001976:	f7ff f9d5 	bl	8000d24 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 800197a:	4b50      	ldr	r3, [pc, #320]	@ (8001abc <MX_USART1_UART_Init+0x274>)
 800197c:	2200      	movs	r2, #0
 800197e:	2101      	movs	r1, #1
 8001980:	0018      	movs	r0, r3
 8001982:	f7ff f9f3 	bl	8000d6c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 8001986:	4b4d      	ldr	r3, [pc, #308]	@ (8001abc <MX_USART1_UART_Init+0x274>)
 8001988:	2280      	movs	r2, #128	@ 0x80
 800198a:	2101      	movs	r1, #1
 800198c:	0018      	movs	r0, r3
 800198e:	f7ff fa11 	bl	8000db4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 8001992:	4b4a      	ldr	r3, [pc, #296]	@ (8001abc <MX_USART1_UART_Init+0x274>)
 8001994:	2200      	movs	r2, #0
 8001996:	2101      	movs	r1, #1
 8001998:	0018      	movs	r0, r3
 800199a:	f7ff fa2f 	bl	8000dfc <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 800199e:	4b47      	ldr	r3, [pc, #284]	@ (8001abc <MX_USART1_UART_Init+0x274>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	2101      	movs	r1, #1
 80019a4:	0018      	movs	r0, r3
 80019a6:	f7ff fa4f 	bl	8000e48 <LL_DMA_SetMemorySize>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, 0);
 80019aa:	2100      	movs	r1, #0
 80019ac:	201b      	movs	r0, #27
 80019ae:	f7ff f8cb 	bl	8000b48 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 80019b2:	201b      	movs	r0, #27
 80019b4:	f7ff f8ae 	bl	8000b14 <__NVIC_EnableIRQ>
//                         LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT),
//                         LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1));
//  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, ubNbDataToTransmit);

  /* Configure the DMA functional parameters for reception */
  LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_2,
 80019b8:	4b41      	ldr	r3, [pc, #260]	@ (8001ac0 <MX_USART1_UART_Init+0x278>)
 80019ba:	2101      	movs	r1, #1
 80019bc:	0018      	movs	r0, r3
 80019be:	f7ff fe42 	bl	8001646 <LL_USART_DMA_GetRegAddr>
 80019c2:	0005      	movs	r5, r0
 80019c4:	4c3f      	ldr	r4, [pc, #252]	@ (8001ac4 <MX_USART1_UART_Init+0x27c>)
 80019c6:	4b3d      	ldr	r3, [pc, #244]	@ (8001abc <MX_USART1_UART_Init+0x274>)
 80019c8:	2101      	movs	r1, #1
 80019ca:	0018      	movs	r0, r3
 80019cc:	f7ff f990 	bl	8000cf0 <LL_DMA_GetDataTransferDirection>
 80019d0:	0003      	movs	r3, r0
 80019d2:	483a      	ldr	r0, [pc, #232]	@ (8001abc <MX_USART1_UART_Init+0x274>)
 80019d4:	9300      	str	r3, [sp, #0]
 80019d6:	0023      	movs	r3, r4
 80019d8:	002a      	movs	r2, r5
 80019da:	2101      	movs	r1, #1
 80019dc:	f7ff faa2 	bl	8000f24 <LL_DMA_ConfigAddresses>
                         LL_USART_DMA_GetRegAddr(USART1, LL_USART_DMA_REG_DATA_RECEIVE),
                         (uint32_t)RxRawData,
                         LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2));
  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_2, ubNbDataToReceive);
 80019e0:	4b39      	ldr	r3, [pc, #228]	@ (8001ac8 <MX_USART1_UART_Init+0x280>)
 80019e2:	881b      	ldrh	r3, [r3, #0]
 80019e4:	001a      	movs	r2, r3
 80019e6:	4b35      	ldr	r3, [pc, #212]	@ (8001abc <MX_USART1_UART_Init+0x274>)
 80019e8:	2101      	movs	r1, #1
 80019ea:	0018      	movs	r0, r3
 80019ec:	f7ff fa78 	bl	8000ee0 <LL_DMA_SetDataLength>

  /* Enable DMA transfer complete/error interrupts  */
//  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_1);
//  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_1);
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_2);
 80019f0:	4b32      	ldr	r3, [pc, #200]	@ (8001abc <MX_USART1_UART_Init+0x274>)
 80019f2:	2101      	movs	r1, #1
 80019f4:	0018      	movs	r0, r3
 80019f6:	f7ff faf9 	bl	8000fec <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_2);
 80019fa:	4b30      	ldr	r3, [pc, #192]	@ (8001abc <MX_USART1_UART_Init+0x274>)
 80019fc:	2101      	movs	r1, #1
 80019fe:	0018      	movs	r0, r3
 8001a00:	f7ff fb14 	bl	800102c <LL_DMA_EnableIT_TE>
  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8001a04:	19bb      	adds	r3, r7, r6
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 19200;
 8001a0a:	19bb      	adds	r3, r7, r6
 8001a0c:	2296      	movs	r2, #150	@ 0x96
 8001a0e:	01d2      	lsls	r2, r2, #7
 8001a10:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001a12:	0031      	movs	r1, r6
 8001a14:	187b      	adds	r3, r7, r1
 8001a16:	2200      	movs	r2, #0
 8001a18:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001a1a:	187b      	adds	r3, r7, r1
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001a20:	187b      	adds	r3, r7, r1
 8001a22:	2200      	movs	r2, #0
 8001a24:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001a26:	187b      	adds	r3, r7, r1
 8001a28:	220c      	movs	r2, #12
 8001a2a:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001a2c:	187b      	adds	r3, r7, r1
 8001a2e:	2200      	movs	r2, #0
 8001a30:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001a32:	187b      	adds	r3, r7, r1
 8001a34:	2200      	movs	r2, #0
 8001a36:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART1,&USART_InitStruct);
 8001a38:	187b      	adds	r3, r7, r1
 8001a3a:	4a21      	ldr	r2, [pc, #132]	@ (8001ac0 <MX_USART1_UART_Init+0x278>)
 8001a3c:	0019      	movs	r1, r3
 8001a3e:	0010      	movs	r0, r2
 8001a40:	f000 ffc6 	bl	80029d0 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 8001a44:	4b1e      	ldr	r3, [pc, #120]	@ (8001ac0 <MX_USART1_UART_Init+0x278>)
 8001a46:	2100      	movs	r1, #0
 8001a48:	0018      	movs	r0, r3
 8001a4a:	f7ff fcc7 	bl	80013dc <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 8001a4e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac0 <MX_USART1_UART_Init+0x278>)
 8001a50:	2100      	movs	r1, #0
 8001a52:	0018      	movs	r0, r3
 8001a54:	f7ff fce6 	bl	8001424 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART1);
 8001a58:	4b19      	ldr	r3, [pc, #100]	@ (8001ac0 <MX_USART1_UART_Init+0x278>)
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	f7ff fcae 	bl	80013bc <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART1);
 8001a60:	4b17      	ldr	r3, [pc, #92]	@ (8001ac0 <MX_USART1_UART_Init+0x278>)
 8001a62:	0018      	movs	r0, r3
 8001a64:	f7ff fd24 	bl	80014b0 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */
  LL_USART_EnableRxTimeout(USART1);
 8001a68:	4b15      	ldr	r3, [pc, #84]	@ (8001ac0 <MX_USART1_UART_Init+0x278>)
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	f7ff fd00 	bl	8001470 <LL_USART_EnableRxTimeout>
  LL_USART_SetRxTimeout(USART1, 20);
 8001a70:	4b13      	ldr	r3, [pc, #76]	@ (8001ac0 <MX_USART1_UART_Init+0x278>)
 8001a72:	2114      	movs	r1, #20
 8001a74:	0018      	movs	r0, r3
 8001a76:	f7ff fd0a 	bl	800148e <LL_USART_SetRxTimeout>

  LL_USART_ClearFlag_RTO(USART1);
 8001a7a:	4b11      	ldr	r3, [pc, #68]	@ (8001ac0 <MX_USART1_UART_Init+0x278>)
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	f7ff fd97 	bl	80015b0 <LL_USART_ClearFlag_RTO>
  LL_USART_EnableIT_RTO(USART1);
 8001a82:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac0 <MX_USART1_UART_Init+0x278>)
 8001a84:	0018      	movs	r0, r3
 8001a86:	f7ff fd9f 	bl	80015c8 <LL_USART_EnableIT_RTO>
  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART1);
 8001a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac0 <MX_USART1_UART_Init+0x278>)
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	f7ff fc87 	bl	80013a0 <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART1))) || (!(LL_USART_IsActiveFlag_REACK(USART1))))
 8001a92:	46c0      	nop			@ (mov r8, r8)
 8001a94:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac0 <MX_USART1_UART_Init+0x278>)
 8001a96:	0018      	movs	r0, r3
 8001a98:	f7ff fd36 	bl	8001508 <LL_USART_IsActiveFlag_TEACK>
 8001a9c:	1e03      	subs	r3, r0, #0
 8001a9e:	d0f9      	beq.n	8001a94 <MX_USART1_UART_Init+0x24c>
 8001aa0:	4b07      	ldr	r3, [pc, #28]	@ (8001ac0 <MX_USART1_UART_Init+0x278>)
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	f7ff fd44 	bl	8001530 <LL_USART_IsActiveFlag_REACK>
 8001aa8:	1e03      	subs	r3, r0, #0
 8001aaa:	d0f3      	beq.n	8001a94 <MX_USART1_UART_Init+0x24c>
  {
  }
  /* USER CODE BEGIN USART2_Init 2 */

}
 8001aac:	46c0      	nop			@ (mov r8, r8)
 8001aae:	46c0      	nop			@ (mov r8, r8)
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	b00f      	add	sp, #60	@ 0x3c
 8001ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ab6:	46c0      	nop			@ (mov r8, r8)
 8001ab8:	50000800 	.word	0x50000800
 8001abc:	40020000 	.word	0x40020000
 8001ac0:	40013800 	.word	0x40013800
 8001ac4:	20000028 	.word	0x20000028
 8001ac8:	20000000 	.word	0x20000000

08001acc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	f7ff fba1 	bl	8001218 <LL_AHB1_GRP1_EnableClock>
  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
//  NVIC_SetPriority(DMA1_Channel1_IRQn, 0);
//  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0);
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	200a      	movs	r0, #10
 8001ada:	f7ff f835 	bl	8000b48 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001ade:	200a      	movs	r0, #10
 8001ae0:	f7ff f818 	bl	8000b14 <__NVIC_EnableIRQ>

}
 8001ae4:	46c0      	nop			@ (mov r8, r8)
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b086      	sub	sp, #24
 8001aee:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	003b      	movs	r3, r7
 8001af2:	0018      	movs	r0, r3
 8001af4:	2318      	movs	r3, #24
 8001af6:	001a      	movs	r2, r3
 8001af8:	2100      	movs	r1, #0
 8001afa:	f001 f853 	bl	8002ba4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */


  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8001afe:	2001      	movs	r0, #1
 8001b00:	f7ff fbcc 	bl	800129c <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED4_GPIO_Port, LED4_Pin);
 8001b04:	23a0      	movs	r3, #160	@ 0xa0
 8001b06:	05db      	lsls	r3, r3, #23
 8001b08:	2120      	movs	r1, #32
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	f7ff fdf3 	bl	80016f6 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LED4_Pin;
 8001b10:	003b      	movs	r3, r7
 8001b12:	2220      	movs	r2, #32
 8001b14:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001b16:	003b      	movs	r3, r7
 8001b18:	2201      	movs	r2, #1
 8001b1a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001b1c:	003b      	movs	r3, r7
 8001b1e:	2200      	movs	r2, #0
 8001b20:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b22:	003b      	movs	r3, r7
 8001b24:	2200      	movs	r2, #0
 8001b26:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b28:	003b      	movs	r3, r7
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8001b2e:	003a      	movs	r2, r7
 8001b30:	23a0      	movs	r3, #160	@ 0xa0
 8001b32:	05db      	lsls	r3, r3, #23
 8001b34:	0011      	movs	r1, r2
 8001b36:	0018      	movs	r0, r3
 8001b38:	f000 fc7a 	bl	8002430 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */

}
 8001b3c:	46c0      	nop			@ (mov r8, r8)
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	b006      	add	sp, #24
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <UserButton_Init>:

/* USER CODE BEGIN 4 */
void UserButton_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  USER_BUTTON_GPIO_CLK_ENABLE();
 8001b48:	2004      	movs	r0, #4
 8001b4a:	f7ff fba7 	bl	800129c <LL_IOP_GRP1_EnableClock>

  /* Configure GPIO for BUTTON */
  LL_GPIO_SetPinMode(USER_BUTTON_GPIO_PORT, USER_BUTTON_PIN, LL_GPIO_MODE_INPUT);
 8001b4e:	2380      	movs	r3, #128	@ 0x80
 8001b50:	019b      	lsls	r3, r3, #6
 8001b52:	4812      	ldr	r0, [pc, #72]	@ (8001b9c <UserButton_Init+0x58>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	0019      	movs	r1, r3
 8001b58:	f7ff fd89 	bl	800166e <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinPull(USER_BUTTON_GPIO_PORT, USER_BUTTON_PIN, LL_GPIO_PULL_NO);
 8001b5c:	2380      	movs	r3, #128	@ 0x80
 8001b5e:	019b      	lsls	r3, r3, #6
 8001b60:	480e      	ldr	r0, [pc, #56]	@ (8001b9c <UserButton_Init+0x58>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	0019      	movs	r1, r3
 8001b66:	f7ff fd9e 	bl	80016a6 <LL_GPIO_SetPinPull>

  /* Connect External Line to the GPIO*/
  USER_BUTTON_SYSCFG_SET_EXTI();
 8001b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ba0 <UserButton_Init+0x5c>)
 8001b6c:	0019      	movs	r1, r3
 8001b6e:	2002      	movs	r0, #2
 8001b70:	f7ff fbf0 	bl	8001354 <LL_EXTI_SetEXTISource>

  /* Enable a rising trigger EXTI_Line4_15 Interrupt */
  USER_BUTTON_EXTI_LINE_ENABLE();
 8001b74:	2380      	movs	r3, #128	@ 0x80
 8001b76:	019b      	lsls	r3, r3, #6
 8001b78:	0018      	movs	r0, r3
 8001b7a:	f7ff fbc9 	bl	8001310 <LL_EXTI_EnableIT_0_31>
  USER_BUTTON_EXTI_FALLING_TRIG_ENABLE();
 8001b7e:	2380      	movs	r3, #128	@ 0x80
 8001b80:	019b      	lsls	r3, r3, #6
 8001b82:	0018      	movs	r0, r3
 8001b84:	f7ff fbd6 	bl	8001334 <LL_EXTI_EnableFallingTrig_0_31>

  /* Configure NVIC for USER_BUTTON_EXTI_IRQn */
  NVIC_SetPriority(USER_BUTTON_EXTI_IRQn, 3);
 8001b88:	2103      	movs	r1, #3
 8001b8a:	2007      	movs	r0, #7
 8001b8c:	f7fe ffdc 	bl	8000b48 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USER_BUTTON_EXTI_IRQn);
 8001b90:	2007      	movs	r0, #7
 8001b92:	f7fe ffbf 	bl	8000b14 <__NVIC_EnableIRQ>
}
 8001b96:	46c0      	nop			@ (mov r8, r8)
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	50000800 	.word	0x50000800
 8001ba0:	00080003 	.word	0x00080003

08001ba4 <LED_On>:

void LED_On(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* Turn LED4 on */
  LL_GPIO_SetOutputPin(LED4_GPIO_Port, LED4_Pin);
 8001ba8:	23a0      	movs	r3, #160	@ 0xa0
 8001baa:	05db      	lsls	r3, r3, #23
 8001bac:	2120      	movs	r1, #32
 8001bae:	0018      	movs	r0, r3
 8001bb0:	f7ff fd95 	bl	80016de <LL_GPIO_SetOutputPin>
}
 8001bb4:	46c0      	nop			@ (mov r8, r8)
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <LED_Off>:

void LED_Off(void)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	af00      	add	r7, sp, #0
  /* Turn LED4 off */
  LL_GPIO_ResetOutputPin(LED4_GPIO_Port, LED4_Pin);
 8001bbe:	23a0      	movs	r3, #160	@ 0xa0
 8001bc0:	05db      	lsls	r3, r3, #23
 8001bc2:	2120      	movs	r1, #32
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	f7ff fd96 	bl	80016f6 <LL_GPIO_ResetOutputPin>
}
 8001bca:	46c0      	nop			@ (mov r8, r8)
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <LED_Blinking>:

void LED_Blinking(uint32_t Period)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Toggle LED4 in an infinite loop */
  while (1)
  {
    LL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8001bd8:	23a0      	movs	r3, #160	@ 0xa0
 8001bda:	05db      	lsls	r3, r3, #23
 8001bdc:	2120      	movs	r1, #32
 8001bde:	0018      	movs	r0, r3
 8001be0:	f7ff fd95 	bl	800170e <LL_GPIO_TogglePin>
    LL_mDelay(Period);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	0018      	movs	r0, r3
 8001be8:	f000 ffaa 	bl	8002b40 <LL_mDelay>
    LL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8001bec:	46c0      	nop			@ (mov r8, r8)
 8001bee:	e7f3      	b.n	8001bd8 <LED_Blinking+0x8>

08001bf0 <WaitForUserButtonPress>:
  }
}


void WaitForUserButtonPress(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0

  while (ubButtonPress == 0)
 8001bf4:	e008      	b.n	8001c08 <WaitForUserButtonPress+0x18>
  {

    LL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8001bf6:	23a0      	movs	r3, #160	@ 0xa0
 8001bf8:	05db      	lsls	r3, r3, #23
 8001bfa:	2120      	movs	r1, #32
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	f7ff fd86 	bl	800170e <LL_GPIO_TogglePin>
    LL_mDelay(200);
 8001c02:	20c8      	movs	r0, #200	@ 0xc8
 8001c04:	f000 ff9c 	bl	8002b40 <LL_mDelay>
  while (ubButtonPress == 0)
 8001c08:	4b04      	ldr	r3, [pc, #16]	@ (8001c1c <WaitForUserButtonPress+0x2c>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d0f1      	beq.n	8001bf6 <WaitForUserButtonPress+0x6>
  /* Ensure that LED4 is turned Off */
//  LL_USART_Enable(USART2);
//  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
//  //  {
//  //  }
  LED_Off();
 8001c12:	f7ff ffd2 	bl	8001bba <LED_Off>
}
 8001c16:	46c0      	nop			@ (mov r8, r8)
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20000024 	.word	0x20000024

08001c20 <StartTransfer>:

void StartTransfer(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* Enable DMA RX Interrupt */
  LL_USART_EnableDMAReq_RX(USART1);
 8001c24:	4b05      	ldr	r3, [pc, #20]	@ (8001c3c <StartTransfer+0x1c>)
 8001c26:	0018      	movs	r0, r3
 8001c28:	f7ff fcee 	bl	8001608 <LL_USART_EnableDMAReq_RX>

  /* Enable DMA Channel Rx */
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_2);
 8001c2c:	4b04      	ldr	r3, [pc, #16]	@ (8001c40 <StartTransfer+0x20>)
 8001c2e:	2101      	movs	r1, #1
 8001c30:	0018      	movs	r0, r3
 8001c32:	f7fe fff7 	bl	8000c24 <LL_DMA_EnableChannel>

  /* Enable DMA Channel Tx */

}
 8001c36:	46c0      	nop			@ (mov r8, r8)
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40013800 	.word	0x40013800
 8001c40:	40020000 	.word	0x40020000

08001c44 <ExecuteTasksAndDisableChannel>:


void ExecuteTasksAndDisableChannel(void){
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
	while(ubReceptionComplete != 1)
 8001c48:	46c0      	nop			@ (mov r8, r8)
 8001c4a:	4b08      	ldr	r3, [pc, #32]	@ (8001c6c <ExecuteTasksAndDisableChannel+0x28>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d1fa      	bne.n	8001c4a <ExecuteTasksAndDisableChannel+0x6>
	{
	}

	Task1(RxBuffer);
 8001c54:	4b06      	ldr	r3, [pc, #24]	@ (8001c70 <ExecuteTasksAndDisableChannel+0x2c>)
 8001c56:	0018      	movs	r0, r3
 8001c58:	f000 f898 	bl	8001d8c <Task1>
	LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_2);
 8001c5c:	4b05      	ldr	r3, [pc, #20]	@ (8001c74 <ExecuteTasksAndDisableChannel+0x30>)
 8001c5e:	2101      	movs	r1, #1
 8001c60:	0018      	movs	r0, r3
 8001c62:	f7fe ffff 	bl	8000c64 <LL_DMA_DisableChannel>

}
 8001c66:	46c0      	nop			@ (mov r8, r8)
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	2000016c 	.word	0x2000016c
 8001c70:	20000154 	.word	0x20000154
 8001c74:	40020000 	.word	0x40020000

08001c78 <DMA1_ReceiveComplete_Callback>:

void DMA1_ReceiveComplete_Callback(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
	ubReceptionComplete=1;
 8001c7c:	4b02      	ldr	r3, [pc, #8]	@ (8001c88 <DMA1_ReceiveComplete_Callback+0x10>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	701a      	strb	r2, [r3, #0]
}
 8001c82:	46c0      	nop			@ (mov r8, r8)
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	2000016c 	.word	0x2000016c

08001c8c <UserButton_Callback>:

void UserButton_Callback(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* Update User push-button variable : to be checked in waiting loop in main program */
	ubButtonPress = 1;
 8001c90:	4b02      	ldr	r3, [pc, #8]	@ (8001c9c <UserButton_Callback+0x10>)
 8001c92:	2201      	movs	r2, #1
 8001c94:	701a      	strb	r2, [r3, #0]
}
 8001c96:	46c0      	nop			@ (mov r8, r8)
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20000024 	.word	0x20000024

08001ca0 <ResetFlags>:

void ResetFlags(void){
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0

	/* Buffer used for reception */
	ubReceptionComplete = 0;
 8001ca4:	4b02      	ldr	r3, [pc, #8]	@ (8001cb0 <ResetFlags+0x10>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	701a      	strb	r2, [r3, #0]

}
 8001caa:	46c0      	nop			@ (mov r8, r8)
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	2000016c 	.word	0x2000016c

08001cb4 <USART_TransferError_Callback>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void USART_TransferError_Callback(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* Disable DMA1 Tx Channel */
  LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_1);
 8001cb8:	4b08      	ldr	r3, [pc, #32]	@ (8001cdc <USART_TransferError_Callback+0x28>)
 8001cba:	2100      	movs	r1, #0
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	f7fe ffd1 	bl	8000c64 <LL_DMA_DisableChannel>

  /* Disable DMA1 Rx Channel */
  LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_2);
 8001cc2:	4b06      	ldr	r3, [pc, #24]	@ (8001cdc <USART_TransferError_Callback+0x28>)
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	f7fe ffcc 	bl	8000c64 <LL_DMA_DisableChannel>

  /* Set LED4 to Blinking mode to indicate error occurs */
  LED_Blinking(500);
 8001ccc:	23fa      	movs	r3, #250	@ 0xfa
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	f7ff ff7d 	bl	8001bd0 <LED_Blinking>
}
 8001cd6:	46c0      	nop			@ (mov r8, r8)
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40020000 	.word	0x40020000

08001ce0 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
 8001ce0:	b590      	push	{r4, r7, lr}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0

	uint32_t isrflags=READ_REG(USART1->ISR); // Read ISR register
 8001ce6:	4b25      	ldr	r3, [pc, #148]	@ (8001d7c <USART1_IRQHandler+0x9c>)
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	607b      	str	r3, [r7, #4]
	uint32_t errorflags=( isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE) ); // Read the error flags
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	220f      	movs	r2, #15
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	603b      	str	r3, [r7, #0]

  /* USER CODE BEGIN USART2_IRQn 0 */
	if (LL_USART_IsActiveFlag_RTO(USART1)) //Check if Rx Timeou(RTO) flag is set.
 8001cf4:	4b21      	ldr	r3, [pc, #132]	@ (8001d7c <USART1_IRQHandler+0x9c>)
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	f7ff fbf2 	bl	80014e0 <LL_USART_IsActiveFlag_RTO>
 8001cfc:	1e03      	subs	r3, r0, #0
 8001cfe:	d015      	beq.n	8001d2c <USART1_IRQHandler+0x4c>
	    {
	        // Clear the Rx Timeout flag
	        LL_USART_ClearFlag_RTO(USART1);
 8001d00:	4b1e      	ldr	r3, [pc, #120]	@ (8001d7c <USART1_IRQHandler+0x9c>)
 8001d02:	0018      	movs	r0, r3
 8001d04:	f7ff fc54 	bl	80015b0 <LL_USART_ClearFlag_RTO>

	    	 memcpy(RxBuffer, RxRawData,sizeof(RxBuffer)); // Keep the input with RxBuffer
 8001d08:	4b1d      	ldr	r3, [pc, #116]	@ (8001d80 <USART1_IRQHandler+0xa0>)
 8001d0a:	4a1e      	ldr	r2, [pc, #120]	@ (8001d84 <USART1_IRQHandler+0xa4>)
 8001d0c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001d0e:	c313      	stmia	r3!, {r0, r1, r4}
 8001d10:	6811      	ldr	r1, [r2, #0]
 8001d12:	6019      	str	r1, [r3, #0]
 8001d14:	8892      	ldrh	r2, [r2, #4]
 8001d16:	809a      	strh	r2, [r3, #4]
			 memset(RxRawData, 0, sizeof(RxRawData)); // Clear the RxRawData to get new input starting from index 0.
 8001d18:	2396      	movs	r3, #150	@ 0x96
 8001d1a:	005a      	lsls	r2, r3, #1
 8001d1c:	4b19      	ldr	r3, [pc, #100]	@ (8001d84 <USART1_IRQHandler+0xa4>)
 8001d1e:	2100      	movs	r1, #0
 8001d20:	0018      	movs	r0, r3
 8001d22:	f000 ff3f 	bl	8002ba4 <memset>
			 ubReceptionComplete = 1;
 8001d26:	4b18      	ldr	r3, [pc, #96]	@ (8001d88 <USART1_IRQHandler+0xa8>)
 8001d28:	2201      	movs	r2, #1
 8001d2a:	701a      	strb	r2, [r3, #0]
	      //Calls the interrupt then restarts DMA.
			}

	if( errorflags!=0 ){
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d01f      	beq.n	8001d72 <USART1_IRQHandler+0x92>
		if( (isrflags & USART_ISR_PE)!=0 ){
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2201      	movs	r2, #1
 8001d36:	4013      	ands	r3, r2
 8001d38:	d003      	beq.n	8001d42 <USART1_IRQHandler+0x62>
			LL_USART_ClearFlag_PE(USART1);
 8001d3a:	4b10      	ldr	r3, [pc, #64]	@ (8001d7c <USART1_IRQHandler+0x9c>)
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	f7ff fc0b 	bl	8001558 <LL_USART_ClearFlag_PE>
		}
		if( (isrflags & USART_ISR_FE)!=0 ){
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2202      	movs	r2, #2
 8001d46:	4013      	ands	r3, r2
 8001d48:	d003      	beq.n	8001d52 <USART1_IRQHandler+0x72>
			LL_USART_ClearFlag_FE(USART1);
 8001d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d7c <USART1_IRQHandler+0x9c>)
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	f7ff fc0e 	bl	800156e <LL_USART_ClearFlag_FE>
		}
		if( (isrflags & USART_ISR_NE)!=0 ){
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2204      	movs	r2, #4
 8001d56:	4013      	ands	r3, r2
 8001d58:	d003      	beq.n	8001d62 <USART1_IRQHandler+0x82>
			LL_USART_ClearFlag_NE(USART1);
 8001d5a:	4b08      	ldr	r3, [pc, #32]	@ (8001d7c <USART1_IRQHandler+0x9c>)
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	f7ff fc11 	bl	8001584 <LL_USART_ClearFlag_NE>
		}
		if( (isrflags & USART_ISR_ORE)!=0 ){
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2208      	movs	r2, #8
 8001d66:	4013      	ands	r3, r2
 8001d68:	d003      	beq.n	8001d72 <USART1_IRQHandler+0x92>
			LL_USART_ClearFlag_ORE(USART1);
 8001d6a:	4b04      	ldr	r3, [pc, #16]	@ (8001d7c <USART1_IRQHandler+0x9c>)
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	f7ff fc14 	bl	800159a <LL_USART_ClearFlag_ORE>
		}
	}
}
 8001d72:	46c0      	nop			@ (mov r8, r8)
 8001d74:	46bd      	mov	sp, r7
 8001d76:	b003      	add	sp, #12
 8001d78:	bd90      	pop	{r4, r7, pc}
 8001d7a:	46c0      	nop			@ (mov r8, r8)
 8001d7c:	40013800 	.word	0x40013800
 8001d80:	20000154 	.word	0x20000154
 8001d84:	20000028 	.word	0x20000028
 8001d88:	2000016c 	.word	0x2000016c

08001d8c <Task1>:

void Task1(uint8_t *SmallBuffer){ //
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]

	for(int i=0; i<4;i++){ // Store the processed Data from RxBuffer
 8001d94:	2300      	movs	r3, #0
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	e00c      	b.n	8001db4 <Task1+0x28>
		ProcessedData[i]= SmallBuffer[i+6];
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	3306      	adds	r3, #6
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	18d3      	adds	r3, r2, r3
 8001da2:	7819      	ldrb	r1, [r3, #0]
 8001da4:	4a3f      	ldr	r2, [pc, #252]	@ (8001ea4 <Task1+0x118>)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	18d3      	adds	r3, r2, r3
 8001daa:	1c0a      	adds	r2, r1, #0
 8001dac:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<4;i++){ // Store the processed Data from RxBuffer
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	3301      	adds	r3, #1
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2b03      	cmp	r3, #3
 8001db8:	ddef      	ble.n	8001d9a <Task1+0xe>
	}
	if(SmallBuffer[0] == 2){
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d16b      	bne.n	8001e9a <Task1+0x10e>

	MyData.STX=SmallBuffer[0]; //STX
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	781a      	ldrb	r2, [r3, #0]
 8001dc6:	4b38      	ldr	r3, [pc, #224]	@ (8001ea8 <Task1+0x11c>)
 8001dc8:	701a      	strb	r2, [r3, #0]
	MyData.STA=SmallBuffer[1]; //STA
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	785a      	ldrb	r2, [r3, #1]
 8001dce:	4b36      	ldr	r3, [pc, #216]	@ (8001ea8 <Task1+0x11c>)
 8001dd0:	705a      	strb	r2, [r3, #1]
	MyData.STB=SmallBuffer[2]; //STB
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	789a      	ldrb	r2, [r3, #2]
 8001dd6:	4b34      	ldr	r3, [pc, #208]	@ (8001ea8 <Task1+0x11c>)
 8001dd8:	709a      	strb	r2, [r3, #2]
	MyData.STC=SmallBuffer[3]; //STC
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	78da      	ldrb	r2, [r3, #3]
 8001dde:	4b32      	ldr	r3, [pc, #200]	@ (8001ea8 <Task1+0x11c>)
 8001de0:	70da      	strb	r2, [r3, #3]
	for (int i = 4; i<15;i++){
 8001de2:	2304      	movs	r3, #4
 8001de4:	60bb      	str	r3, [r7, #8]
 8001de6:	e042      	b.n	8001e6e <Task1+0xe2>
		if (i<10)
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	2b09      	cmp	r3, #9
 8001dec:	dc1d      	bgt.n	8001e2a <Task1+0x9e>
		{	if(SmallBuffer[i]==' '){ // Check if there is space
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	18d3      	adds	r3, r2, r3
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b20      	cmp	r3, #32
 8001df8:	d108      	bne.n	8001e0c <Task1+0x80>
				MyData.Indicated[i-4]=0; // Replace space with decimal 0
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	3b04      	subs	r3, #4
 8001dfe:	4a2a      	ldr	r2, [pc, #168]	@ (8001ea8 <Task1+0x11c>)
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	18d3      	adds	r3, r2, r3
 8001e04:	3304      	adds	r3, #4
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	e02d      	b.n	8001e68 <Task1+0xdc>
		}
			else{
				MyData.Indicated[i-4]=SmallBuffer[i]-'0'; //Fill the Indicated Part
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	18d3      	adds	r3, r2, r3
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	3b30      	subs	r3, #48	@ 0x30
 8001e16:	001a      	movs	r2, r3
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	3b04      	subs	r3, #4
 8001e1c:	0011      	movs	r1, r2
 8001e1e:	4a22      	ldr	r2, [pc, #136]	@ (8001ea8 <Task1+0x11c>)
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	18d3      	adds	r3, r2, r3
 8001e24:	3304      	adds	r3, #4
 8001e26:	6019      	str	r1, [r3, #0]
 8001e28:	e01e      	b.n	8001e68 <Task1+0xdc>
			}
		}
		else{ //After i is equal to or bigger than 10, fill the Tare Part
			if(SmallBuffer[i]==' '){
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	18d3      	adds	r3, r2, r3
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b20      	cmp	r3, #32
 8001e34:	d109      	bne.n	8001e4a <Task1+0xbe>
				MyData.Tare[i-9]=0;
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	3b09      	subs	r3, #9
 8001e3a:	4a1b      	ldr	r2, [pc, #108]	@ (8001ea8 <Task1+0x11c>)
 8001e3c:	3306      	adds	r3, #6
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	18d3      	adds	r3, r2, r3
 8001e42:	3304      	adds	r3, #4
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	e00e      	b.n	8001e68 <Task1+0xdc>
			}
			else{
				MyData.Tare[i-9]=SmallBuffer[i]-'0'; //Fill the Tare Part
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	18d3      	adds	r3, r2, r3
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	3b30      	subs	r3, #48	@ 0x30
 8001e54:	001a      	movs	r2, r3
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	3b09      	subs	r3, #9
 8001e5a:	0011      	movs	r1, r2
 8001e5c:	4a12      	ldr	r2, [pc, #72]	@ (8001ea8 <Task1+0x11c>)
 8001e5e:	3306      	adds	r3, #6
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	18d3      	adds	r3, r2, r3
 8001e64:	3304      	adds	r3, #4
 8001e66:	6019      	str	r1, [r3, #0]
	for (int i = 4; i<15;i++){
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	60bb      	str	r3, [r7, #8]
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	2b0e      	cmp	r3, #14
 8001e72:	ddb9      	ble.n	8001de8 <Task1+0x5c>
				}
		}

	}
	ConvertStructtoInteger(&MyData); //Convert Indicated Part to an integer number
 8001e74:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea8 <Task1+0x11c>)
 8001e76:	0018      	movs	r0, r3
 8001e78:	f000 f81a 	bl	8001eb0 <ConvertStructtoInteger>
	ConstructData();  // Construct Indıcated number according to STA and STB
 8001e7c:	f000 f844 	bl	8001f08 <ConstructData>
	LightTaskWithDouble(DecimalData);
 8001e80:	4b0a      	ldr	r3, [pc, #40]	@ (8001eac <Task1+0x120>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	0010      	movs	r0, r2
 8001e88:	0019      	movs	r1, r3
 8001e8a:	f000 f927 	bl	80020dc <LightTaskWithDouble>
	//LightTask(ProcessedData);
	memset(ProcessedData,0, sizeof(ProcessedData)); // REset the ProcessedDAta
 8001e8e:	4b05      	ldr	r3, [pc, #20]	@ (8001ea4 <Task1+0x118>)
 8001e90:	2204      	movs	r2, #4
 8001e92:	2100      	movs	r1, #0
 8001e94:	0018      	movs	r0, r3
 8001e96:	f000 fe85 	bl	8002ba4 <memset>
	}
}
 8001e9a:	46c0      	nop			@ (mov r8, r8)
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	b004      	add	sp, #16
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	46c0      	nop			@ (mov r8, r8)
 8001ea4:	20000168 	.word	0x20000168
 8001ea8:	20000170 	.word	0x20000170
 8001eac:	200001b0 	.word	0x200001b0

08001eb0 <ConvertStructtoInteger>:

void ConvertStructtoInteger(struct WeighingData *MyData){
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
	int i, k = 0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	60bb      	str	r3, [r7, #8]
		for (i = 0; i < 6; i++){ // Convert the processed data to whole integer number
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	e010      	b.n	8001ee4 <ConvertStructtoInteger+0x34>
			k = 10 * k +  MyData->Indicated[i]; // Turn the character into integer by substracting '0'
 8001ec2:	68ba      	ldr	r2, [r7, #8]
 8001ec4:	0013      	movs	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	189b      	adds	r3, r3, r2
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	0019      	movs	r1, r3
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	18d3      	adds	r3, r2, r3
 8001ed6:	3304      	adds	r3, #4
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	18cb      	adds	r3, r1, r3
 8001edc:	60bb      	str	r3, [r7, #8]
		for (i = 0; i < 6; i++){ // Convert the processed data to whole integer number
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2b05      	cmp	r3, #5
 8001ee8:	ddeb      	ble.n	8001ec2 <ConvertStructtoInteger+0x12>
		}
		DecimalData=k;
 8001eea:	68b8      	ldr	r0, [r7, #8]
 8001eec:	f7fe fdc6 	bl	8000a7c <__aeabi_i2d>
 8001ef0:	0002      	movs	r2, r0
 8001ef2:	000b      	movs	r3, r1
 8001ef4:	4903      	ldr	r1, [pc, #12]	@ (8001f04 <ConvertStructtoInteger+0x54>)
 8001ef6:	600a      	str	r2, [r1, #0]
 8001ef8:	604b      	str	r3, [r1, #4]
}
 8001efa:	46c0      	nop			@ (mov r8, r8)
 8001efc:	46bd      	mov	sp, r7
 8001efe:	b004      	add	sp, #16
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	46c0      	nop			@ (mov r8, r8)
 8001f04:	200001b0 	.word	0x200001b0

08001f08 <ConstructData>:


void ConstructData(void)
{
 8001f08:	b5b0      	push	{r4, r5, r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
	//STA
	uint8_t STA_Bitof_0=((MyData.STA >> 0) & 1);
 8001f0e:	4b5f      	ldr	r3, [pc, #380]	@ (800208c <ConstructData+0x184>)
 8001f10:	785a      	ldrb	r2, [r3, #1]
 8001f12:	1dfb      	adds	r3, r7, #7
 8001f14:	2101      	movs	r1, #1
 8001f16:	400a      	ands	r2, r1
 8001f18:	701a      	strb	r2, [r3, #0]
	uint8_t STA_Bitof_1=((MyData.STA >> 1) & 1);
 8001f1a:	4b5c      	ldr	r3, [pc, #368]	@ (800208c <ConstructData+0x184>)
 8001f1c:	785b      	ldrb	r3, [r3, #1]
 8001f1e:	085b      	lsrs	r3, r3, #1
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	1dbb      	adds	r3, r7, #6
 8001f24:	2101      	movs	r1, #1
 8001f26:	400a      	ands	r2, r1
 8001f28:	701a      	strb	r2, [r3, #0]
	uint8_t STA_Bitof_2=((MyData.STA >> 2) & 1);
 8001f2a:	4b58      	ldr	r3, [pc, #352]	@ (800208c <ConstructData+0x184>)
 8001f2c:	785b      	ldrb	r3, [r3, #1]
 8001f2e:	089b      	lsrs	r3, r3, #2
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	1d7b      	adds	r3, r7, #5
 8001f34:	2101      	movs	r1, #1
 8001f36:	400a      	ands	r2, r1
 8001f38:	701a      	strb	r2, [r3, #0]
	DecOfFirst3 = (1*STA_Bitof_0)+(2* STA_Bitof_1)+(4*STA_Bitof_2);
 8001f3a:	1d7b      	adds	r3, r7, #5
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	18db      	adds	r3, r3, r3
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	1dbb      	adds	r3, r7, #6
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	18d3      	adds	r3, r2, r3
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	18db      	adds	r3, r3, r3
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	1dfb      	adds	r3, r7, #7
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	18d3      	adds	r3, r2, r3
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	4b4e      	ldr	r3, [pc, #312]	@ (8002090 <ConstructData+0x188>)
 8001f58:	701a      	strb	r2, [r3, #0]
	b0=STA_Bitof_0;
 8001f5a:	4b4e      	ldr	r3, [pc, #312]	@ (8002094 <ConstructData+0x18c>)
 8001f5c:	1dfa      	adds	r2, r7, #7
 8001f5e:	7812      	ldrb	r2, [r2, #0]
 8001f60:	701a      	strb	r2, [r3, #0]
	b1=STA_Bitof_1;
 8001f62:	4b4d      	ldr	r3, [pc, #308]	@ (8002098 <ConstructData+0x190>)
 8001f64:	1dba      	adds	r2, r7, #6
 8001f66:	7812      	ldrb	r2, [r2, #0]
 8001f68:	701a      	strb	r2, [r3, #0]
	b2=STA_Bitof_2;
 8001f6a:	4b4c      	ldr	r3, [pc, #304]	@ (800209c <ConstructData+0x194>)
 8001f6c:	1d7a      	adds	r2, r7, #5
 8001f6e:	7812      	ldrb	r2, [r2, #0]
 8001f70:	701a      	strb	r2, [r3, #0]

	switch (DecOfFirst3){
 8001f72:	4b47      	ldr	r3, [pc, #284]	@ (8002090 <ConstructData+0x188>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b07      	cmp	r3, #7
 8001f78:	d865      	bhi.n	8002046 <ConstructData+0x13e>
 8001f7a:	009a      	lsls	r2, r3, #2
 8001f7c:	4b48      	ldr	r3, [pc, #288]	@ (80020a0 <ConstructData+0x198>)
 8001f7e:	18d3      	adds	r3, r2, r3
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	469f      	mov	pc, r3
		case 0:
			DecimalData*=100; // XXXX00
 8001f84:	4b47      	ldr	r3, [pc, #284]	@ (80020a4 <ConstructData+0x19c>)
 8001f86:	6818      	ldr	r0, [r3, #0]
 8001f88:	6859      	ldr	r1, [r3, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	4b46      	ldr	r3, [pc, #280]	@ (80020a8 <ConstructData+0x1a0>)
 8001f8e:	f7fe faad 	bl	80004ec <__aeabi_dmul>
 8001f92:	0002      	movs	r2, r0
 8001f94:	000b      	movs	r3, r1
 8001f96:	4943      	ldr	r1, [pc, #268]	@ (80020a4 <ConstructData+0x19c>)
 8001f98:	600a      	str	r2, [r1, #0]
 8001f9a:	604b      	str	r3, [r1, #4]
			break;
 8001f9c:	e053      	b.n	8002046 <ConstructData+0x13e>
		case 1:
			DecimalData*=10; // XXXXX0
 8001f9e:	4b41      	ldr	r3, [pc, #260]	@ (80020a4 <ConstructData+0x19c>)
 8001fa0:	6818      	ldr	r0, [r3, #0]
 8001fa2:	6859      	ldr	r1, [r3, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	4b41      	ldr	r3, [pc, #260]	@ (80020ac <ConstructData+0x1a4>)
 8001fa8:	f7fe faa0 	bl	80004ec <__aeabi_dmul>
 8001fac:	0002      	movs	r2, r0
 8001fae:	000b      	movs	r3, r1
 8001fb0:	493c      	ldr	r1, [pc, #240]	@ (80020a4 <ConstructData+0x19c>)
 8001fb2:	600a      	str	r2, [r1, #0]
 8001fb4:	604b      	str	r3, [r1, #4]
			break;
 8001fb6:	e046      	b.n	8002046 <ConstructData+0x13e>
		case 2:
			DecimalData*=1; // XXXXXX
 8001fb8:	4b3a      	ldr	r3, [pc, #232]	@ (80020a4 <ConstructData+0x19c>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	4939      	ldr	r1, [pc, #228]	@ (80020a4 <ConstructData+0x19c>)
 8001fc0:	600a      	str	r2, [r1, #0]
 8001fc2:	604b      	str	r3, [r1, #4]
			break;
 8001fc4:	e03f      	b.n	8002046 <ConstructData+0x13e>
		case 3:
			DecimalData*=0.1; // XXXXX.X
 8001fc6:	4b37      	ldr	r3, [pc, #220]	@ (80020a4 <ConstructData+0x19c>)
 8001fc8:	6818      	ldr	r0, [r3, #0]
 8001fca:	6859      	ldr	r1, [r3, #4]
 8001fcc:	4a38      	ldr	r2, [pc, #224]	@ (80020b0 <ConstructData+0x1a8>)
 8001fce:	4b39      	ldr	r3, [pc, #228]	@ (80020b4 <ConstructData+0x1ac>)
 8001fd0:	f7fe fa8c 	bl	80004ec <__aeabi_dmul>
 8001fd4:	0002      	movs	r2, r0
 8001fd6:	000b      	movs	r3, r1
 8001fd8:	4932      	ldr	r1, [pc, #200]	@ (80020a4 <ConstructData+0x19c>)
 8001fda:	600a      	str	r2, [r1, #0]
 8001fdc:	604b      	str	r3, [r1, #4]
			break;
 8001fde:	e032      	b.n	8002046 <ConstructData+0x13e>
		case 4:
			DecimalData*=0.01; // XXXX.XX
 8001fe0:	4b30      	ldr	r3, [pc, #192]	@ (80020a4 <ConstructData+0x19c>)
 8001fe2:	6818      	ldr	r0, [r3, #0]
 8001fe4:	6859      	ldr	r1, [r3, #4]
 8001fe6:	4a34      	ldr	r2, [pc, #208]	@ (80020b8 <ConstructData+0x1b0>)
 8001fe8:	4b34      	ldr	r3, [pc, #208]	@ (80020bc <ConstructData+0x1b4>)
 8001fea:	f7fe fa7f 	bl	80004ec <__aeabi_dmul>
 8001fee:	0002      	movs	r2, r0
 8001ff0:	000b      	movs	r3, r1
 8001ff2:	492c      	ldr	r1, [pc, #176]	@ (80020a4 <ConstructData+0x19c>)
 8001ff4:	600a      	str	r2, [r1, #0]
 8001ff6:	604b      	str	r3, [r1, #4]
			break;
 8001ff8:	e025      	b.n	8002046 <ConstructData+0x13e>
		case 5:
			DecimalData*=0.001; // XXX.XXX
 8001ffa:	4b2a      	ldr	r3, [pc, #168]	@ (80020a4 <ConstructData+0x19c>)
 8001ffc:	6818      	ldr	r0, [r3, #0]
 8001ffe:	6859      	ldr	r1, [r3, #4]
 8002000:	4a2f      	ldr	r2, [pc, #188]	@ (80020c0 <ConstructData+0x1b8>)
 8002002:	4b30      	ldr	r3, [pc, #192]	@ (80020c4 <ConstructData+0x1bc>)
 8002004:	f7fe fa72 	bl	80004ec <__aeabi_dmul>
 8002008:	0002      	movs	r2, r0
 800200a:	000b      	movs	r3, r1
 800200c:	4925      	ldr	r1, [pc, #148]	@ (80020a4 <ConstructData+0x19c>)
 800200e:	600a      	str	r2, [r1, #0]
 8002010:	604b      	str	r3, [r1, #4]
			break;
 8002012:	e018      	b.n	8002046 <ConstructData+0x13e>
		case 6:
			DecimalData*=0.0001; // XX.XXXX
 8002014:	4b23      	ldr	r3, [pc, #140]	@ (80020a4 <ConstructData+0x19c>)
 8002016:	6818      	ldr	r0, [r3, #0]
 8002018:	6859      	ldr	r1, [r3, #4]
 800201a:	4a2b      	ldr	r2, [pc, #172]	@ (80020c8 <ConstructData+0x1c0>)
 800201c:	4b2b      	ldr	r3, [pc, #172]	@ (80020cc <ConstructData+0x1c4>)
 800201e:	f7fe fa65 	bl	80004ec <__aeabi_dmul>
 8002022:	0002      	movs	r2, r0
 8002024:	000b      	movs	r3, r1
 8002026:	491f      	ldr	r1, [pc, #124]	@ (80020a4 <ConstructData+0x19c>)
 8002028:	600a      	str	r2, [r1, #0]
 800202a:	604b      	str	r3, [r1, #4]
		case 7:
			DecimalData*=0.00001; // X.XXXXX
 800202c:	4b1d      	ldr	r3, [pc, #116]	@ (80020a4 <ConstructData+0x19c>)
 800202e:	6818      	ldr	r0, [r3, #0]
 8002030:	6859      	ldr	r1, [r3, #4]
 8002032:	4a27      	ldr	r2, [pc, #156]	@ (80020d0 <ConstructData+0x1c8>)
 8002034:	4b27      	ldr	r3, [pc, #156]	@ (80020d4 <ConstructData+0x1cc>)
 8002036:	f7fe fa59 	bl	80004ec <__aeabi_dmul>
 800203a:	0002      	movs	r2, r0
 800203c:	000b      	movs	r3, r1
 800203e:	4919      	ldr	r1, [pc, #100]	@ (80020a4 <ConstructData+0x19c>)
 8002040:	600a      	str	r2, [r1, #0]
 8002042:	604b      	str	r3, [r1, #4]
			break;
 8002044:	46c0      	nop			@ (mov r8, r8)
	}

	uint8_t STB_Bitof_1 = ((MyData.STB >> 6) & 1);
 8002046:	4b11      	ldr	r3, [pc, #68]	@ (800208c <ConstructData+0x184>)
 8002048:	789b      	ldrb	r3, [r3, #2]
 800204a:	099b      	lsrs	r3, r3, #6
 800204c:	b2da      	uxtb	r2, r3
 800204e:	1d3b      	adds	r3, r7, #4
 8002050:	2101      	movs	r1, #1
 8002052:	400a      	ands	r2, r1
 8002054:	701a      	strb	r2, [r3, #0]
	if(STB_Bitof_1 == 0){ // Weight positive
 8002056:	1d3b      	adds	r3, r7, #4
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d106      	bne.n	800206c <ConstructData+0x164>
		SignedDecimalData=DecimalData;
 800205e:	4b11      	ldr	r3, [pc, #68]	@ (80020a4 <ConstructData+0x19c>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	491c      	ldr	r1, [pc, #112]	@ (80020d8 <ConstructData+0x1d0>)
 8002066:	600a      	str	r2, [r1, #0]
 8002068:	604b      	str	r3, [r1, #4]
	}
	else{ // Weight Negative
		SignedDecimalData=-DecimalData;
	}
}
 800206a:	e00b      	b.n	8002084 <ConstructData+0x17c>
		SignedDecimalData=-DecimalData;
 800206c:	4b0d      	ldr	r3, [pc, #52]	@ (80020a4 <ConstructData+0x19c>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	0011      	movs	r1, r2
 8002074:	000c      	movs	r4, r1
 8002076:	2180      	movs	r1, #128	@ 0x80
 8002078:	0609      	lsls	r1, r1, #24
 800207a:	4059      	eors	r1, r3
 800207c:	000d      	movs	r5, r1
 800207e:	4b16      	ldr	r3, [pc, #88]	@ (80020d8 <ConstructData+0x1d0>)
 8002080:	601c      	str	r4, [r3, #0]
 8002082:	605d      	str	r5, [r3, #4]
}
 8002084:	46c0      	nop			@ (mov r8, r8)
 8002086:	46bd      	mov	sp, r7
 8002088:	b002      	add	sp, #8
 800208a:	bdb0      	pop	{r4, r5, r7, pc}
 800208c:	20000170 	.word	0x20000170
 8002090:	200001a8 	.word	0x200001a8
 8002094:	200001a9 	.word	0x200001a9
 8002098:	200001aa 	.word	0x200001aa
 800209c:	200001ab 	.word	0x200001ab
 80020a0:	08002c1c 	.word	0x08002c1c
 80020a4:	200001b0 	.word	0x200001b0
 80020a8:	40590000 	.word	0x40590000
 80020ac:	40240000 	.word	0x40240000
 80020b0:	9999999a 	.word	0x9999999a
 80020b4:	3fb99999 	.word	0x3fb99999
 80020b8:	47ae147b 	.word	0x47ae147b
 80020bc:	3f847ae1 	.word	0x3f847ae1
 80020c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80020c4:	3f50624d 	.word	0x3f50624d
 80020c8:	eb1c432d 	.word	0xeb1c432d
 80020cc:	3f1a36e2 	.word	0x3f1a36e2
 80020d0:	88e368f1 	.word	0x88e368f1
 80020d4:	3ee4f8b5 	.word	0x3ee4f8b5
 80020d8:	200001b8 	.word	0x200001b8

080020dc <LightTaskWithDouble>:
	else{
		LED_Off();
	}
}

void LightTaskWithDouble(double ProcessedData){
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6038      	str	r0, [r7, #0]
 80020e4:	6079      	str	r1, [r7, #4]
	if ( ProcessedData > 1.330 && ProcessedData < 1.340){ // Blink LED, if the proccessed integer is at between desired borders
 80020e6:	4a0d      	ldr	r2, [pc, #52]	@ (800211c <LightTaskWithDouble+0x40>)
 80020e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002120 <LightTaskWithDouble+0x44>)
 80020ea:	6838      	ldr	r0, [r7, #0]
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	f7fe f8bf 	bl	8000270 <__aeabi_dcmpgt>
 80020f2:	1e03      	subs	r3, r0, #0
 80020f4:	d00a      	beq.n	800210c <LightTaskWithDouble+0x30>
 80020f6:	4a0b      	ldr	r2, [pc, #44]	@ (8002124 <LightTaskWithDouble+0x48>)
 80020f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002128 <LightTaskWithDouble+0x4c>)
 80020fa:	6838      	ldr	r0, [r7, #0]
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	f7fe f8a3 	bl	8000248 <__aeabi_dcmplt>
 8002102:	1e03      	subs	r3, r0, #0
 8002104:	d002      	beq.n	800210c <LightTaskWithDouble+0x30>
			LED_On();
 8002106:	f7ff fd4d 	bl	8001ba4 <LED_On>
 800210a:	e002      	b.n	8002112 <LightTaskWithDouble+0x36>
		}
		else{
			LED_Off();
 800210c:	f7ff fd55 	bl	8001bba <LED_Off>
		}
}
 8002110:	46c0      	nop			@ (mov r8, r8)
 8002112:	46c0      	nop			@ (mov r8, r8)
 8002114:	46bd      	mov	sp, r7
 8002116:	b002      	add	sp, #8
 8002118:	bd80      	pop	{r7, pc}
 800211a:	46c0      	nop			@ (mov r8, r8)
 800211c:	147ae148 	.word	0x147ae148
 8002120:	3ff547ae 	.word	0x3ff547ae
 8002124:	d70a3d71 	.word	0xd70a3d71
 8002128:	3ff570a3 	.word	0x3ff570a3

0800212c <LL_DMA_IsActiveFlag_TC2>:
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF2) == (DMA_ISR_TCIF2)) ? 1UL : 0UL);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2220      	movs	r2, #32
 800213a:	4013      	ands	r3, r2
 800213c:	2b20      	cmp	r3, #32
 800213e:	d101      	bne.n	8002144 <LL_DMA_IsActiveFlag_TC2+0x18>
 8002140:	2301      	movs	r3, #1
 8002142:	e000      	b.n	8002146 <LL_DMA_IsActiveFlag_TC2+0x1a>
 8002144:	2300      	movs	r3, #0
}
 8002146:	0018      	movs	r0, r3
 8002148:	46bd      	mov	sp, r7
 800214a:	b002      	add	sp, #8
 800214c:	bd80      	pop	{r7, pc}

0800214e <LL_DMA_IsActiveFlag_TE2>:
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b082      	sub	sp, #8
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF2) == (DMA_ISR_TEIF2)) ? 1UL : 0UL);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2280      	movs	r2, #128	@ 0x80
 800215c:	4013      	ands	r3, r2
 800215e:	2b80      	cmp	r3, #128	@ 0x80
 8002160:	d101      	bne.n	8002166 <LL_DMA_IsActiveFlag_TE2+0x18>
 8002162:	2301      	movs	r3, #1
 8002164:	e000      	b.n	8002168 <LL_DMA_IsActiveFlag_TE2+0x1a>
 8002166:	2300      	movs	r3, #0
}
 8002168:	0018      	movs	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	b002      	add	sp, #8
 800216e:	bd80      	pop	{r7, pc}

08002170 <LL_DMA_ClearFlag_TC2>:
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF2);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2220      	movs	r2, #32
 800217c:	605a      	str	r2, [r3, #4]
}
 800217e:	46c0      	nop			@ (mov r8, r8)
 8002180:	46bd      	mov	sp, r7
 8002182:	b002      	add	sp, #8
 8002184:	bd80      	pop	{r7, pc}
	...

08002188 <LL_EXTI_IsActiveFallingFlag_0_31>:
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->FPR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8002190:	4b06      	ldr	r3, [pc, #24]	@ (80021ac <LL_EXTI_IsActiveFallingFlag_0_31+0x24>)
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	4013      	ands	r3, r2
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	429a      	cmp	r2, r3
 800219c:	d101      	bne.n	80021a2 <LL_EXTI_IsActiveFallingFlag_0_31+0x1a>
 800219e:	2301      	movs	r3, #1
 80021a0:	e000      	b.n	80021a4 <LL_EXTI_IsActiveFallingFlag_0_31+0x1c>
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	0018      	movs	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	b002      	add	sp, #8
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40021800 	.word	0x40021800

080021b0 <LL_EXTI_ClearFallingFlag_0_31>:
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 80021b8:	4b03      	ldr	r3, [pc, #12]	@ (80021c8 <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	611a      	str	r2, [r3, #16]
}
 80021be:	46c0      	nop			@ (mov r8, r8)
 80021c0:	46bd      	mov	sp, r7
 80021c2:	b002      	add	sp, #8
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	46c0      	nop			@ (mov r8, r8)
 80021c8:	40021800 	.word	0x40021800

080021cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021d0:	46c0      	nop			@ (mov r8, r8)
 80021d2:	e7fd      	b.n	80021d0 <NMI_Handler+0x4>

080021d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021d8:	46c0      	nop			@ (mov r8, r8)
 80021da:	e7fd      	b.n	80021d8 <HardFault_Handler+0x4>

080021dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80021e0:	46c0      	nop			@ (mov r8, r8)
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ea:	46c0      	nop			@ (mov r8, r8)
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021f4:	46c0      	nop			@ (mov r8, r8)
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80021fe:	46c0      	nop			@ (mov r8, r8)
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */
	if (LL_DMA_IsActiveFlag_TC2(DMA1))
 8002208:	4b0b      	ldr	r3, [pc, #44]	@ (8002238 <DMA1_Channel2_3_IRQHandler+0x34>)
 800220a:	0018      	movs	r0, r3
 800220c:	f7ff ff8e 	bl	800212c <LL_DMA_IsActiveFlag_TC2>
 8002210:	1e03      	subs	r3, r0, #0
 8002212:	d006      	beq.n	8002222 <DMA1_Channel2_3_IRQHandler+0x1e>
  {
    LL_DMA_ClearFlag_TC2(DMA1);
 8002214:	4b08      	ldr	r3, [pc, #32]	@ (8002238 <DMA1_Channel2_3_IRQHandler+0x34>)
 8002216:	0018      	movs	r0, r3
 8002218:	f7ff ffaa 	bl	8002170 <LL_DMA_ClearFlag_TC2>
    /* Call function Reception complete Callback */
    DMA1_ReceiveComplete_Callback();
 800221c:	f7ff fd2c 	bl	8001c78 <DMA1_ReceiveComplete_Callback>
  /* USER CODE END DMA1_Channel2_3_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002220:	e007      	b.n	8002232 <DMA1_Channel2_3_IRQHandler+0x2e>
  else if (LL_DMA_IsActiveFlag_TE2(DMA1))
 8002222:	4b05      	ldr	r3, [pc, #20]	@ (8002238 <DMA1_Channel2_3_IRQHandler+0x34>)
 8002224:	0018      	movs	r0, r3
 8002226:	f7ff ff92 	bl	800214e <LL_DMA_IsActiveFlag_TE2>
 800222a:	1e03      	subs	r3, r0, #0
 800222c:	d001      	beq.n	8002232 <DMA1_Channel2_3_IRQHandler+0x2e>
    USART_TransferError_Callback();
 800222e:	f7ff fd41 	bl	8001cb4 <USART_TransferError_Callback>
}
 8002232:	46c0      	nop			@ (mov r8, r8)
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40020000 	.word	0x40020000

0800223c <EXTI4_15_IRQHandler>:
  * @brief This function handles USART2 Interrupt.
  */

/* USER CODE BEGIN 1 */
void USER_BUTTON_IRQHANDLER(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* Manage Flags */
  if (LL_EXTI_IsActiveFallingFlag_0_31(USER_BUTTON_EXTI_LINE) != RESET)
 8002240:	2380      	movs	r3, #128	@ 0x80
 8002242:	019b      	lsls	r3, r3, #6
 8002244:	0018      	movs	r0, r3
 8002246:	f7ff ff9f 	bl	8002188 <LL_EXTI_IsActiveFallingFlag_0_31>
 800224a:	1e03      	subs	r3, r0, #0
 800224c:	d006      	beq.n	800225c <EXTI4_15_IRQHandler+0x20>
  {
    LL_EXTI_ClearFallingFlag_0_31(USER_BUTTON_EXTI_LINE);
 800224e:	2380      	movs	r3, #128	@ 0x80
 8002250:	019b      	lsls	r3, r3, #6
 8002252:	0018      	movs	r0, r3
 8002254:	f7ff ffac 	bl	80021b0 <LL_EXTI_ClearFallingFlag_0_31>

    /* Handle User push-button press in dedicated function */
    UserButton_Callback();
 8002258:	f7ff fd18 	bl	8001c8c <UserButton_Callback>
  }
}
 800225c:	46c0      	nop			@ (mov r8, r8)
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002266:	46c0      	nop			@ (mov r8, r8)
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800226c:	480d      	ldr	r0, [pc, #52]	@ (80022a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800226e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002270:	f7ff fff7 	bl	8002262 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002274:	480c      	ldr	r0, [pc, #48]	@ (80022a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002276:	490d      	ldr	r1, [pc, #52]	@ (80022ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8002278:	4a0d      	ldr	r2, [pc, #52]	@ (80022b0 <LoopForever+0xe>)
  movs r3, #0
 800227a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800227c:	e002      	b.n	8002284 <LoopCopyDataInit>

0800227e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800227e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002280:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002282:	3304      	adds	r3, #4

08002284 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002284:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002286:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002288:	d3f9      	bcc.n	800227e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800228a:	4a0a      	ldr	r2, [pc, #40]	@ (80022b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800228c:	4c0a      	ldr	r4, [pc, #40]	@ (80022b8 <LoopForever+0x16>)
  movs r3, #0
 800228e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002290:	e001      	b.n	8002296 <LoopFillZerobss>

08002292 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002292:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002294:	3204      	adds	r2, #4

08002296 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002296:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002298:	d3fb      	bcc.n	8002292 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800229a:	f000 fc8b 	bl	8002bb4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800229e:	f7ff fa4d 	bl	800173c <main>

080022a2 <LoopForever>:

LoopForever:
  b LoopForever
 80022a2:	e7fe      	b.n	80022a2 <LoopForever>
  ldr   r0, =_estack
 80022a4:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80022a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022ac:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 80022b0:	08002cd4 	.word	0x08002cd4
  ldr r2, =_sbss
 80022b4:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 80022b8:	200001c0 	.word	0x200001c0

080022bc <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022bc:	e7fe      	b.n	80022bc <ADC1_COMP_IRQHandler>

080022be <LL_GPIO_SetPinMode>:
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b084      	sub	sp, #16
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	60f8      	str	r0, [r7, #12]
 80022c6:	60b9      	str	r1, [r7, #8]
 80022c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6819      	ldr	r1, [r3, #0]
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	435b      	muls	r3, r3
 80022d2:	001a      	movs	r2, r3
 80022d4:	0013      	movs	r3, r2
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	189b      	adds	r3, r3, r2
 80022da:	43db      	mvns	r3, r3
 80022dc:	400b      	ands	r3, r1
 80022de:	001a      	movs	r2, r3
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	435b      	muls	r3, r3
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	434b      	muls	r3, r1
 80022e8:	431a      	orrs	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	601a      	str	r2, [r3, #0]
}
 80022ee:	46c0      	nop			@ (mov r8, r8)
 80022f0:	46bd      	mov	sp, r7
 80022f2:	b004      	add	sp, #16
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <LL_GPIO_SetPinOutputType>:
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b084      	sub	sp, #16
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	60f8      	str	r0, [r7, #12]
 80022fe:	60b9      	str	r1, [r7, #8]
 8002300:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	68ba      	ldr	r2, [r7, #8]
 8002308:	43d2      	mvns	r2, r2
 800230a:	401a      	ands	r2, r3
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	434b      	muls	r3, r1
 8002312:	431a      	orrs	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	605a      	str	r2, [r3, #4]
}
 8002318:	46c0      	nop			@ (mov r8, r8)
 800231a:	46bd      	mov	sp, r7
 800231c:	b004      	add	sp, #16
 800231e:	bd80      	pop	{r7, pc}

08002320 <LL_GPIO_SetPinSpeed>:
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6899      	ldr	r1, [r3, #8]
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	435b      	muls	r3, r3
 8002334:	001a      	movs	r2, r3
 8002336:	0013      	movs	r3, r2
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	189b      	adds	r3, r3, r2
 800233c:	43db      	mvns	r3, r3
 800233e:	400b      	ands	r3, r1
 8002340:	001a      	movs	r2, r3
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	435b      	muls	r3, r3
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	434b      	muls	r3, r1
 800234a:	431a      	orrs	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	609a      	str	r2, [r3, #8]
}
 8002350:	46c0      	nop			@ (mov r8, r8)
 8002352:	46bd      	mov	sp, r7
 8002354:	b004      	add	sp, #16
 8002356:	bd80      	pop	{r7, pc}

08002358 <LL_GPIO_SetPinPull>:
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	68d9      	ldr	r1, [r3, #12]
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	435b      	muls	r3, r3
 800236c:	001a      	movs	r2, r3
 800236e:	0013      	movs	r3, r2
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	189b      	adds	r3, r3, r2
 8002374:	43db      	mvns	r3, r3
 8002376:	400b      	ands	r3, r1
 8002378:	001a      	movs	r2, r3
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	435b      	muls	r3, r3
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	434b      	muls	r3, r1
 8002382:	431a      	orrs	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	60da      	str	r2, [r3, #12]
}
 8002388:	46c0      	nop			@ (mov r8, r8)
 800238a:	46bd      	mov	sp, r7
 800238c:	b004      	add	sp, #16
 800238e:	bd80      	pop	{r7, pc}

08002390 <LL_GPIO_SetAFPin_0_7>:
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6a19      	ldr	r1, [r3, #32]
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	435b      	muls	r3, r3
 80023a4:	68ba      	ldr	r2, [r7, #8]
 80023a6:	4353      	muls	r3, r2
 80023a8:	68ba      	ldr	r2, [r7, #8]
 80023aa:	435a      	muls	r2, r3
 80023ac:	0013      	movs	r3, r2
 80023ae:	011b      	lsls	r3, r3, #4
 80023b0:	1a9b      	subs	r3, r3, r2
 80023b2:	43db      	mvns	r3, r3
 80023b4:	400b      	ands	r3, r1
 80023b6:	001a      	movs	r2, r3
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	435b      	muls	r3, r3
 80023bc:	68b9      	ldr	r1, [r7, #8]
 80023be:	434b      	muls	r3, r1
 80023c0:	68b9      	ldr	r1, [r7, #8]
 80023c2:	434b      	muls	r3, r1
 80023c4:	6879      	ldr	r1, [r7, #4]
 80023c6:	434b      	muls	r3, r1
 80023c8:	431a      	orrs	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	621a      	str	r2, [r3, #32]
}
 80023ce:	46c0      	nop			@ (mov r8, r8)
 80023d0:	46bd      	mov	sp, r7
 80023d2:	b004      	add	sp, #16
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <LL_GPIO_SetAFPin_8_15>:
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b084      	sub	sp, #16
 80023da:	af00      	add	r7, sp, #0
 80023dc:	60f8      	str	r0, [r7, #12]
 80023de:	60b9      	str	r1, [r7, #8]
 80023e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	0a1b      	lsrs	r3, r3, #8
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	0a12      	lsrs	r2, r2, #8
 80023ee:	4353      	muls	r3, r2
 80023f0:	68ba      	ldr	r2, [r7, #8]
 80023f2:	0a12      	lsrs	r2, r2, #8
 80023f4:	4353      	muls	r3, r2
 80023f6:	68ba      	ldr	r2, [r7, #8]
 80023f8:	0a12      	lsrs	r2, r2, #8
 80023fa:	435a      	muls	r2, r3
 80023fc:	0013      	movs	r3, r2
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	1a9b      	subs	r3, r3, r2
 8002402:	43db      	mvns	r3, r3
 8002404:	400b      	ands	r3, r1
 8002406:	001a      	movs	r2, r3
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	0a1b      	lsrs	r3, r3, #8
 800240c:	68b9      	ldr	r1, [r7, #8]
 800240e:	0a09      	lsrs	r1, r1, #8
 8002410:	434b      	muls	r3, r1
 8002412:	68b9      	ldr	r1, [r7, #8]
 8002414:	0a09      	lsrs	r1, r1, #8
 8002416:	434b      	muls	r3, r1
 8002418:	68b9      	ldr	r1, [r7, #8]
 800241a:	0a09      	lsrs	r1, r1, #8
 800241c:	434b      	muls	r3, r1
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	434b      	muls	r3, r1
 8002422:	431a      	orrs	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002428:	46c0      	nop			@ (mov r8, r8)
 800242a:	46bd      	mov	sp, r7
 800242c:	b004      	add	sp, #16
 800242e:	bd80      	pop	{r7, pc}

08002430 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800243a:	2300      	movs	r3, #0
 800243c:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800243e:	e047      	b.n	80024d0 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2101      	movs	r1, #1
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	4091      	lsls	r1, r2
 800244a:	000a      	movs	r2, r1
 800244c:	4013      	ands	r3, r2
 800244e:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d039      	beq.n	80024ca <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d003      	beq.n	8002466 <LL_GPIO_Init+0x36>
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b02      	cmp	r3, #2
 8002464:	d10d      	bne.n	8002482 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	68b9      	ldr	r1, [r7, #8]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	0018      	movs	r0, r3
 8002470:	f7ff ff56 	bl	8002320 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	68da      	ldr	r2, [r3, #12]
 8002478:	68b9      	ldr	r1, [r7, #8]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	0018      	movs	r0, r3
 800247e:	f7ff ff3a 	bl	80022f6 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	691a      	ldr	r2, [r3, #16]
 8002486:	68b9      	ldr	r1, [r7, #8]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	0018      	movs	r0, r3
 800248c:	f7ff ff64 	bl	8002358 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b02      	cmp	r3, #2
 8002496:	d111      	bne.n	80024bc <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	2bff      	cmp	r3, #255	@ 0xff
 800249c:	d807      	bhi.n	80024ae <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	695a      	ldr	r2, [r3, #20]
 80024a2:	68b9      	ldr	r1, [r7, #8]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	0018      	movs	r0, r3
 80024a8:	f7ff ff72 	bl	8002390 <LL_GPIO_SetAFPin_0_7>
 80024ac:	e006      	b.n	80024bc <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	695a      	ldr	r2, [r3, #20]
 80024b2:	68b9      	ldr	r1, [r7, #8]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	0018      	movs	r0, r3
 80024b8:	f7ff ff8d 	bl	80023d6 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	68b9      	ldr	r1, [r7, #8]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	0018      	movs	r0, r3
 80024c6:	f7ff fefa 	bl	80022be <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	3301      	adds	r3, #1
 80024ce:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	40da      	lsrs	r2, r3
 80024d8:	1e13      	subs	r3, r2, #0
 80024da:	d1b1      	bne.n	8002440 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 80024dc:	2300      	movs	r3, #0
}
 80024de:	0018      	movs	r0, r3
 80024e0:	46bd      	mov	sp, r7
 80024e2:	b004      	add	sp, #16
 80024e4:	bd80      	pop	{r7, pc}
	...

080024e8 <LL_RCC_HSI_IsReady>:
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80024ec:	4b07      	ldr	r3, [pc, #28]	@ (800250c <LL_RCC_HSI_IsReady+0x24>)
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	2380      	movs	r3, #128	@ 0x80
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	401a      	ands	r2, r3
 80024f6:	2380      	movs	r3, #128	@ 0x80
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d101      	bne.n	8002502 <LL_RCC_HSI_IsReady+0x1a>
 80024fe:	2301      	movs	r3, #1
 8002500:	e000      	b.n	8002504 <LL_RCC_HSI_IsReady+0x1c>
 8002502:	2300      	movs	r3, #0
}
 8002504:	0018      	movs	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	46c0      	nop			@ (mov r8, r8)
 800250c:	40021000 	.word	0x40021000

08002510 <LL_RCC_LSE_IsReady>:
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002514:	4b05      	ldr	r3, [pc, #20]	@ (800252c <LL_RCC_LSE_IsReady+0x1c>)
 8002516:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002518:	2202      	movs	r2, #2
 800251a:	4013      	ands	r3, r2
 800251c:	2b02      	cmp	r3, #2
 800251e:	d101      	bne.n	8002524 <LL_RCC_LSE_IsReady+0x14>
 8002520:	2301      	movs	r3, #1
 8002522:	e000      	b.n	8002526 <LL_RCC_LSE_IsReady+0x16>
 8002524:	2300      	movs	r3, #0
}
 8002526:	0018      	movs	r0, r3
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40021000 	.word	0x40021000

08002530 <LL_RCC_GetSysClkSource>:
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002534:	4b03      	ldr	r3, [pc, #12]	@ (8002544 <LL_RCC_GetSysClkSource+0x14>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	2238      	movs	r2, #56	@ 0x38
 800253a:	4013      	ands	r3, r2
}
 800253c:	0018      	movs	r0, r3
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	46c0      	nop			@ (mov r8, r8)
 8002544:	40021000 	.word	0x40021000

08002548 <LL_RCC_GetAHBPrescaler>:
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800254c:	4b03      	ldr	r3, [pc, #12]	@ (800255c <LL_RCC_GetAHBPrescaler+0x14>)
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	23f0      	movs	r3, #240	@ 0xf0
 8002552:	011b      	lsls	r3, r3, #4
 8002554:	4013      	ands	r3, r2
}
 8002556:	0018      	movs	r0, r3
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40021000 	.word	0x40021000

08002560 <LL_RCC_GetAPB1Prescaler>:
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002564:	4b03      	ldr	r3, [pc, #12]	@ (8002574 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	23e0      	movs	r3, #224	@ 0xe0
 800256a:	01db      	lsls	r3, r3, #7
 800256c:	4013      	ands	r3, r2
}
 800256e:	0018      	movs	r0, r3
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	40021000 	.word	0x40021000

08002578 <LL_RCC_GetUSARTClockSource>:
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8002580:	4b05      	ldr	r3, [pc, #20]	@ (8002598 <LL_RCC_GetUSARTClockSource+0x20>)
 8002582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	401a      	ands	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	041b      	lsls	r3, r3, #16
 800258c:	4313      	orrs	r3, r2
}
 800258e:	0018      	movs	r0, r3
 8002590:	46bd      	mov	sp, r7
 8002592:	b002      	add	sp, #8
 8002594:	bd80      	pop	{r7, pc}
 8002596:	46c0      	nop			@ (mov r8, r8)
 8002598:	40021000 	.word	0x40021000

0800259c <LL_RCC_PLL_GetN>:
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80025a0:	4b03      	ldr	r3, [pc, #12]	@ (80025b0 <LL_RCC_PLL_GetN+0x14>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	0a1b      	lsrs	r3, r3, #8
 80025a6:	227f      	movs	r2, #127	@ 0x7f
 80025a8:	4013      	ands	r3, r2
}
 80025aa:	0018      	movs	r0, r3
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40021000 	.word	0x40021000

080025b4 <LL_RCC_PLL_GetR>:
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80025b8:	4b03      	ldr	r3, [pc, #12]	@ (80025c8 <LL_RCC_PLL_GetR+0x14>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	0f5b      	lsrs	r3, r3, #29
 80025be:	075b      	lsls	r3, r3, #29
}
 80025c0:	0018      	movs	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	46c0      	nop			@ (mov r8, r8)
 80025c8:	40021000 	.word	0x40021000

080025cc <LL_RCC_PLL_GetMainSource>:
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80025d0:	4b03      	ldr	r3, [pc, #12]	@ (80025e0 <LL_RCC_PLL_GetMainSource+0x14>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	2203      	movs	r2, #3
 80025d6:	4013      	ands	r3, r2
}
 80025d8:	0018      	movs	r0, r3
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	46c0      	nop			@ (mov r8, r8)
 80025e0:	40021000 	.word	0x40021000

080025e4 <LL_RCC_PLL_GetDivider>:
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80025e8:	4b03      	ldr	r3, [pc, #12]	@ (80025f8 <LL_RCC_PLL_GetDivider+0x14>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	2270      	movs	r2, #112	@ 0x70
 80025ee:	4013      	ands	r3, r2
}
 80025f0:	0018      	movs	r0, r3
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	46c0      	nop			@ (mov r8, r8)
 80025f8:	40021000 	.word	0x40021000

080025fc <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002604:	f000 f8a8 	bl	8002758 <RCC_GetSystemClockFreq>
 8002608:	0002      	movs	r2, r0
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	0018      	movs	r0, r3
 8002614:	f000 f8ce 	bl	80027b4 <RCC_GetHCLKClockFreq>
 8002618:	0002      	movs	r2, r0
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	0018      	movs	r0, r3
 8002624:	f000 f8de 	bl	80027e4 <RCC_GetPCLK1ClockFreq>
 8002628:	0002      	movs	r2, r0
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	609a      	str	r2, [r3, #8]
}
 800262e:	46c0      	nop			@ (mov r8, r8)
 8002630:	46bd      	mov	sp, r7
 8002632:	b002      	add	sp, #8
 8002634:	bd80      	pop	{r7, pc}
	...

08002638 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002640:	2300      	movs	r3, #0
 8002642:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b03      	cmp	r3, #3
 8002648:	d134      	bne.n	80026b4 <LL_RCC_GetUSARTClockFreq+0x7c>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	0018      	movs	r0, r3
 800264e:	f7ff ff93 	bl	8002578 <LL_RCC_GetUSARTClockSource>
 8002652:	0003      	movs	r3, r0
 8002654:	4a39      	ldr	r2, [pc, #228]	@ (800273c <LL_RCC_GetUSARTClockFreq+0x104>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d016      	beq.n	8002688 <LL_RCC_GetUSARTClockFreq+0x50>
 800265a:	4a38      	ldr	r2, [pc, #224]	@ (800273c <LL_RCC_GetUSARTClockFreq+0x104>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d81c      	bhi.n	800269a <LL_RCC_GetUSARTClockFreq+0x62>
 8002660:	4a37      	ldr	r2, [pc, #220]	@ (8002740 <LL_RCC_GetUSARTClockFreq+0x108>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d003      	beq.n	800266e <LL_RCC_GetUSARTClockFreq+0x36>
 8002666:	4a37      	ldr	r2, [pc, #220]	@ (8002744 <LL_RCC_GetUSARTClockFreq+0x10c>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d005      	beq.n	8002678 <LL_RCC_GetUSARTClockFreq+0x40>
 800266c:	e015      	b.n	800269a <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800266e:	f000 f873 	bl	8002758 <RCC_GetSystemClockFreq>
 8002672:	0003      	movs	r3, r0
 8002674:	60fb      	str	r3, [r7, #12]
        break;
 8002676:	e05c      	b.n	8002732 <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 8002678:	f7ff ff36 	bl	80024e8 <LL_RCC_HSI_IsReady>
 800267c:	0003      	movs	r3, r0
 800267e:	2b01      	cmp	r3, #1
 8002680:	d150      	bne.n	8002724 <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = HSI_VALUE;
 8002682:	4b31      	ldr	r3, [pc, #196]	@ (8002748 <LL_RCC_GetUSARTClockFreq+0x110>)
 8002684:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002686:	e04d      	b.n	8002724 <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 8002688:	f7ff ff42 	bl	8002510 <LL_RCC_LSE_IsReady>
 800268c:	0003      	movs	r3, r0
 800268e:	2b01      	cmp	r3, #1
 8002690:	d14a      	bne.n	8002728 <LL_RCC_GetUSARTClockFreq+0xf0>
        {
          usart_frequency = LSE_VALUE;
 8002692:	2380      	movs	r3, #128	@ 0x80
 8002694:	021b      	lsls	r3, r3, #8
 8002696:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002698:	e046      	b.n	8002728 <LL_RCC_GetUSARTClockFreq+0xf0>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800269a:	f000 f85d 	bl	8002758 <RCC_GetSystemClockFreq>
 800269e:	0003      	movs	r3, r0
 80026a0:	0018      	movs	r0, r3
 80026a2:	f000 f887 	bl	80027b4 <RCC_GetHCLKClockFreq>
 80026a6:	0003      	movs	r3, r0
 80026a8:	0018      	movs	r0, r3
 80026aa:	f000 f89b 	bl	80027e4 <RCC_GetPCLK1ClockFreq>
 80026ae:	0003      	movs	r3, r0
 80026b0:	60fb      	str	r3, [r7, #12]
        break;
 80026b2:	e03e      	b.n	8002732 <LL_RCC_GetUSARTClockFreq+0xfa>
    }
  }
#if defined(RCC_CCIPR_USART2SEL)
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b0c      	cmp	r3, #12
 80026b8:	d13b      	bne.n	8002732 <LL_RCC_GetUSARTClockFreq+0xfa>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	0018      	movs	r0, r3
 80026be:	f7ff ff5b 	bl	8002578 <LL_RCC_GetUSARTClockSource>
 80026c2:	0003      	movs	r3, r0
 80026c4:	4a21      	ldr	r2, [pc, #132]	@ (800274c <LL_RCC_GetUSARTClockFreq+0x114>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d016      	beq.n	80026f8 <LL_RCC_GetUSARTClockFreq+0xc0>
 80026ca:	4a20      	ldr	r2, [pc, #128]	@ (800274c <LL_RCC_GetUSARTClockFreq+0x114>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d81c      	bhi.n	800270a <LL_RCC_GetUSARTClockFreq+0xd2>
 80026d0:	4a1f      	ldr	r2, [pc, #124]	@ (8002750 <LL_RCC_GetUSARTClockFreq+0x118>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d003      	beq.n	80026de <LL_RCC_GetUSARTClockFreq+0xa6>
 80026d6:	4a1f      	ldr	r2, [pc, #124]	@ (8002754 <LL_RCC_GetUSARTClockFreq+0x11c>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d005      	beq.n	80026e8 <LL_RCC_GetUSARTClockFreq+0xb0>
 80026dc:	e015      	b.n	800270a <LL_RCC_GetUSARTClockFreq+0xd2>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80026de:	f000 f83b 	bl	8002758 <RCC_GetSystemClockFreq>
 80026e2:	0003      	movs	r3, r0
 80026e4:	60fb      	str	r3, [r7, #12]
        break;
 80026e6:	e024      	b.n	8002732 <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 80026e8:	f7ff fefe 	bl	80024e8 <LL_RCC_HSI_IsReady>
 80026ec:	0003      	movs	r3, r0
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d11c      	bne.n	800272c <LL_RCC_GetUSARTClockFreq+0xf4>
        {
          usart_frequency = HSI_VALUE;
 80026f2:	4b15      	ldr	r3, [pc, #84]	@ (8002748 <LL_RCC_GetUSARTClockFreq+0x110>)
 80026f4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80026f6:	e019      	b.n	800272c <LL_RCC_GetUSARTClockFreq+0xf4>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 80026f8:	f7ff ff0a 	bl	8002510 <LL_RCC_LSE_IsReady>
 80026fc:	0003      	movs	r3, r0
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d116      	bne.n	8002730 <LL_RCC_GetUSARTClockFreq+0xf8>
        {
          usart_frequency = LSE_VALUE;
 8002702:	2380      	movs	r3, #128	@ 0x80
 8002704:	021b      	lsls	r3, r3, #8
 8002706:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002708:	e012      	b.n	8002730 <LL_RCC_GetUSARTClockFreq+0xf8>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800270a:	f000 f825 	bl	8002758 <RCC_GetSystemClockFreq>
 800270e:	0003      	movs	r3, r0
 8002710:	0018      	movs	r0, r3
 8002712:	f000 f84f 	bl	80027b4 <RCC_GetHCLKClockFreq>
 8002716:	0003      	movs	r3, r0
 8002718:	0018      	movs	r0, r3
 800271a:	f000 f863 	bl	80027e4 <RCC_GetPCLK1ClockFreq>
 800271e:	0003      	movs	r3, r0
 8002720:	60fb      	str	r3, [r7, #12]
        break;
 8002722:	e006      	b.n	8002732 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 8002724:	46c0      	nop			@ (mov r8, r8)
 8002726:	e004      	b.n	8002732 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 8002728:	46c0      	nop			@ (mov r8, r8)
 800272a:	e002      	b.n	8002732 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800272c:	46c0      	nop			@ (mov r8, r8)
 800272e:	e000      	b.n	8002732 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 8002730:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 8002732:	68fb      	ldr	r3, [r7, #12]
}
 8002734:	0018      	movs	r0, r3
 8002736:	46bd      	mov	sp, r7
 8002738:	b004      	add	sp, #16
 800273a:	bd80      	pop	{r7, pc}
 800273c:	00030003 	.word	0x00030003
 8002740:	00030001 	.word	0x00030001
 8002744:	00030002 	.word	0x00030002
 8002748:	00f42400 	.word	0x00f42400
 800274c:	000c000c 	.word	0x000c000c
 8002750:	000c0004 	.word	0x000c0004
 8002754:	000c0008 	.word	0x000c0008

08002758 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800275e:	f7ff fee7 	bl	8002530 <LL_RCC_GetSysClkSource>
 8002762:	0003      	movs	r3, r0
 8002764:	2b08      	cmp	r3, #8
 8002766:	d002      	beq.n	800276e <RCC_GetSystemClockFreq+0x16>
 8002768:	2b10      	cmp	r3, #16
 800276a:	d003      	beq.n	8002774 <RCC_GetSystemClockFreq+0x1c>
 800276c:	e007      	b.n	800277e <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800276e:	4b0e      	ldr	r3, [pc, #56]	@ (80027a8 <RCC_GetSystemClockFreq+0x50>)
 8002770:	607b      	str	r3, [r7, #4]
      break;
 8002772:	e014      	b.n	800279e <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002774:	f000 f84c 	bl	8002810 <RCC_PLL_GetFreqDomain_SYS>
 8002778:	0003      	movs	r3, r0
 800277a:	607b      	str	r3, [r7, #4]
      break;
 800277c:	e00f      	b.n	800279e <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800277e:	4b0b      	ldr	r3, [pc, #44]	@ (80027ac <RCC_GetSystemClockFreq+0x54>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	0adb      	lsrs	r3, r3, #11
 8002784:	2207      	movs	r2, #7
 8002786:	4013      	ands	r3, r2
 8002788:	2201      	movs	r2, #1
 800278a:	409a      	lsls	r2, r3
 800278c:	0013      	movs	r3, r2
 800278e:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 8002790:	6839      	ldr	r1, [r7, #0]
 8002792:	4807      	ldr	r0, [pc, #28]	@ (80027b0 <RCC_GetSystemClockFreq+0x58>)
 8002794:	f7fd fcb6 	bl	8000104 <__udivsi3>
 8002798:	0003      	movs	r3, r0
 800279a:	607b      	str	r3, [r7, #4]
      break;
 800279c:	46c0      	nop			@ (mov r8, r8)
  }

  return frequency;
 800279e:	687b      	ldr	r3, [r7, #4]
}
 80027a0:	0018      	movs	r0, r3
 80027a2:	46bd      	mov	sp, r7
 80027a4:	b002      	add	sp, #8
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	007a1200 	.word	0x007a1200
 80027ac:	40021000 	.word	0x40021000
 80027b0:	00f42400 	.word	0x00f42400

080027b4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80027bc:	f7ff fec4 	bl	8002548 <LL_RCC_GetAHBPrescaler>
 80027c0:	0003      	movs	r3, r0
 80027c2:	0a1b      	lsrs	r3, r3, #8
 80027c4:	220f      	movs	r2, #15
 80027c6:	401a      	ands	r2, r3
 80027c8:	4b05      	ldr	r3, [pc, #20]	@ (80027e0 <RCC_GetHCLKClockFreq+0x2c>)
 80027ca:	0092      	lsls	r2, r2, #2
 80027cc:	58d3      	ldr	r3, [r2, r3]
 80027ce:	221f      	movs	r2, #31
 80027d0:	4013      	ands	r3, r2
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	40da      	lsrs	r2, r3
 80027d6:	0013      	movs	r3, r2
}
 80027d8:	0018      	movs	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	b002      	add	sp, #8
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	08002c3c 	.word	0x08002c3c

080027e4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80027ec:	f7ff feb8 	bl	8002560 <LL_RCC_GetAPB1Prescaler>
 80027f0:	0003      	movs	r3, r0
 80027f2:	0b1a      	lsrs	r2, r3, #12
 80027f4:	4b05      	ldr	r3, [pc, #20]	@ (800280c <RCC_GetPCLK1ClockFreq+0x28>)
 80027f6:	0092      	lsls	r2, r2, #2
 80027f8:	58d3      	ldr	r3, [r2, r3]
 80027fa:	221f      	movs	r2, #31
 80027fc:	4013      	ands	r3, r2
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	40da      	lsrs	r2, r3
 8002802:	0013      	movs	r3, r2
}
 8002804:	0018      	movs	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	b002      	add	sp, #8
 800280a:	bd80      	pop	{r7, pc}
 800280c:	08002c7c 	.word	0x08002c7c

08002810 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002810:	b590      	push	{r4, r7, lr}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002816:	f7ff fed9 	bl	80025cc <LL_RCC_PLL_GetMainSource>
 800281a:	0003      	movs	r3, r0
 800281c:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	2b02      	cmp	r3, #2
 8002822:	d003      	beq.n	800282c <RCC_PLL_GetFreqDomain_SYS+0x1c>
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	2b03      	cmp	r3, #3
 8002828:	d003      	beq.n	8002832 <RCC_PLL_GetFreqDomain_SYS+0x22>
 800282a:	e005      	b.n	8002838 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800282c:	4b13      	ldr	r3, [pc, #76]	@ (800287c <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800282e:	607b      	str	r3, [r7, #4]
      break;
 8002830:	e005      	b.n	800283e <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002832:	4b13      	ldr	r3, [pc, #76]	@ (8002880 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 8002834:	607b      	str	r3, [r7, #4]
      break;
 8002836:	e002      	b.n	800283e <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 8002838:	4b10      	ldr	r3, [pc, #64]	@ (800287c <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800283a:	607b      	str	r3, [r7, #4]
      break;
 800283c:	46c0      	nop			@ (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800283e:	f7ff fead 	bl	800259c <LL_RCC_PLL_GetN>
 8002842:	0002      	movs	r2, r0
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4353      	muls	r3, r2
 8002848:	001c      	movs	r4, r3
 800284a:	f7ff fecb 	bl	80025e4 <LL_RCC_PLL_GetDivider>
 800284e:	0003      	movs	r3, r0
 8002850:	091b      	lsrs	r3, r3, #4
 8002852:	3301      	adds	r3, #1
 8002854:	0019      	movs	r1, r3
 8002856:	0020      	movs	r0, r4
 8002858:	f7fd fc54 	bl	8000104 <__udivsi3>
 800285c:	0003      	movs	r3, r0
 800285e:	001c      	movs	r4, r3
 8002860:	f7ff fea8 	bl	80025b4 <LL_RCC_PLL_GetR>
 8002864:	0003      	movs	r3, r0
 8002866:	0f5b      	lsrs	r3, r3, #29
 8002868:	3301      	adds	r3, #1
 800286a:	0019      	movs	r1, r3
 800286c:	0020      	movs	r0, r4
 800286e:	f7fd fc49 	bl	8000104 <__udivsi3>
 8002872:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8002874:	0018      	movs	r0, r3
 8002876:	46bd      	mov	sp, r7
 8002878:	b003      	add	sp, #12
 800287a:	bd90      	pop	{r4, r7, pc}
 800287c:	00f42400 	.word	0x00f42400
 8002880:	007a1200 	.word	0x007a1200

08002884 <LL_USART_IsEnabled>:
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2201      	movs	r2, #1
 8002892:	4013      	ands	r3, r2
 8002894:	2b01      	cmp	r3, #1
 8002896:	d101      	bne.n	800289c <LL_USART_IsEnabled+0x18>
 8002898:	2301      	movs	r3, #1
 800289a:	e000      	b.n	800289e <LL_USART_IsEnabled+0x1a>
 800289c:	2300      	movs	r3, #0
}
 800289e:	0018      	movs	r0, r3
 80028a0:	46bd      	mov	sp, r7
 80028a2:	b002      	add	sp, #8
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <LL_USART_SetPrescaler>:
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b082      	sub	sp, #8
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
 80028ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b4:	220f      	movs	r2, #15
 80028b6:	4393      	bics	r3, r2
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	b292      	uxth	r2, r2
 80028bc:	431a      	orrs	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80028c2:	46c0      	nop			@ (mov r8, r8)
 80028c4:	46bd      	mov	sp, r7
 80028c6:	b002      	add	sp, #8
 80028c8:	bd80      	pop	{r7, pc}
	...

080028cc <LL_USART_SetStopBitsLength>:
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	4a05      	ldr	r2, [pc, #20]	@ (80028f0 <LL_USART_SetStopBitsLength+0x24>)
 80028dc:	401a      	ands	r2, r3
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	431a      	orrs	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	605a      	str	r2, [r3, #4]
}
 80028e6:	46c0      	nop			@ (mov r8, r8)
 80028e8:	46bd      	mov	sp, r7
 80028ea:	b002      	add	sp, #8
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	46c0      	nop			@ (mov r8, r8)
 80028f0:	ffffcfff 	.word	0xffffcfff

080028f4 <LL_USART_SetHWFlowCtrl>:
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	4a05      	ldr	r2, [pc, #20]	@ (8002918 <LL_USART_SetHWFlowCtrl+0x24>)
 8002904:	401a      	ands	r2, r3
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	431a      	orrs	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	609a      	str	r2, [r3, #8]
}
 800290e:	46c0      	nop			@ (mov r8, r8)
 8002910:	46bd      	mov	sp, r7
 8002912:	b002      	add	sp, #8
 8002914:	bd80      	pop	{r7, pc}
 8002916:	46c0      	nop			@ (mov r8, r8)
 8002918:	fffffcff 	.word	0xfffffcff

0800291c <LL_USART_SetBaudRate>:
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
 8002928:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b0b      	cmp	r3, #11
 800292e:	d846      	bhi.n	80029be <LL_USART_SetBaudRate+0xa2>
  else if (BaudRate == 0U)
 8002930:	6a3b      	ldr	r3, [r7, #32]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d043      	beq.n	80029be <LL_USART_SetBaudRate+0xa2>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	2380      	movs	r3, #128	@ 0x80
 800293a:	021b      	lsls	r3, r3, #8
 800293c:	429a      	cmp	r2, r3
 800293e:	d126      	bne.n	800298e <LL_USART_SetBaudRate+0x72>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	b2db      	uxtb	r3, r3
 8002944:	001a      	movs	r2, r3
 8002946:	4b20      	ldr	r3, [pc, #128]	@ (80029c8 <LL_USART_SetBaudRate+0xac>)
 8002948:	0092      	lsls	r2, r2, #2
 800294a:	58d3      	ldr	r3, [r2, r3]
 800294c:	0019      	movs	r1, r3
 800294e:	68b8      	ldr	r0, [r7, #8]
 8002950:	f7fd fbd8 	bl	8000104 <__udivsi3>
 8002954:	0003      	movs	r3, r0
 8002956:	005a      	lsls	r2, r3, #1
 8002958:	6a3b      	ldr	r3, [r7, #32]
 800295a:	085b      	lsrs	r3, r3, #1
 800295c:	18d3      	adds	r3, r2, r3
 800295e:	6a39      	ldr	r1, [r7, #32]
 8002960:	0018      	movs	r0, r3
 8002962:	f7fd fbcf 	bl	8000104 <__udivsi3>
 8002966:	0003      	movs	r3, r0
 8002968:	b29b      	uxth	r3, r3
 800296a:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	4a17      	ldr	r2, [pc, #92]	@ (80029cc <LL_USART_SetBaudRate+0xb0>)
 8002970:	4013      	ands	r3, r2
 8002972:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	085b      	lsrs	r3, r3, #1
 8002978:	b29b      	uxth	r3, r3
 800297a:	001a      	movs	r2, r3
 800297c:	2307      	movs	r3, #7
 800297e:	4013      	ands	r3, r2
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	4313      	orrs	r3, r2
 8002984:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	60da      	str	r2, [r3, #12]
}
 800298c:	e017      	b.n	80029be <LL_USART_SetBaudRate+0xa2>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	b2db      	uxtb	r3, r3
 8002992:	001a      	movs	r2, r3
 8002994:	4b0c      	ldr	r3, [pc, #48]	@ (80029c8 <LL_USART_SetBaudRate+0xac>)
 8002996:	0092      	lsls	r2, r2, #2
 8002998:	58d3      	ldr	r3, [r2, r3]
 800299a:	0019      	movs	r1, r3
 800299c:	68b8      	ldr	r0, [r7, #8]
 800299e:	f7fd fbb1 	bl	8000104 <__udivsi3>
 80029a2:	0003      	movs	r3, r0
 80029a4:	001a      	movs	r2, r3
 80029a6:	6a3b      	ldr	r3, [r7, #32]
 80029a8:	085b      	lsrs	r3, r3, #1
 80029aa:	18d3      	adds	r3, r2, r3
 80029ac:	6a39      	ldr	r1, [r7, #32]
 80029ae:	0018      	movs	r0, r3
 80029b0:	f7fd fba8 	bl	8000104 <__udivsi3>
 80029b4:	0003      	movs	r3, r0
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	001a      	movs	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	60da      	str	r2, [r3, #12]
}
 80029be:	46c0      	nop			@ (mov r8, r8)
 80029c0:	46bd      	mov	sp, r7
 80029c2:	b006      	add	sp, #24
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	46c0      	nop			@ (mov r8, r8)
 80029c8:	08002c9c 	.word	0x08002c9c
 80029cc:	0000fff0 	.word	0x0000fff0

080029d0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80029d0:	b590      	push	{r4, r7, lr}
 80029d2:	b08b      	sub	sp, #44	@ 0x2c
 80029d4:	af02      	add	r7, sp, #8
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80029da:	231f      	movs	r3, #31
 80029dc:	18fb      	adds	r3, r7, r3
 80029de:	2201      	movs	r2, #1
 80029e0:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80029e2:	2300      	movs	r3, #0
 80029e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	0018      	movs	r0, r3
 80029ea:	f7ff ff4b 	bl	8002884 <LL_USART_IsEnabled>
 80029ee:	1e03      	subs	r3, r0, #0
 80029f0:	d16a      	bne.n	8002ac8 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a38      	ldr	r2, [pc, #224]	@ (8002ad8 <LL_USART_Init+0x108>)
 80029f8:	401a      	ands	r2, r3
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	6899      	ldr	r1, [r3, #8]
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	4319      	orrs	r1, r3
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	4319      	orrs	r1, r3
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	430b      	orrs	r3, r1
 8002a10:	431a      	orrs	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	68da      	ldr	r2, [r3, #12]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	0011      	movs	r1, r2
 8002a1e:	0018      	movs	r0, r3
 8002a20:	f7ff ff54 	bl	80028cc <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	699a      	ldr	r2, [r3, #24]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	0011      	movs	r1, r2
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	f7ff ff61 	bl	80028f4 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a29      	ldr	r2, [pc, #164]	@ (8002adc <LL_USART_Init+0x10c>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d105      	bne.n	8002a46 <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002a3a:	2003      	movs	r0, #3
 8002a3c:	f7ff fdfc 	bl	8002638 <LL_RCC_GetUSARTClockFreq>
 8002a40:	0003      	movs	r3, r0
 8002a42:	61bb      	str	r3, [r7, #24]
 8002a44:	e022      	b.n	8002a8c <LL_USART_Init+0xbc>
    }
    else if (USARTx == USART2)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a25      	ldr	r2, [pc, #148]	@ (8002ae0 <LL_USART_Init+0x110>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d105      	bne.n	8002a5a <LL_USART_Init+0x8a>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8002a4e:	200c      	movs	r0, #12
 8002a50:	f7ff fdf2 	bl	8002638 <LL_RCC_GetUSARTClockFreq>
 8002a54:	0003      	movs	r3, r0
 8002a56:	61bb      	str	r3, [r7, #24]
 8002a58:	e018      	b.n	8002a8c <LL_USART_Init+0xbc>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* USART2 Clock selector flag */
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a21      	ldr	r2, [pc, #132]	@ (8002ae4 <LL_USART_Init+0x114>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d108      	bne.n	8002a74 <LL_USART_Init+0xa4>
    {
#if defined(RCC_CCIPR_USART3SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002a62:	240c      	movs	r4, #12
 8002a64:	193b      	adds	r3, r7, r4
 8002a66:	0018      	movs	r0, r3
 8002a68:	f7ff fdc8 	bl	80025fc <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002a6c:	193b      	adds	r3, r7, r4
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	61bb      	str	r3, [r7, #24]
 8002a72:	e00b      	b.n	8002a8c <LL_USART_Init+0xbc>
#endif /* USART3 Clock selector flag */
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a1c      	ldr	r2, [pc, #112]	@ (8002ae8 <LL_USART_Init+0x118>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d107      	bne.n	8002a8c <LL_USART_Init+0xbc>
    {
#if defined(RCC_CCIPR_USART4SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART4_CLKSOURCE);
#else
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002a7c:	240c      	movs	r4, #12
 8002a7e:	193b      	adds	r3, r7, r4
 8002a80:	0018      	movs	r0, r3
 8002a82:	f7ff fdbb 	bl	80025fc <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002a86:	193b      	adds	r3, r7, r4
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d013      	beq.n	8002aba <LL_USART_Init+0xea>
        && (USART_InitStruct->BaudRate != 0U))
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00f      	beq.n	8002aba <LL_USART_Init+0xea>
    {
      status = SUCCESS;
 8002a9a:	231f      	movs	r3, #31
 8002a9c:	18fb      	adds	r3, r7, r3
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->PrescalerValue,
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
                           USART_InitStruct->OverSampling,
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	69dc      	ldr	r4, [r3, #28]
                           USART_InitStruct->BaudRate);
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
      LL_USART_SetBaudRate(USARTx,
 8002aae:	69b9      	ldr	r1, [r7, #24]
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	9300      	str	r3, [sp, #0]
 8002ab4:	0023      	movs	r3, r4
 8002ab6:	f7ff ff31 	bl	800291c <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	0011      	movs	r1, r2
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	f7ff feef 	bl	80028a6 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002ac8:	231f      	movs	r3, #31
 8002aca:	18fb      	adds	r3, r7, r3
 8002acc:	781b      	ldrb	r3, [r3, #0]
}
 8002ace:	0018      	movs	r0, r3
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	b009      	add	sp, #36	@ 0x24
 8002ad4:	bd90      	pop	{r4, r7, pc}
 8002ad6:	46c0      	nop			@ (mov r8, r8)
 8002ad8:	efff69f3 	.word	0xefff69f3
 8002adc:	40013800 	.word	0x40013800
 8002ae0:	40004400 	.word	0x40004400
 8002ae4:	40004800 	.word	0x40004800
 8002ae8:	40004c00 	.word	0x40004c00

08002aec <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002af6:	6839      	ldr	r1, [r7, #0]
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7fd fb03 	bl	8000104 <__udivsi3>
 8002afe:	0003      	movs	r3, r0
 8002b00:	001a      	movs	r2, r3
 8002b02:	4b06      	ldr	r3, [pc, #24]	@ (8002b1c <LL_InitTick+0x30>)
 8002b04:	3a01      	subs	r2, #1
 8002b06:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002b08:	4b04      	ldr	r3, [pc, #16]	@ (8002b1c <LL_InitTick+0x30>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b0e:	4b03      	ldr	r3, [pc, #12]	@ (8002b1c <LL_InitTick+0x30>)
 8002b10:	2205      	movs	r2, #5
 8002b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002b14:	46c0      	nop			@ (mov r8, r8)
 8002b16:	46bd      	mov	sp, r7
 8002b18:	b002      	add	sp, #8
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	e000e010 	.word	0xe000e010

08002b20 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002b28:	23fa      	movs	r3, #250	@ 0xfa
 8002b2a:	009a      	lsls	r2, r3, #2
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	0011      	movs	r1, r2
 8002b30:	0018      	movs	r0, r3
 8002b32:	f7ff ffdb 	bl	8002aec <LL_InitTick>
}
 8002b36:	46c0      	nop			@ (mov r8, r8)
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	b002      	add	sp, #8
 8002b3c:	bd80      	pop	{r7, pc}
	...

08002b40 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002b48:	4b0e      	ldr	r3, [pc, #56]	@ (8002b84 <LL_mDelay+0x44>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	60bb      	str	r3, [r7, #8]
   uint32_t tmpDelay; /* MISRAC2012-Rule-17.8 */
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002b4e:	68bb      	ldr	r3, [r7, #8]
  tmpDelay  = Delay;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	60fb      	str	r3, [r7, #12]
  /* Add a period to guaranty minimum wait */
  if (tmpDelay  < LL_MAX_DELAY)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	3301      	adds	r3, #1
 8002b58:	d00c      	beq.n	8002b74 <LL_mDelay+0x34>
  {
    tmpDelay ++;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	e008      	b.n	8002b74 <LL_mDelay+0x34>
  }

  while (tmpDelay  != 0U)
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002b62:	4b08      	ldr	r3, [pc, #32]	@ (8002b84 <LL_mDelay+0x44>)
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	2380      	movs	r3, #128	@ 0x80
 8002b68:	025b      	lsls	r3, r3, #9
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	d002      	beq.n	8002b74 <LL_mDelay+0x34>
    {
      tmpDelay --;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	3b01      	subs	r3, #1
 8002b72:	60fb      	str	r3, [r7, #12]
  while (tmpDelay  != 0U)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1f3      	bne.n	8002b62 <LL_mDelay+0x22>
    }
  }
}
 8002b7a:	46c0      	nop			@ (mov r8, r8)
 8002b7c:	46c0      	nop			@ (mov r8, r8)
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	b004      	add	sp, #16
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	e000e010 	.word	0xe000e010

08002b88 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002b90:	4b03      	ldr	r3, [pc, #12]	@ (8002ba0 <LL_SetSystemCoreClock+0x18>)
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	601a      	str	r2, [r3, #0]
}
 8002b96:	46c0      	nop			@ (mov r8, r8)
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	b002      	add	sp, #8
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	46c0      	nop			@ (mov r8, r8)
 8002ba0:	20000004 	.word	0x20000004

08002ba4 <memset>:
 8002ba4:	0003      	movs	r3, r0
 8002ba6:	1882      	adds	r2, r0, r2
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d100      	bne.n	8002bae <memset+0xa>
 8002bac:	4770      	bx	lr
 8002bae:	7019      	strb	r1, [r3, #0]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	e7f9      	b.n	8002ba8 <memset+0x4>

08002bb4 <__libc_init_array>:
 8002bb4:	b570      	push	{r4, r5, r6, lr}
 8002bb6:	2600      	movs	r6, #0
 8002bb8:	4c0c      	ldr	r4, [pc, #48]	@ (8002bec <__libc_init_array+0x38>)
 8002bba:	4d0d      	ldr	r5, [pc, #52]	@ (8002bf0 <__libc_init_array+0x3c>)
 8002bbc:	1b64      	subs	r4, r4, r5
 8002bbe:	10a4      	asrs	r4, r4, #2
 8002bc0:	42a6      	cmp	r6, r4
 8002bc2:	d109      	bne.n	8002bd8 <__libc_init_array+0x24>
 8002bc4:	2600      	movs	r6, #0
 8002bc6:	f000 f819 	bl	8002bfc <_init>
 8002bca:	4c0a      	ldr	r4, [pc, #40]	@ (8002bf4 <__libc_init_array+0x40>)
 8002bcc:	4d0a      	ldr	r5, [pc, #40]	@ (8002bf8 <__libc_init_array+0x44>)
 8002bce:	1b64      	subs	r4, r4, r5
 8002bd0:	10a4      	asrs	r4, r4, #2
 8002bd2:	42a6      	cmp	r6, r4
 8002bd4:	d105      	bne.n	8002be2 <__libc_init_array+0x2e>
 8002bd6:	bd70      	pop	{r4, r5, r6, pc}
 8002bd8:	00b3      	lsls	r3, r6, #2
 8002bda:	58eb      	ldr	r3, [r5, r3]
 8002bdc:	4798      	blx	r3
 8002bde:	3601      	adds	r6, #1
 8002be0:	e7ee      	b.n	8002bc0 <__libc_init_array+0xc>
 8002be2:	00b3      	lsls	r3, r6, #2
 8002be4:	58eb      	ldr	r3, [r5, r3]
 8002be6:	4798      	blx	r3
 8002be8:	3601      	adds	r6, #1
 8002bea:	e7f2      	b.n	8002bd2 <__libc_init_array+0x1e>
 8002bec:	08002ccc 	.word	0x08002ccc
 8002bf0:	08002ccc 	.word	0x08002ccc
 8002bf4:	08002cd0 	.word	0x08002cd0
 8002bf8:	08002ccc 	.word	0x08002ccc

08002bfc <_init>:
 8002bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bfe:	46c0      	nop			@ (mov r8, r8)
 8002c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c02:	bc08      	pop	{r3}
 8002c04:	469e      	mov	lr, r3
 8002c06:	4770      	bx	lr

08002c08 <_fini>:
 8002c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c0a:	46c0      	nop			@ (mov r8, r8)
 8002c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c0e:	bc08      	pop	{r3}
 8002c10:	469e      	mov	lr, r3
 8002c12:	4770      	bx	lr
