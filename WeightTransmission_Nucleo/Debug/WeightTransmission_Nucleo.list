
WeightTransmission_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f5c  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08002018  08002018  00003018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020b0  080020b0  00004008  2**0
                  CONTENTS
  4 .ARM          00000000  080020b0  080020b0  00004008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080020b0  080020b0  00004008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020b0  080020b0  000030b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080020b4  080020b4  000030b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000008  20000000  080020b8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000008  080020c0  00004008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  080020c0  00004170  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00004008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004352  00000000  00000000  00004030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ee0  00000000  00000000  00008382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d8  00000000  00000000  00009268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000050d  00000000  00000000  00009940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000115b6  00000000  00000000  00009e4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004847  00000000  00000000  0001b403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00060f3d  00000000  00000000  0001fc4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00080b87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001814  00000000  00000000  00080bcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  000823e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000008 	.word	0x20000008
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002000 	.word	0x08002000

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000000c 	.word	0x2000000c
 8000100:	08002000 	.word	0x08002000

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b7f      	cmp	r3, #127	@ 0x7f
 800022e:	d809      	bhi.n	8000244 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000230:	1dfb      	adds	r3, r7, #7
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	001a      	movs	r2, r3
 8000236:	231f      	movs	r3, #31
 8000238:	401a      	ands	r2, r3
 800023a:	4b04      	ldr	r3, [pc, #16]	@ (800024c <__NVIC_EnableIRQ+0x30>)
 800023c:	2101      	movs	r1, #1
 800023e:	4091      	lsls	r1, r2
 8000240:	000a      	movs	r2, r1
 8000242:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000244:	46c0      	nop			@ (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e100 	.word	0xe000e100

08000250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	0002      	movs	r2, r0
 8000258:	6039      	str	r1, [r7, #0]
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b7f      	cmp	r3, #127	@ 0x7f
 8000264:	d828      	bhi.n	80002b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000266:	4a2f      	ldr	r2, [pc, #188]	@ (8000324 <__NVIC_SetPriority+0xd4>)
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	b25b      	sxtb	r3, r3
 800026e:	089b      	lsrs	r3, r3, #2
 8000270:	33c0      	adds	r3, #192	@ 0xc0
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	589b      	ldr	r3, [r3, r2]
 8000276:	1dfa      	adds	r2, r7, #7
 8000278:	7812      	ldrb	r2, [r2, #0]
 800027a:	0011      	movs	r1, r2
 800027c:	2203      	movs	r2, #3
 800027e:	400a      	ands	r2, r1
 8000280:	00d2      	lsls	r2, r2, #3
 8000282:	21ff      	movs	r1, #255	@ 0xff
 8000284:	4091      	lsls	r1, r2
 8000286:	000a      	movs	r2, r1
 8000288:	43d2      	mvns	r2, r2
 800028a:	401a      	ands	r2, r3
 800028c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	019b      	lsls	r3, r3, #6
 8000292:	22ff      	movs	r2, #255	@ 0xff
 8000294:	401a      	ands	r2, r3
 8000296:	1dfb      	adds	r3, r7, #7
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	0018      	movs	r0, r3
 800029c:	2303      	movs	r3, #3
 800029e:	4003      	ands	r3, r0
 80002a0:	00db      	lsls	r3, r3, #3
 80002a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a4:	481f      	ldr	r0, [pc, #124]	@ (8000324 <__NVIC_SetPriority+0xd4>)
 80002a6:	1dfb      	adds	r3, r7, #7
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	b25b      	sxtb	r3, r3
 80002ac:	089b      	lsrs	r3, r3, #2
 80002ae:	430a      	orrs	r2, r1
 80002b0:	33c0      	adds	r3, #192	@ 0xc0
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002b6:	e031      	b.n	800031c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b8:	4a1b      	ldr	r2, [pc, #108]	@ (8000328 <__NVIC_SetPriority+0xd8>)
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	0019      	movs	r1, r3
 80002c0:	230f      	movs	r3, #15
 80002c2:	400b      	ands	r3, r1
 80002c4:	3b08      	subs	r3, #8
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	3306      	adds	r3, #6
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	18d3      	adds	r3, r2, r3
 80002ce:	3304      	adds	r3, #4
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1dfa      	adds	r2, r7, #7
 80002d4:	7812      	ldrb	r2, [r2, #0]
 80002d6:	0011      	movs	r1, r2
 80002d8:	2203      	movs	r2, #3
 80002da:	400a      	ands	r2, r1
 80002dc:	00d2      	lsls	r2, r2, #3
 80002de:	21ff      	movs	r1, #255	@ 0xff
 80002e0:	4091      	lsls	r1, r2
 80002e2:	000a      	movs	r2, r1
 80002e4:	43d2      	mvns	r2, r2
 80002e6:	401a      	ands	r2, r3
 80002e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	019b      	lsls	r3, r3, #6
 80002ee:	22ff      	movs	r2, #255	@ 0xff
 80002f0:	401a      	ands	r2, r3
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	0018      	movs	r0, r3
 80002f8:	2303      	movs	r3, #3
 80002fa:	4003      	ands	r3, r0
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	4809      	ldr	r0, [pc, #36]	@ (8000328 <__NVIC_SetPriority+0xd8>)
 8000302:	1dfb      	adds	r3, r7, #7
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	001c      	movs	r4, r3
 8000308:	230f      	movs	r3, #15
 800030a:	4023      	ands	r3, r4
 800030c:	3b08      	subs	r3, #8
 800030e:	089b      	lsrs	r3, r3, #2
 8000310:	430a      	orrs	r2, r1
 8000312:	3306      	adds	r3, #6
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	18c3      	adds	r3, r0, r3
 8000318:	3304      	adds	r3, #4
 800031a:	601a      	str	r2, [r3, #0]
}
 800031c:	46c0      	nop			@ (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b003      	add	sp, #12
 8000322:	bd90      	pop	{r4, r7, pc}
 8000324:	e000e100 	.word	0xe000e100
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(const DMA_TypeDef *DMAx, uint32_t Channel)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b084      	sub	sp, #16
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
 8000334:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 800033a:	4a0b      	ldr	r2, [pc, #44]	@ (8000368 <LL_DMA_EnableChannel+0x3c>)
 800033c:	683b      	ldr	r3, [r7, #0]
 800033e:	18d3      	adds	r3, r2, r3
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	001a      	movs	r2, r3
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	18d3      	adds	r3, r2, r3
 8000348:	681a      	ldr	r2, [r3, #0]
 800034a:	4907      	ldr	r1, [pc, #28]	@ (8000368 <LL_DMA_EnableChannel+0x3c>)
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	18cb      	adds	r3, r1, r3
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	0019      	movs	r1, r3
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	18cb      	adds	r3, r1, r3
 8000358:	2101      	movs	r1, #1
 800035a:	430a      	orrs	r2, r1
 800035c:	601a      	str	r2, [r3, #0]
}
 800035e:	46c0      	nop			@ (mov r8, r8)
 8000360:	46bd      	mov	sp, r7
 8000362:	b004      	add	sp, #16
 8000364:	bd80      	pop	{r7, pc}
 8000366:	46c0      	nop			@ (mov r8, r8)
 8000368:	08002018 	.word	0x08002018

0800036c <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(const DMA_TypeDef *DMAx, uint32_t Channel)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b084      	sub	sp, #16
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 800037a:	4a0b      	ldr	r2, [pc, #44]	@ (80003a8 <LL_DMA_DisableChannel+0x3c>)
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	18d3      	adds	r3, r2, r3
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	001a      	movs	r2, r3
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	18d3      	adds	r3, r2, r3
 8000388:	681a      	ldr	r2, [r3, #0]
 800038a:	4907      	ldr	r1, [pc, #28]	@ (80003a8 <LL_DMA_DisableChannel+0x3c>)
 800038c:	683b      	ldr	r3, [r7, #0]
 800038e:	18cb      	adds	r3, r1, r3
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	0019      	movs	r1, r3
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	18cb      	adds	r3, r1, r3
 8000398:	2101      	movs	r1, #1
 800039a:	438a      	bics	r2, r1
 800039c:	601a      	str	r2, [r3, #0]
}
 800039e:	46c0      	nop			@ (mov r8, r8)
 80003a0:	46bd      	mov	sp, r7
 80003a2:	b004      	add	sp, #16
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	46c0      	nop			@ (mov r8, r8)
 80003a8:	08002018 	.word	0x08002018

080003ac <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b086      	sub	sp, #24
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	60f8      	str	r0, [r7, #12]
 80003b4:	60b9      	str	r1, [r7, #8]
 80003b6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 80003bc:	4a0c      	ldr	r2, [pc, #48]	@ (80003f0 <LL_DMA_SetDataTransferDirection+0x44>)
 80003be:	68bb      	ldr	r3, [r7, #8]
 80003c0:	18d3      	adds	r3, r2, r3
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	001a      	movs	r2, r3
 80003c6:	697b      	ldr	r3, [r7, #20]
 80003c8:	18d3      	adds	r3, r2, r3
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a09      	ldr	r2, [pc, #36]	@ (80003f4 <LL_DMA_SetDataTransferDirection+0x48>)
 80003ce:	4013      	ands	r3, r2
 80003d0:	0019      	movs	r1, r3
 80003d2:	4a07      	ldr	r2, [pc, #28]	@ (80003f0 <LL_DMA_SetDataTransferDirection+0x44>)
 80003d4:	68bb      	ldr	r3, [r7, #8]
 80003d6:	18d3      	adds	r3, r2, r3
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	001a      	movs	r2, r3
 80003dc:	697b      	ldr	r3, [r7, #20]
 80003de:	18d3      	adds	r3, r2, r3
 80003e0:	687a      	ldr	r2, [r7, #4]
 80003e2:	430a      	orrs	r2, r1
 80003e4:	601a      	str	r2, [r3, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 80003e6:	46c0      	nop			@ (mov r8, r8)
 80003e8:	46bd      	mov	sp, r7
 80003ea:	b006      	add	sp, #24
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	46c0      	nop			@ (mov r8, r8)
 80003f0:	08002018 	.word	0x08002018
 80003f4:	ffffbfef 	.word	0xffffbfef

080003f8 <LL_DMA_GetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataTransferDirection(const DMA_TypeDef *DMAx, uint32_t Channel)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b084      	sub	sp, #16
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
 8000400:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	60fb      	str	r3, [r7, #12]
  return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8000406:	4a07      	ldr	r2, [pc, #28]	@ (8000424 <LL_DMA_GetDataTransferDirection+0x2c>)
 8000408:	683b      	ldr	r3, [r7, #0]
 800040a:	18d3      	adds	r3, r2, r3
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	001a      	movs	r2, r3
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	18d3      	adds	r3, r2, r3
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	4a04      	ldr	r2, [pc, #16]	@ (8000428 <LL_DMA_GetDataTransferDirection+0x30>)
 8000418:	4013      	ands	r3, r2
                   DMA_CCR_DIR | DMA_CCR_MEM2MEM));
}
 800041a:	0018      	movs	r0, r3
 800041c:	46bd      	mov	sp, r7
 800041e:	b004      	add	sp, #16
 8000420:	bd80      	pop	{r7, pc}
 8000422:	46c0      	nop			@ (mov r8, r8)
 8000424:	08002018 	.word	0x08002018
 8000428:	00004010 	.word	0x00004010

0800042c <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b086      	sub	sp, #24
 8000430:	af00      	add	r7, sp, #0
 8000432:	60f8      	str	r0, [r7, #12]
 8000434:	60b9      	str	r1, [r7, #8]
 8000436:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 800043c:	4a0c      	ldr	r2, [pc, #48]	@ (8000470 <LL_DMA_SetMode+0x44>)
 800043e:	68bb      	ldr	r3, [r7, #8]
 8000440:	18d3      	adds	r3, r2, r3
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	001a      	movs	r2, r3
 8000446:	697b      	ldr	r3, [r7, #20]
 8000448:	18d3      	adds	r3, r2, r3
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	2220      	movs	r2, #32
 800044e:	4393      	bics	r3, r2
 8000450:	0019      	movs	r1, r3
 8000452:	4a07      	ldr	r2, [pc, #28]	@ (8000470 <LL_DMA_SetMode+0x44>)
 8000454:	68bb      	ldr	r3, [r7, #8]
 8000456:	18d3      	adds	r3, r2, r3
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	001a      	movs	r2, r3
 800045c:	697b      	ldr	r3, [r7, #20]
 800045e:	18d3      	adds	r3, r2, r3
 8000460:	687a      	ldr	r2, [r7, #4]
 8000462:	430a      	orrs	r2, r1
 8000464:	601a      	str	r2, [r3, #0]
             Mode);
}
 8000466:	46c0      	nop			@ (mov r8, r8)
 8000468:	46bd      	mov	sp, r7
 800046a:	b006      	add	sp, #24
 800046c:	bd80      	pop	{r7, pc}
 800046e:	46c0      	nop			@ (mov r8, r8)
 8000470:	08002018 	.word	0x08002018

08000474 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b086      	sub	sp, #24
 8000478:	af00      	add	r7, sp, #0
 800047a:	60f8      	str	r0, [r7, #12]
 800047c:	60b9      	str	r1, [r7, #8]
 800047e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8000484:	4a0c      	ldr	r2, [pc, #48]	@ (80004b8 <LL_DMA_SetPeriphIncMode+0x44>)
 8000486:	68bb      	ldr	r3, [r7, #8]
 8000488:	18d3      	adds	r3, r2, r3
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	001a      	movs	r2, r3
 800048e:	697b      	ldr	r3, [r7, #20]
 8000490:	18d3      	adds	r3, r2, r3
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	2240      	movs	r2, #64	@ 0x40
 8000496:	4393      	bics	r3, r2
 8000498:	0019      	movs	r1, r3
 800049a:	4a07      	ldr	r2, [pc, #28]	@ (80004b8 <LL_DMA_SetPeriphIncMode+0x44>)
 800049c:	68bb      	ldr	r3, [r7, #8]
 800049e:	18d3      	adds	r3, r2, r3
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	001a      	movs	r2, r3
 80004a4:	697b      	ldr	r3, [r7, #20]
 80004a6:	18d3      	adds	r3, r2, r3
 80004a8:	687a      	ldr	r2, [r7, #4]
 80004aa:	430a      	orrs	r2, r1
 80004ac:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcIncMode);
}
 80004ae:	46c0      	nop			@ (mov r8, r8)
 80004b0:	46bd      	mov	sp, r7
 80004b2:	b006      	add	sp, #24
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	46c0      	nop			@ (mov r8, r8)
 80004b8:	08002018 	.word	0x08002018

080004bc <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b086      	sub	sp, #24
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	60f8      	str	r0, [r7, #12]
 80004c4:	60b9      	str	r1, [r7, #8]
 80004c6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 80004cc:	4a0c      	ldr	r2, [pc, #48]	@ (8000500 <LL_DMA_SetMemoryIncMode+0x44>)
 80004ce:	68bb      	ldr	r3, [r7, #8]
 80004d0:	18d3      	adds	r3, r2, r3
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	001a      	movs	r2, r3
 80004d6:	697b      	ldr	r3, [r7, #20]
 80004d8:	18d3      	adds	r3, r2, r3
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	2280      	movs	r2, #128	@ 0x80
 80004de:	4393      	bics	r3, r2
 80004e0:	0019      	movs	r1, r3
 80004e2:	4a07      	ldr	r2, [pc, #28]	@ (8000500 <LL_DMA_SetMemoryIncMode+0x44>)
 80004e4:	68bb      	ldr	r3, [r7, #8]
 80004e6:	18d3      	adds	r3, r2, r3
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	001a      	movs	r2, r3
 80004ec:	697b      	ldr	r3, [r7, #20]
 80004ee:	18d3      	adds	r3, r2, r3
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	430a      	orrs	r2, r1
 80004f4:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstIncMode);
}
 80004f6:	46c0      	nop			@ (mov r8, r8)
 80004f8:	46bd      	mov	sp, r7
 80004fa:	b006      	add	sp, #24
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	46c0      	nop			@ (mov r8, r8)
 8000500:	08002018 	.word	0x08002018

08000504 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	60b9      	str	r1, [r7, #8]
 800050e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 8000514:	4a0c      	ldr	r2, [pc, #48]	@ (8000548 <LL_DMA_SetPeriphSize+0x44>)
 8000516:	68bb      	ldr	r3, [r7, #8]
 8000518:	18d3      	adds	r3, r2, r3
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	001a      	movs	r2, r3
 800051e:	697b      	ldr	r3, [r7, #20]
 8000520:	18d3      	adds	r3, r2, r3
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a09      	ldr	r2, [pc, #36]	@ (800054c <LL_DMA_SetPeriphSize+0x48>)
 8000526:	4013      	ands	r3, r2
 8000528:	0019      	movs	r1, r3
 800052a:	4a07      	ldr	r2, [pc, #28]	@ (8000548 <LL_DMA_SetPeriphSize+0x44>)
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	18d3      	adds	r3, r2, r3
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	001a      	movs	r2, r3
 8000534:	697b      	ldr	r3, [r7, #20]
 8000536:	18d3      	adds	r3, r2, r3
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	430a      	orrs	r2, r1
 800053c:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcDataSize);
}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	46bd      	mov	sp, r7
 8000542:	b006      	add	sp, #24
 8000544:	bd80      	pop	{r7, pc}
 8000546:	46c0      	nop			@ (mov r8, r8)
 8000548:	08002018 	.word	0x08002018
 800054c:	fffffcff 	.word	0xfffffcff

08000550 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af00      	add	r7, sp, #0
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8000560:	4a0c      	ldr	r2, [pc, #48]	@ (8000594 <LL_DMA_SetMemorySize+0x44>)
 8000562:	68bb      	ldr	r3, [r7, #8]
 8000564:	18d3      	adds	r3, r2, r3
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	001a      	movs	r2, r3
 800056a:	697b      	ldr	r3, [r7, #20]
 800056c:	18d3      	adds	r3, r2, r3
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a09      	ldr	r2, [pc, #36]	@ (8000598 <LL_DMA_SetMemorySize+0x48>)
 8000572:	4013      	ands	r3, r2
 8000574:	0019      	movs	r1, r3
 8000576:	4a07      	ldr	r2, [pc, #28]	@ (8000594 <LL_DMA_SetMemorySize+0x44>)
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	18d3      	adds	r3, r2, r3
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	001a      	movs	r2, r3
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	18d3      	adds	r3, r2, r3
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	430a      	orrs	r2, r1
 8000588:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstDataSize);
}
 800058a:	46c0      	nop			@ (mov r8, r8)
 800058c:	46bd      	mov	sp, r7
 800058e:	b006      	add	sp, #24
 8000590:	bd80      	pop	{r7, pc}
 8000592:	46c0      	nop			@ (mov r8, r8)
 8000594:	08002018 	.word	0x08002018
 8000598:	fffff3ff 	.word	0xfffff3ff

0800059c <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b086      	sub	sp, #24
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 80005ac:	4a0c      	ldr	r2, [pc, #48]	@ (80005e0 <LL_DMA_SetChannelPriorityLevel+0x44>)
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	18d3      	adds	r3, r2, r3
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	001a      	movs	r2, r3
 80005b6:	697b      	ldr	r3, [r7, #20]
 80005b8:	18d3      	adds	r3, r2, r3
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a09      	ldr	r2, [pc, #36]	@ (80005e4 <LL_DMA_SetChannelPriorityLevel+0x48>)
 80005be:	4013      	ands	r3, r2
 80005c0:	0019      	movs	r1, r3
 80005c2:	4a07      	ldr	r2, [pc, #28]	@ (80005e0 <LL_DMA_SetChannelPriorityLevel+0x44>)
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	18d3      	adds	r3, r2, r3
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	001a      	movs	r2, r3
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	18d3      	adds	r3, r2, r3
 80005d0:	687a      	ldr	r2, [r7, #4]
 80005d2:	430a      	orrs	r2, r1
 80005d4:	601a      	str	r2, [r3, #0]
             Priority);
}
 80005d6:	46c0      	nop			@ (mov r8, r8)
 80005d8:	46bd      	mov	sp, r7
 80005da:	b006      	add	sp, #24
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)
 80005e0:	08002018 	.word	0x08002018
 80005e4:	ffffcfff 	.word	0xffffcfff

080005e8 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b086      	sub	sp, #24
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	60f8      	str	r0, [r7, #12]
 80005f0:	60b9      	str	r1, [r7, #8]
 80005f2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 80005f8:	4a0b      	ldr	r2, [pc, #44]	@ (8000628 <LL_DMA_SetDataLength+0x40>)
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	18d3      	adds	r3, r2, r3
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	001a      	movs	r2, r3
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	18d3      	adds	r3, r2, r3
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	0c1b      	lsrs	r3, r3, #16
 800060a:	0419      	lsls	r1, r3, #16
 800060c:	4a06      	ldr	r2, [pc, #24]	@ (8000628 <LL_DMA_SetDataLength+0x40>)
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	18d3      	adds	r3, r2, r3
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	001a      	movs	r2, r3
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	18d3      	adds	r3, r2, r3
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	430a      	orrs	r2, r1
 800061e:	605a      	str	r2, [r3, #4]
             DMA_CNDTR_NDT, NbData);
}
 8000620:	46c0      	nop			@ (mov r8, r8)
 8000622:	46bd      	mov	sp, r7
 8000624:	b006      	add	sp, #24
 8000626:	bd80      	pop	{r7, pc}
 8000628:	08002018 	.word	0x08002018

0800062c <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	607a      	str	r2, [r7, #4]
 8000638:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	617b      	str	r3, [r7, #20]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 800063e:	6a3b      	ldr	r3, [r7, #32]
 8000640:	2b10      	cmp	r3, #16
 8000642:	d112      	bne.n	800066a <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, SrcAddress);
 8000644:	4a14      	ldr	r2, [pc, #80]	@ (8000698 <LL_DMA_ConfigAddresses+0x6c>)
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	18d3      	adds	r3, r2, r3
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	001a      	movs	r2, r3
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	18d3      	adds	r3, r2, r3
 8000652:	687a      	ldr	r2, [r7, #4]
 8000654:	60da      	str	r2, [r3, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, DstAddress);
 8000656:	4a10      	ldr	r2, [pc, #64]	@ (8000698 <LL_DMA_ConfigAddresses+0x6c>)
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	18d3      	adds	r3, r2, r3
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	001a      	movs	r2, r3
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	18d3      	adds	r3, r2, r3
 8000664:	683a      	ldr	r2, [r7, #0]
 8000666:	609a      	str	r2, [r3, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, DstAddress);
  }
}
 8000668:	e011      	b.n	800068e <LL_DMA_ConfigAddresses+0x62>
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, SrcAddress);
 800066a:	4a0b      	ldr	r2, [pc, #44]	@ (8000698 <LL_DMA_ConfigAddresses+0x6c>)
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	18d3      	adds	r3, r2, r3
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	001a      	movs	r2, r3
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	18d3      	adds	r3, r2, r3
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	609a      	str	r2, [r3, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, DstAddress);
 800067c:	4a06      	ldr	r2, [pc, #24]	@ (8000698 <LL_DMA_ConfigAddresses+0x6c>)
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	18d3      	adds	r3, r2, r3
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	001a      	movs	r2, r3
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	18d3      	adds	r3, r2, r3
 800068a:	683a      	ldr	r2, [r7, #0]
 800068c:	60da      	str	r2, [r3, #12]
}
 800068e:	46c0      	nop			@ (mov r8, r8)
 8000690:	46bd      	mov	sp, r7
 8000692:	b006      	add	sp, #24
 8000694:	bd80      	pop	{r7, pc}
 8000696:	46c0      	nop			@ (mov r8, r8)
 8000698:	08002018 	.word	0x08002018

0800069c <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_RX
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_TX
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Request)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	60b9      	str	r1, [r7, #8]
 80006a6:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	0a9b      	lsrs	r3, r3, #10
 80006ac:	4a0f      	ldr	r2, [pc, #60]	@ (80006ec <LL_DMA_SetPeriphRequest+0x50>)
 80006ae:	405a      	eors	r2, r3
 80006b0:	0013      	movs	r3, r2
 80006b2:	00db      	lsls	r3, r3, #3
 80006b4:	1a9b      	subs	r3, r3, r2
 80006b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 80006b8:	68ba      	ldr	r2, [r7, #8]
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	18d3      	adds	r3, r2, r3
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	4a0b      	ldr	r2, [pc, #44]	@ (80006f0 <LL_DMA_SetPeriphRequest+0x54>)
 80006c2:	4694      	mov	ip, r2
 80006c4:	4463      	add	r3, ip
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	223f      	movs	r2, #63	@ 0x3f
 80006ca:	4393      	bics	r3, r2
 80006cc:	0019      	movs	r1, r3
 80006ce:	68ba      	ldr	r2, [r7, #8]
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	18d3      	adds	r3, r2, r3
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	4a06      	ldr	r2, [pc, #24]	@ (80006f0 <LL_DMA_SetPeriphRequest+0x54>)
 80006d8:	4694      	mov	ip, r2
 80006da:	4463      	add	r3, ip
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	430a      	orrs	r2, r1
 80006e0:	601a      	str	r2, [r3, #0]
}
 80006e2:	46c0      	nop			@ (mov r8, r8)
 80006e4:	46bd      	mov	sp, r7
 80006e6:	b006      	add	sp, #24
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	46c0      	nop			@ (mov r8, r8)
 80006ec:	00100080 	.word	0x00100080
 80006f0:	40020800 	.word	0x40020800

080006f4 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(const DMA_TypeDef *DMAx, uint32_t Channel)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 8000702:	4a0b      	ldr	r2, [pc, #44]	@ (8000730 <LL_DMA_EnableIT_TC+0x3c>)
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	18d3      	adds	r3, r2, r3
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	001a      	movs	r2, r3
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	18d3      	adds	r3, r2, r3
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	4907      	ldr	r1, [pc, #28]	@ (8000730 <LL_DMA_EnableIT_TC+0x3c>)
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	18cb      	adds	r3, r1, r3
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	0019      	movs	r1, r3
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	18cb      	adds	r3, r1, r3
 8000720:	2102      	movs	r1, #2
 8000722:	430a      	orrs	r2, r1
 8000724:	601a      	str	r2, [r3, #0]
}
 8000726:	46c0      	nop			@ (mov r8, r8)
 8000728:	46bd      	mov	sp, r7
 800072a:	b004      	add	sp, #16
 800072c:	bd80      	pop	{r7, pc}
 800072e:	46c0      	nop			@ (mov r8, r8)
 8000730:	08002018 	.word	0x08002018

08000734 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(const DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TEIE);
 8000742:	4a0b      	ldr	r2, [pc, #44]	@ (8000770 <LL_DMA_EnableIT_TE+0x3c>)
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	18d3      	adds	r3, r2, r3
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	001a      	movs	r2, r3
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	18d3      	adds	r3, r2, r3
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	4907      	ldr	r1, [pc, #28]	@ (8000770 <LL_DMA_EnableIT_TE+0x3c>)
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	18cb      	adds	r3, r1, r3
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	0019      	movs	r1, r3
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	18cb      	adds	r3, r1, r3
 8000760:	2108      	movs	r1, #8
 8000762:	430a      	orrs	r2, r1
 8000764:	601a      	str	r2, [r3, #0]
}
 8000766:	46c0      	nop			@ (mov r8, r8)
 8000768:	46bd      	mov	sp, r7
 800076a:	b004      	add	sp, #16
 800076c:	bd80      	pop	{r7, pc}
 800076e:	46c0      	nop			@ (mov r8, r8)
 8000770:	08002018 	.word	0x08002018

08000774 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000778:	4b04      	ldr	r3, [pc, #16]	@ (800078c <LL_RCC_HSI_Enable+0x18>)
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	4b03      	ldr	r3, [pc, #12]	@ (800078c <LL_RCC_HSI_Enable+0x18>)
 800077e:	2180      	movs	r1, #128	@ 0x80
 8000780:	0049      	lsls	r1, r1, #1
 8000782:	430a      	orrs	r2, r1
 8000784:	601a      	str	r2, [r3, #0]
}
 8000786:	46c0      	nop			@ (mov r8, r8)
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40021000 	.word	0x40021000

08000790 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000794:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <LL_RCC_HSI_IsReady+0x24>)
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	2380      	movs	r3, #128	@ 0x80
 800079a:	00db      	lsls	r3, r3, #3
 800079c:	401a      	ands	r2, r3
 800079e:	2380      	movs	r3, #128	@ 0x80
 80007a0:	00db      	lsls	r3, r3, #3
 80007a2:	429a      	cmp	r2, r3
 80007a4:	d101      	bne.n	80007aa <LL_RCC_HSI_IsReady+0x1a>
 80007a6:	2301      	movs	r3, #1
 80007a8:	e000      	b.n	80007ac <LL_RCC_HSI_IsReady+0x1c>
 80007aa:	2300      	movs	r3, #0
}
 80007ac:	0018      	movs	r0, r3
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	46c0      	nop			@ (mov r8, r8)
 80007b4:	40021000 	.word	0x40021000

080007b8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <LL_RCC_SetSysClkSource+0x24>)
 80007c2:	689b      	ldr	r3, [r3, #8]
 80007c4:	2207      	movs	r2, #7
 80007c6:	4393      	bics	r3, r2
 80007c8:	0019      	movs	r1, r3
 80007ca:	4b04      	ldr	r3, [pc, #16]	@ (80007dc <LL_RCC_SetSysClkSource+0x24>)
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	430a      	orrs	r2, r1
 80007d0:	609a      	str	r2, [r3, #8]
}
 80007d2:	46c0      	nop			@ (mov r8, r8)
 80007d4:	46bd      	mov	sp, r7
 80007d6:	b002      	add	sp, #8
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	46c0      	nop			@ (mov r8, r8)
 80007dc:	40021000 	.word	0x40021000

080007e0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80007e4:	4b03      	ldr	r3, [pc, #12]	@ (80007f4 <LL_RCC_GetSysClkSource+0x14>)
 80007e6:	689b      	ldr	r3, [r3, #8]
 80007e8:	2238      	movs	r2, #56	@ 0x38
 80007ea:	4013      	ands	r3, r2
}
 80007ec:	0018      	movs	r0, r3
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	46c0      	nop			@ (mov r8, r8)
 80007f4:	40021000 	.word	0x40021000

080007f8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000800:	4b06      	ldr	r3, [pc, #24]	@ (800081c <LL_RCC_SetAHBPrescaler+0x24>)
 8000802:	689b      	ldr	r3, [r3, #8]
 8000804:	4a06      	ldr	r2, [pc, #24]	@ (8000820 <LL_RCC_SetAHBPrescaler+0x28>)
 8000806:	4013      	ands	r3, r2
 8000808:	0019      	movs	r1, r3
 800080a:	4b04      	ldr	r3, [pc, #16]	@ (800081c <LL_RCC_SetAHBPrescaler+0x24>)
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	430a      	orrs	r2, r1
 8000810:	609a      	str	r2, [r3, #8]
}
 8000812:	46c0      	nop			@ (mov r8, r8)
 8000814:	46bd      	mov	sp, r7
 8000816:	b002      	add	sp, #8
 8000818:	bd80      	pop	{r7, pc}
 800081a:	46c0      	nop			@ (mov r8, r8)
 800081c:	40021000 	.word	0x40021000
 8000820:	fffff0ff 	.word	0xfffff0ff

08000824 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 800082c:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <LL_RCC_SetAPB1Prescaler+0x24>)
 800082e:	689b      	ldr	r3, [r3, #8]
 8000830:	4a06      	ldr	r2, [pc, #24]	@ (800084c <LL_RCC_SetAPB1Prescaler+0x28>)
 8000832:	4013      	ands	r3, r2
 8000834:	0019      	movs	r1, r3
 8000836:	4b04      	ldr	r3, [pc, #16]	@ (8000848 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	430a      	orrs	r2, r1
 800083c:	609a      	str	r2, [r3, #8]
}
 800083e:	46c0      	nop			@ (mov r8, r8)
 8000840:	46bd      	mov	sp, r7
 8000842:	b002      	add	sp, #8
 8000844:	bd80      	pop	{r7, pc}
 8000846:	46c0      	nop			@ (mov r8, r8)
 8000848:	40021000 	.word	0x40021000
 800084c:	ffff8fff 	.word	0xffff8fff

08000850 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000854:	4b04      	ldr	r3, [pc, #16]	@ (8000868 <LL_RCC_PLL_Enable+0x18>)
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	4b03      	ldr	r3, [pc, #12]	@ (8000868 <LL_RCC_PLL_Enable+0x18>)
 800085a:	2180      	movs	r1, #128	@ 0x80
 800085c:	0449      	lsls	r1, r1, #17
 800085e:	430a      	orrs	r2, r1
 8000860:	601a      	str	r2, [r3, #0]
}
 8000862:	46c0      	nop			@ (mov r8, r8)
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40021000 	.word	0x40021000

0800086c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8000870:	4b07      	ldr	r3, [pc, #28]	@ (8000890 <LL_RCC_PLL_IsReady+0x24>)
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	2380      	movs	r3, #128	@ 0x80
 8000876:	049b      	lsls	r3, r3, #18
 8000878:	401a      	ands	r2, r3
 800087a:	2380      	movs	r3, #128	@ 0x80
 800087c:	049b      	lsls	r3, r3, #18
 800087e:	429a      	cmp	r2, r3
 8000880:	d101      	bne.n	8000886 <LL_RCC_PLL_IsReady+0x1a>
 8000882:	2301      	movs	r3, #1
 8000884:	e000      	b.n	8000888 <LL_RCC_PLL_IsReady+0x1c>
 8000886:	2300      	movs	r3, #0
}
 8000888:	0018      	movs	r0, r3
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	46c0      	nop			@ (mov r8, r8)
 8000890:	40021000 	.word	0x40021000

08000894 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	607a      	str	r2, [r7, #4]
 80008a0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80008a2:	4b0a      	ldr	r3, [pc, #40]	@ (80008cc <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80008a4:	68db      	ldr	r3, [r3, #12]
 80008a6:	4a0a      	ldr	r2, [pc, #40]	@ (80008d0 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80008a8:	4013      	ands	r3, r2
 80008aa:	0019      	movs	r1, r3
 80008ac:	68fa      	ldr	r2, [r7, #12]
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	431a      	orrs	r2, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	021b      	lsls	r3, r3, #8
 80008b6:	431a      	orrs	r2, r3
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	431a      	orrs	r2, r3
 80008bc:	4b03      	ldr	r3, [pc, #12]	@ (80008cc <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80008be:	430a      	orrs	r2, r1
 80008c0:	60da      	str	r2, [r3, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 80008c2:	46c0      	nop			@ (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	b004      	add	sp, #16
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	46c0      	nop			@ (mov r8, r8)
 80008cc:	40021000 	.word	0x40021000
 80008d0:	1fff808c 	.word	0x1fff808c

080008d4 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 80008d8:	4b04      	ldr	r3, [pc, #16]	@ (80008ec <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 80008da:	68da      	ldr	r2, [r3, #12]
 80008dc:	4b03      	ldr	r3, [pc, #12]	@ (80008ec <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 80008de:	2180      	movs	r1, #128	@ 0x80
 80008e0:	0549      	lsls	r1, r1, #21
 80008e2:	430a      	orrs	r2, r1
 80008e4:	60da      	str	r2, [r3, #12]
}
 80008e6:	46c0      	nop			@ (mov r8, r8)
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40021000 	.word	0x40021000

080008f0 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_RNG  (*)
  * @note   (*) RNG & CRYP Peripherals available only on STM32G081xx
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80008f8:	4b07      	ldr	r3, [pc, #28]	@ (8000918 <LL_AHB1_GRP1_EnableClock+0x28>)
 80008fa:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80008fc:	4b06      	ldr	r3, [pc, #24]	@ (8000918 <LL_AHB1_GRP1_EnableClock+0x28>)
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	430a      	orrs	r2, r1
 8000902:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000904:	4b04      	ldr	r3, [pc, #16]	@ (8000918 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000908:	687a      	ldr	r2, [r7, #4]
 800090a:	4013      	ands	r3, r2
 800090c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800090e:	68fb      	ldr	r3, [r7, #12]
}
 8000910:	46c0      	nop			@ (mov r8, r8)
 8000912:	46bd      	mov	sp, r7
 8000914:	b004      	add	sp, #16
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40021000 	.word	0x40021000

0800091c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 8000924:	4b07      	ldr	r3, [pc, #28]	@ (8000944 <LL_APB1_GRP1_EnableClock+0x28>)
 8000926:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8000928:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <LL_APB1_GRP1_EnableClock+0x28>)
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	430a      	orrs	r2, r1
 800092e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8000930:	4b04      	ldr	r3, [pc, #16]	@ (8000944 <LL_APB1_GRP1_EnableClock+0x28>)
 8000932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	4013      	ands	r3, r2
 8000938:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800093a:	68fb      	ldr	r3, [r7, #12]
}
 800093c:	46c0      	nop			@ (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	b004      	add	sp, #16
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40021000 	.word	0x40021000

08000948 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_ADC
  * @note (*) peripheral not available on all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR2, Periphs);
 8000950:	4b07      	ldr	r3, [pc, #28]	@ (8000970 <LL_APB2_GRP1_EnableClock+0x28>)
 8000952:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8000954:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <LL_APB2_GRP1_EnableClock+0x28>)
 8000956:	687a      	ldr	r2, [r7, #4]
 8000958:	430a      	orrs	r2, r1
 800095a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 800095c:	4b04      	ldr	r3, [pc, #16]	@ (8000970 <LL_APB2_GRP1_EnableClock+0x28>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000960:	687a      	ldr	r2, [r7, #4]
 8000962:	4013      	ands	r3, r2
 8000964:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000966:	68fb      	ldr	r3, [r7, #12]
}
 8000968:	46c0      	nop			@ (mov r8, r8)
 800096a:	46bd      	mov	sp, r7
 800096c:	b004      	add	sp, #16
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40021000 	.word	0x40021000

08000974 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 800097c:	4b07      	ldr	r3, [pc, #28]	@ (800099c <LL_IOP_GRP1_EnableClock+0x28>)
 800097e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000980:	4b06      	ldr	r3, [pc, #24]	@ (800099c <LL_IOP_GRP1_EnableClock+0x28>)
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	430a      	orrs	r2, r1
 8000986:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000988:	4b04      	ldr	r3, [pc, #16]	@ (800099c <LL_IOP_GRP1_EnableClock+0x28>)
 800098a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800098c:	687a      	ldr	r2, [r7, #4]
 800098e:	4013      	ands	r3, r2
 8000990:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000992:	68fb      	ldr	r3, [r7, #12]
}
 8000994:	46c0      	nop			@ (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	b004      	add	sp, #16
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40021000 	.word	0x40021000

080009a0 <LL_SYSCFG_DisableDBATT>:
  *         @arg @ref LL_SYSCFG_UCPD2_STROBE
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_DisableDBATT(uint32_t ConfigDeadBattery)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigDeadBattery);
 80009a8:	4b04      	ldr	r3, [pc, #16]	@ (80009bc <LL_SYSCFG_DisableDBATT+0x1c>)
 80009aa:	6819      	ldr	r1, [r3, #0]
 80009ac:	4b03      	ldr	r3, [pc, #12]	@ (80009bc <LL_SYSCFG_DisableDBATT+0x1c>)
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	430a      	orrs	r2, r1
 80009b2:	601a      	str	r2, [r3, #0]
}
 80009b4:	46c0      	nop			@ (mov r8, r8)
 80009b6:	46bd      	mov	sp, r7
 80009b8:	b002      	add	sp, #8
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40010000 	.word	0x40010000

080009c0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80009c8:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <LL_FLASH_SetLatency+0x24>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2207      	movs	r2, #7
 80009ce:	4393      	bics	r3, r2
 80009d0:	0019      	movs	r1, r3
 80009d2:	4b04      	ldr	r3, [pc, #16]	@ (80009e4 <LL_FLASH_SetLatency+0x24>)
 80009d4:	687a      	ldr	r2, [r7, #4]
 80009d6:	430a      	orrs	r2, r1
 80009d8:	601a      	str	r2, [r3, #0]
}
 80009da:	46c0      	nop			@ (mov r8, r8)
 80009dc:	46bd      	mov	sp, r7
 80009de:	b002      	add	sp, #8
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	46c0      	nop			@ (mov r8, r8)
 80009e4:	40022000 	.word	0x40022000

080009e8 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80009f0:	4a05      	ldr	r2, [pc, #20]	@ (8000a08 <LL_EXTI_EnableIT_0_31+0x20>)
 80009f2:	2380      	movs	r3, #128	@ 0x80
 80009f4:	58d2      	ldr	r2, [r2, r3]
 80009f6:	4904      	ldr	r1, [pc, #16]	@ (8000a08 <LL_EXTI_EnableIT_0_31+0x20>)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4313      	orrs	r3, r2
 80009fc:	2280      	movs	r2, #128	@ 0x80
 80009fe:	508b      	str	r3, [r1, r2]
}
 8000a00:	46c0      	nop			@ (mov r8, r8)
 8000a02:	46bd      	mov	sp, r7
 8000a04:	b002      	add	sp, #8
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40021800 	.word	0x40021800

08000a0c <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8000a14:	4b04      	ldr	r3, [pc, #16]	@ (8000a28 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8000a16:	6859      	ldr	r1, [r3, #4]
 8000a18:	4b03      	ldr	r3, [pc, #12]	@ (8000a28 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	430a      	orrs	r2, r1
 8000a1e:	605a      	str	r2, [r3, #4]
}
 8000a20:	46c0      	nop			@ (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	b002      	add	sp, #8
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40021800 	.word	0x40021800

08000a2c <LL_EXTI_SetEXTISource>:
  *         @arg @ref LL_EXTI_CONFIG_LINE14
  *         @arg @ref LL_EXTI_CONFIG_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000a2c:	b590      	push	{r4, r7, lr}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(EXTI->EXTICR[Line & 0x03u], EXTI_EXTICR1_EXTI0 << (Line >> LL_EXTI_REGISTER_PINPOS_SHFT), Port << (Line >> LL_EXTI_REGISTER_PINPOS_SHFT));
 8000a36:	4a0f      	ldr	r2, [pc, #60]	@ (8000a74 <LL_EXTI_SetEXTISource+0x48>)
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	2103      	movs	r1, #3
 8000a3c:	400b      	ands	r3, r1
 8000a3e:	3318      	adds	r3, #24
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	589b      	ldr	r3, [r3, r2]
 8000a44:	683a      	ldr	r2, [r7, #0]
 8000a46:	0c12      	lsrs	r2, r2, #16
 8000a48:	2107      	movs	r1, #7
 8000a4a:	4091      	lsls	r1, r2
 8000a4c:	000a      	movs	r2, r1
 8000a4e:	43d2      	mvns	r2, r2
 8000a50:	401a      	ands	r2, r3
 8000a52:	0011      	movs	r1, r2
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	0c1b      	lsrs	r3, r3, #16
 8000a58:	687a      	ldr	r2, [r7, #4]
 8000a5a:	409a      	lsls	r2, r3
 8000a5c:	4805      	ldr	r0, [pc, #20]	@ (8000a74 <LL_EXTI_SetEXTISource+0x48>)
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	2403      	movs	r4, #3
 8000a62:	4023      	ands	r3, r4
 8000a64:	430a      	orrs	r2, r1
 8000a66:	3318      	adds	r3, #24
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	501a      	str	r2, [r3, r0]
}
 8000a6c:	46c0      	nop			@ (mov r8, r8)
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	b003      	add	sp, #12
 8000a72:	bd90      	pop	{r4, r7, pc}
 8000a74:	40021800 	.word	0x40021800

08000a78 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2201      	movs	r2, #1
 8000a86:	431a      	orrs	r2, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	601a      	str	r2, [r3, #0]
}
 8000a8c:	46c0      	nop			@ (mov r8, r8)
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	b002      	add	sp, #8
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a03      	ldr	r2, [pc, #12]	@ (8000ab0 <LL_USART_DisableFIFO+0x1c>)
 8000aa2:	401a      	ands	r2, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	601a      	str	r2, [r3, #0]
}
 8000aa8:	46c0      	nop			@ (mov r8, r8)
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	b002      	add	sp, #8
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	dfffffff 	.word	0xdfffffff

08000ab4 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000abe:	f3ef 8310 	mrs	r3, PRIMASK
 8000ac2:	60bb      	str	r3, [r7, #8]
  return(result);
 8000ac4:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	2301      	movs	r3, #1
 8000aca:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	f383 8810 	msr	PRIMASK, r3
}
 8000ad2:	46c0      	nop			@ (mov r8, r8)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	689b      	ldr	r3, [r3, #8]
 8000ad8:	00db      	lsls	r3, r3, #3
 8000ada:	08da      	lsrs	r2, r3, #3
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	075b      	lsls	r3, r3, #29
 8000ae0:	431a      	orrs	r2, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000aea:	693b      	ldr	r3, [r7, #16]
 8000aec:	f383 8810 	msr	PRIMASK, r3
}
 8000af0:	46c0      	nop			@ (mov r8, r8)
}
 8000af2:	46c0      	nop			@ (mov r8, r8)
 8000af4:	46bd      	mov	sp, r7
 8000af6:	b006      	add	sp, #24
 8000af8:	bd80      	pop	{r7, pc}
	...

08000afc <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000b06:	f3ef 8310 	mrs	r3, PRIMASK
 8000b0a:	60bb      	str	r3, [r7, #8]
  return(result);
 8000b0c:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	2301      	movs	r3, #1
 8000b12:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	f383 8810 	msr	PRIMASK, r3
}
 8000b1a:	46c0      	nop			@ (mov r8, r8)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	4a08      	ldr	r2, [pc, #32]	@ (8000b44 <LL_USART_SetRXFIFOThreshold+0x48>)
 8000b22:	401a      	ands	r2, r3
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	065b      	lsls	r3, r3, #25
 8000b28:	431a      	orrs	r2, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	609a      	str	r2, [r3, #8]
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	f383 8810 	msr	PRIMASK, r3
}
 8000b38:	46c0      	nop			@ (mov r8, r8)
}
 8000b3a:	46c0      	nop			@ (mov r8, r8)
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	b006      	add	sp, #24
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	46c0      	nop			@ (mov r8, r8)
 8000b44:	f1ffffff 	.word	0xf1ffffff

08000b48 <LL_USART_EnableRxTimeout>:
  * @rmtoll CR2          RTOEN         LL_USART_EnableRxTimeout
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableRxTimeout(USART_TypeDef *USARTx)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR2, USART_CR2_RTOEN);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	2280      	movs	r2, #128	@ 0x80
 8000b56:	0412      	lsls	r2, r2, #16
 8000b58:	431a      	orrs	r2, r3
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	605a      	str	r2, [r3, #4]
}
 8000b5e:	46c0      	nop			@ (mov r8, r8)
 8000b60:	46bd      	mov	sp, r7
 8000b62:	b002      	add	sp, #8
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <LL_USART_SetRxTimeout>:
  * @param  USARTx USART Instance
  * @param  Timeout Value between Min_Data=0x00 and Max_Data=0x00FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRxTimeout(USART_TypeDef *USARTx, uint32_t Timeout)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b082      	sub	sp, #8
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
 8000b6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->RTOR, USART_RTOR_RTO, Timeout);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	695b      	ldr	r3, [r3, #20]
 8000b74:	0e1b      	lsrs	r3, r3, #24
 8000b76:	061a      	lsls	r2, r3, #24
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	431a      	orrs	r2, r3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	615a      	str	r2, [r3, #20]
}
 8000b80:	46c0      	nop			@ (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	b002      	add	sp, #8
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	4a07      	ldr	r2, [pc, #28]	@ (8000bb4 <LL_USART_ConfigAsyncMode+0x2c>)
 8000b96:	401a      	ands	r2, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	689b      	ldr	r3, [r3, #8]
 8000ba0:	222a      	movs	r2, #42	@ 0x2a
 8000ba2:	4393      	bics	r3, r2
 8000ba4:	001a      	movs	r2, r3
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
}
 8000baa:	46c0      	nop			@ (mov r8, r8)
 8000bac:	46bd      	mov	sp, r7
 8000bae:	b002      	add	sp, #8
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	46c0      	nop			@ (mov r8, r8)
 8000bb4:	ffffb7ff 	.word	0xffffb7ff

08000bb8 <LL_USART_IsActiveFlag_RTO>:
  * @rmtoll ISR          RTOF          LL_USART_IsActiveFlag_RTO
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RTO(const USART_TypeDef *USARTx)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RTOF) == (USART_ISR_RTOF)) ? 1UL : 0UL);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	69da      	ldr	r2, [r3, #28]
 8000bc4:	2380      	movs	r3, #128	@ 0x80
 8000bc6:	011b      	lsls	r3, r3, #4
 8000bc8:	401a      	ands	r2, r3
 8000bca:	2380      	movs	r3, #128	@ 0x80
 8000bcc:	011b      	lsls	r3, r3, #4
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d101      	bne.n	8000bd6 <LL_USART_IsActiveFlag_RTO+0x1e>
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e000      	b.n	8000bd8 <LL_USART_IsActiveFlag_RTO+0x20>
 8000bd6:	2300      	movs	r3, #0
}
 8000bd8:	0018      	movs	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	b002      	add	sp, #8
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(const USART_TypeDef *USARTx)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	69da      	ldr	r2, [r3, #28]
 8000bec:	2380      	movs	r3, #128	@ 0x80
 8000bee:	039b      	lsls	r3, r3, #14
 8000bf0:	401a      	ands	r2, r3
 8000bf2:	2380      	movs	r3, #128	@ 0x80
 8000bf4:	039b      	lsls	r3, r3, #14
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	d101      	bne.n	8000bfe <LL_USART_IsActiveFlag_TEACK+0x1e>
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e000      	b.n	8000c00 <LL_USART_IsActiveFlag_TEACK+0x20>
 8000bfe:	2300      	movs	r3, #0
}
 8000c00:	0018      	movs	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	b002      	add	sp, #8
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(const USART_TypeDef *USARTx)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	69da      	ldr	r2, [r3, #28]
 8000c14:	2380      	movs	r3, #128	@ 0x80
 8000c16:	03db      	lsls	r3, r3, #15
 8000c18:	401a      	ands	r2, r3
 8000c1a:	2380      	movs	r3, #128	@ 0x80
 8000c1c:	03db      	lsls	r3, r3, #15
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d101      	bne.n	8000c26 <LL_USART_IsActiveFlag_REACK+0x1e>
 8000c22:	2301      	movs	r3, #1
 8000c24:	e000      	b.n	8000c28 <LL_USART_IsActiveFlag_REACK+0x20>
 8000c26:	2300      	movs	r3, #0
}
 8000c28:	0018      	movs	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	b002      	add	sp, #8
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <LL_USART_ClearFlag_PE>:
  * @rmtoll ICR          PECF          LL_USART_ClearFlag_PE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_PE(USART_TypeDef *USARTx)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	621a      	str	r2, [r3, #32]
}
 8000c3e:	46c0      	nop			@ (mov r8, r8)
 8000c40:	46bd      	mov	sp, r7
 8000c42:	b002      	add	sp, #8
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <LL_USART_ClearFlag_FE>:
  * @rmtoll ICR          FECF          LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2202      	movs	r2, #2
 8000c52:	621a      	str	r2, [r3, #32]
}
 8000c54:	46c0      	nop			@ (mov r8, r8)
 8000c56:	46bd      	mov	sp, r7
 8000c58:	b002      	add	sp, #8
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <LL_USART_ClearFlag_NE>:
  * @rmtoll ICR          NECF          LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2204      	movs	r2, #4
 8000c68:	621a      	str	r2, [r3, #32]
}
 8000c6a:	46c0      	nop			@ (mov r8, r8)
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	b002      	add	sp, #8
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2208      	movs	r2, #8
 8000c7e:	621a      	str	r2, [r3, #32]
}
 8000c80:	46c0      	nop			@ (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	b002      	add	sp, #8
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <LL_USART_ClearFlag_RTO>:
  * @rmtoll ICR          RTOCF         LL_USART_ClearFlag_RTO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_RTO(USART_TypeDef *USARTx)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_RTOCF);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2280      	movs	r2, #128	@ 0x80
 8000c94:	0112      	lsls	r2, r2, #4
 8000c96:	621a      	str	r2, [r3, #32]
}
 8000c98:	46c0      	nop			@ (mov r8, r8)
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	b002      	add	sp, #8
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <LL_USART_EnableIT_RTO>:
  * @rmtoll CR1          RTOIE         LL_USART_EnableIT_RTO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RTO(USART_TypeDef *USARTx)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000ca8:	f3ef 8310 	mrs	r3, PRIMASK
 8000cac:	60bb      	str	r3, [r7, #8]
  return(result);
 8000cae:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RTOIE);
 8000cb0:	617b      	str	r3, [r7, #20]
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	f383 8810 	msr	PRIMASK, r3
}
 8000cbc:	46c0      	nop			@ (mov r8, r8)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2280      	movs	r2, #128	@ 0x80
 8000cc4:	04d2      	lsls	r2, r2, #19
 8000cc6:	431a      	orrs	r2, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	f383 8810 	msr	PRIMASK, r3
}
 8000cd6:	46c0      	nop			@ (mov r8, r8)
}
 8000cd8:	46c0      	nop			@ (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	b006      	add	sp, #24
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000ce8:	f3ef 8310 	mrs	r3, PRIMASK
 8000cec:	60bb      	str	r3, [r7, #8]
  return(result);
 8000cee:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8000cf0:	617b      	str	r3, [r7, #20]
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	f383 8810 	msr	PRIMASK, r3
}
 8000cfc:	46c0      	nop			@ (mov r8, r8)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	2240      	movs	r2, #64	@ 0x40
 8000d04:	431a      	orrs	r2, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	609a      	str	r2, [r3, #8]
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	f383 8810 	msr	PRIMASK, r3
}
 8000d14:	46c0      	nop			@ (mov r8, r8)
}
 8000d16:	46c0      	nop			@ (mov r8, r8)
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	b006      	add	sp, #24
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(const USART_TypeDef *USARTx, uint32_t Direction)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b084      	sub	sp, #16
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
 8000d26:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d103      	bne.n	8000d36 <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	3328      	adds	r3, #40	@ 0x28
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	e002      	b.n	8000d3c <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	3324      	adds	r3, #36	@ 0x24
 8000d3a:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
}
 8000d3e:	0018      	movs	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	b004      	add	sp, #16
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b084      	sub	sp, #16
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	60f8      	str	r0, [r7, #12]
 8000d4e:	60b9      	str	r1, [r7, #8]
 8000d50:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	6819      	ldr	r1, [r3, #0]
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	435b      	muls	r3, r3
 8000d5a:	001a      	movs	r2, r3
 8000d5c:	0013      	movs	r3, r2
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	189b      	adds	r3, r3, r2
 8000d62:	43db      	mvns	r3, r3
 8000d64:	400b      	ands	r3, r1
 8000d66:	001a      	movs	r2, r3
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	435b      	muls	r3, r3
 8000d6c:	6879      	ldr	r1, [r7, #4]
 8000d6e:	434b      	muls	r3, r1
 8000d70:	431a      	orrs	r2, r3
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	601a      	str	r2, [r3, #0]
}
 8000d76:	46c0      	nop			@ (mov r8, r8)
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	b004      	add	sp, #16
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b084      	sub	sp, #16
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	60f8      	str	r0, [r7, #12]
 8000d86:	60b9      	str	r1, [r7, #8]
 8000d88:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	68d9      	ldr	r1, [r3, #12]
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	435b      	muls	r3, r3
 8000d92:	001a      	movs	r2, r3
 8000d94:	0013      	movs	r3, r2
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	189b      	adds	r3, r3, r2
 8000d9a:	43db      	mvns	r3, r3
 8000d9c:	400b      	ands	r3, r1
 8000d9e:	001a      	movs	r2, r3
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	435b      	muls	r3, r3
 8000da4:	6879      	ldr	r1, [r7, #4]
 8000da6:	434b      	muls	r3, r1
 8000da8:	431a      	orrs	r2, r3
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	60da      	str	r2, [r3, #12]
}
 8000dae:	46c0      	nop			@ (mov r8, r8)
 8000db0:	46bd      	mov	sp, r7
 8000db2:	b004      	add	sp, #16
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
 8000dbe:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	683a      	ldr	r2, [r7, #0]
 8000dc4:	619a      	str	r2, [r3, #24]
}
 8000dc6:	46c0      	nop			@ (mov r8, r8)
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	b002      	add	sp, #8
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b082      	sub	sp, #8
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
 8000dd6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	683a      	ldr	r2, [r7, #0]
 8000ddc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000dde:	46c0      	nop			@ (mov r8, r8)
 8000de0:	46bd      	mov	sp, r7
 8000de2:	b002      	add	sp, #8
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b084      	sub	sp, #16
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
 8000dee:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	695b      	ldr	r3, [r3, #20]
 8000df4:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	683a      	ldr	r2, [r7, #0]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	041a      	lsls	r2, r3, #16
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	43db      	mvns	r3, r3
 8000e02:	6839      	ldr	r1, [r7, #0]
 8000e04:	400b      	ands	r3, r1
 8000e06:	431a      	orrs	r2, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	619a      	str	r2, [r3, #24]
}
 8000e0c:	46c0      	nop			@ (mov r8, r8)
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	b004      	add	sp, #16
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e14:	b5b0      	push	{r4, r5, r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000e1a:	2001      	movs	r0, #1
 8000e1c:	f7ff fd94 	bl	8000948 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000e20:	2380      	movs	r3, #128	@ 0x80
 8000e22:	055b      	lsls	r3, r3, #21
 8000e24:	0018      	movs	r0, r3
 8000e26:	f7ff fd79 	bl	800091c <LL_APB1_GRP1_EnableClock>

  /* SysTick_IRQn interrupt configuration */

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  LL_SYSCFG_DisableDBATT(LL_SYSCFG_UCPD1_STROBE | LL_SYSCFG_UCPD2_STROBE);
 8000e2a:	23c0      	movs	r3, #192	@ 0xc0
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f7ff fdb6 	bl	80009a0 <LL_SYSCFG_DisableDBATT>
  /* USER CODE BEGIN Init */
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e34:	f000 f83a 	bl	8000eac <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* Initialize User push-button in EXTI mode */
   UserButton_Init();
 8000e38:	f000 f9da 	bl	80011f0 <UserButton_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e3c:	f000 f9ab 	bl	8001196 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e40:	f000 f99a 	bl	8001178 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000e44:	f000 f86c 	bl	8000f20 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /*Wait for User push-button to start receive data*/
  WaitForUserButtonPress();
 8000e48:	f000 fa28 	bl	800129c <WaitForUserButtonPress>

  StartTransfer(); // Enable DMA and its RX Channel
 8000e4c:	f000 fa52 	bl	80012f4 <StartTransfer>

  ExecuteTasksAndDisableChannel(); // When data is received, execute the tasks and close the channel
 8000e50:	f000 fa62 	bl	8001318 <ExecuteTasksAndDisableChannel>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 ResetFlags();
 8000e54:	f000 fa8e 	bl	8001374 <ResetFlags>
	 // Start the recursion
	/* Configure the DMA functional parameters for reception */
	LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_2,
 8000e58:	4b10      	ldr	r3, [pc, #64]	@ (8000e9c <main+0x88>)
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	f7ff ff5e 	bl	8000d1e <LL_USART_DMA_GetRegAddr>
 8000e62:	0005      	movs	r5, r0
 8000e64:	4c0e      	ldr	r4, [pc, #56]	@ (8000ea0 <main+0x8c>)
 8000e66:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea4 <main+0x90>)
 8000e68:	2101      	movs	r1, #1
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	f7ff fac4 	bl	80003f8 <LL_DMA_GetDataTransferDirection>
 8000e70:	0003      	movs	r3, r0
 8000e72:	480c      	ldr	r0, [pc, #48]	@ (8000ea4 <main+0x90>)
 8000e74:	9300      	str	r3, [sp, #0]
 8000e76:	0023      	movs	r3, r4
 8000e78:	002a      	movs	r2, r5
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	f7ff fbd6 	bl	800062c <LL_DMA_ConfigAddresses>
							   LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
							   (uint32_t)RxRawData,
							   LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2));
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_2, ubNbDataToReceive);
 8000e80:	4b09      	ldr	r3, [pc, #36]	@ (8000ea8 <main+0x94>)
 8000e82:	881b      	ldrh	r3, [r3, #0]
 8000e84:	001a      	movs	r2, r3
 8000e86:	4b07      	ldr	r3, [pc, #28]	@ (8000ea4 <main+0x90>)
 8000e88:	2101      	movs	r1, #1
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f7ff fbac 	bl	80005e8 <LL_DMA_SetDataLength>

	StartTransfer();
 8000e90:	f000 fa30 	bl	80012f4 <StartTransfer>

	ExecuteTasksAndDisableChannel();
 8000e94:	f000 fa40 	bl	8001318 <ExecuteTasksAndDisableChannel>
	 ResetFlags();
 8000e98:	46c0      	nop			@ (mov r8, r8)
 8000e9a:	e7db      	b.n	8000e54 <main+0x40>
 8000e9c:	40004400 	.word	0x40004400
 8000ea0:	20000028 	.word	0x20000028
 8000ea4:	40020000 	.word	0x40020000
 8000ea8:	20000000 	.word	0x20000000

08000eac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* HSI configuration and activation */
  
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000eb0:	2002      	movs	r0, #2
 8000eb2:	f7ff fd85 	bl	80009c0 <LL_FLASH_SetLatency>

  /* HSI configuration and activation */
  LL_RCC_HSI_Enable();
 8000eb6:	f7ff fc5d 	bl	8000774 <LL_RCC_HSI_Enable>
  while(LL_RCC_HSI_IsReady() != 1)
 8000eba:	46c0      	nop			@ (mov r8, r8)
 8000ebc:	f7ff fc68 	bl	8000790 <LL_RCC_HSI_IsReady>
 8000ec0:	0003      	movs	r3, r0
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d1fa      	bne.n	8000ebc <SystemClock_Config+0x10>
  {
  }

  /* Main PLL configuration and activation */
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_4, 70, LL_RCC_PLLR_DIV_5);
 8000ec6:	2380      	movs	r3, #128	@ 0x80
 8000ec8:	061b      	lsls	r3, r3, #24
 8000eca:	2246      	movs	r2, #70	@ 0x46
 8000ecc:	2130      	movs	r1, #48	@ 0x30
 8000ece:	2002      	movs	r0, #2
 8000ed0:	f7ff fce0 	bl	8000894 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000ed4:	f7ff fcbc 	bl	8000850 <LL_RCC_PLL_Enable>
  LL_RCC_PLL_EnableDomain_SYS();
 8000ed8:	f7ff fcfc 	bl	80008d4 <LL_RCC_PLL_EnableDomain_SYS>
  while(LL_RCC_PLL_IsReady() != 1)
 8000edc:	46c0      	nop			@ (mov r8, r8)
 8000ede:	f7ff fcc5 	bl	800086c <LL_RCC_PLL_IsReady>
 8000ee2:	0003      	movs	r3, r0
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d1fa      	bne.n	8000ede <SystemClock_Config+0x32>
  {
  }

  /* Set AHB prescaler*/
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000ee8:	2000      	movs	r0, #0
 8000eea:	f7ff fc85 	bl	80007f8 <LL_RCC_SetAHBPrescaler>

  /* Sysclk activation on the main PLL */
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000eee:	2002      	movs	r0, #2
 8000ef0:	f7ff fc62 	bl	80007b8 <LL_RCC_SetSysClkSource>
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000ef4:	46c0      	nop			@ (mov r8, r8)
 8000ef6:	f7ff fc73 	bl	80007e0 <LL_RCC_GetSysClkSource>
 8000efa:	0003      	movs	r3, r0
 8000efc:	2b10      	cmp	r3, #16
 8000efe:	d1fa      	bne.n	8000ef6 <SystemClock_Config+0x4a>
  {
  }

  /* Set APB1 prescaler*/
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000f00:	2000      	movs	r0, #0
 8000f02:	f7ff fc8f 	bl	8000824 <LL_RCC_SetAPB1Prescaler>
  LL_Init1msTick(56000000);
 8000f06:	4b05      	ldr	r3, [pc, #20]	@ (8000f1c <SystemClock_Config+0x70>)
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f001 f80b 	bl	8001f24 <LL_Init1msTick>
  /* Update CMSIS variable (which can be updated also through SystemCoreClockUpdate function) */
  LL_SetSystemCoreClock(56000000);
 8000f0e:	4b03      	ldr	r3, [pc, #12]	@ (8000f1c <SystemClock_Config+0x70>)
 8000f10:	0018      	movs	r0, r3
 8000f12:	f001 f83b 	bl	8001f8c <LL_SetSystemCoreClock>
}
 8000f16:	46c0      	nop			@ (mov r8, r8)
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	03567e00 	.word	0x03567e00

08000f20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f22:	b091      	sub	sp, #68	@ 0x44
 8000f24:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000f26:	2618      	movs	r6, #24
 8000f28:	19bb      	adds	r3, r7, r6
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	2320      	movs	r3, #32
 8000f2e:	001a      	movs	r2, r3
 8000f30:	2100      	movs	r1, #0
 8000f32:	f001 f839 	bl	8001fa8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f36:	003b      	movs	r3, r7
 8000f38:	0018      	movs	r0, r3
 8000f3a:	2318      	movs	r3, #24
 8000f3c:	001a      	movs	r2, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	f001 f832 	bl	8001fa8 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000f44:	2380      	movs	r3, #128	@ 0x80
 8000f46:	029b      	lsls	r3, r3, #10
 8000f48:	0018      	movs	r0, r3
 8000f4a:	f7ff fce7 	bl	800091c <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000f4e:	2001      	movs	r0, #1
 8000f50:	f7ff fd10 	bl	8000974 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000f54:	003b      	movs	r3, r7
 8000f56:	2204      	movs	r2, #4
 8000f58:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000f5a:	003b      	movs	r3, r7
 8000f5c:	2202      	movs	r2, #2
 8000f5e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000f60:	003b      	movs	r3, r7
 8000f62:	2202      	movs	r2, #2
 8000f64:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f66:	003b      	movs	r3, r7
 8000f68:	2200      	movs	r2, #0
 8000f6a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000f6c:	003b      	movs	r3, r7
 8000f6e:	2201      	movs	r2, #1
 8000f70:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000f72:	003b      	movs	r3, r7
 8000f74:	2201      	movs	r2, #1
 8000f76:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f78:	003a      	movs	r2, r7
 8000f7a:	23a0      	movs	r3, #160	@ 0xa0
 8000f7c:	05db      	lsls	r3, r3, #23
 8000f7e:	0011      	movs	r1, r2
 8000f80:	0018      	movs	r0, r3
 8000f82:	f000 fc57 	bl	8001834 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000f86:	003b      	movs	r3, r7
 8000f88:	2208      	movs	r2, #8
 8000f8a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000f8c:	003b      	movs	r3, r7
 8000f8e:	2202      	movs	r2, #2
 8000f90:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000f92:	003b      	movs	r3, r7
 8000f94:	2202      	movs	r2, #2
 8000f96:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f98:	003b      	movs	r3, r7
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000f9e:	003b      	movs	r3, r7
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000fa4:	003b      	movs	r3, r7
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000faa:	003a      	movs	r2, r7
 8000fac:	23a0      	movs	r3, #160	@ 0xa0
 8000fae:	05db      	lsls	r3, r3, #23
 8000fb0:	0011      	movs	r1, r2
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	f000 fc3e 	bl	8001834 <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_USART2_TX);
 8000fb8:	4b6b      	ldr	r3, [pc, #428]	@ (8001168 <MX_USART2_UART_Init+0x248>)
 8000fba:	2235      	movs	r2, #53	@ 0x35
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	f7ff fb6c 	bl	800069c <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8000fc4:	4b68      	ldr	r3, [pc, #416]	@ (8001168 <MX_USART2_UART_Init+0x248>)
 8000fc6:	2210      	movs	r2, #16
 8000fc8:	2100      	movs	r1, #0
 8000fca:	0018      	movs	r0, r3
 8000fcc:	f7ff f9ee 	bl	80003ac <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_HIGH);
 8000fd0:	2380      	movs	r3, #128	@ 0x80
 8000fd2:	019b      	lsls	r3, r3, #6
 8000fd4:	4864      	ldr	r0, [pc, #400]	@ (8001168 <MX_USART2_UART_Init+0x248>)
 8000fd6:	001a      	movs	r2, r3
 8000fd8:	2100      	movs	r1, #0
 8000fda:	f7ff fadf 	bl	800059c <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 8000fde:	4b62      	ldr	r3, [pc, #392]	@ (8001168 <MX_USART2_UART_Init+0x248>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f7ff fa21 	bl	800042c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8000fea:	4b5f      	ldr	r3, [pc, #380]	@ (8001168 <MX_USART2_UART_Init+0x248>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	2100      	movs	r1, #0
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	f7ff fa3f 	bl	8000474 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8000ff6:	4b5c      	ldr	r3, [pc, #368]	@ (8001168 <MX_USART2_UART_Init+0x248>)
 8000ff8:	2280      	movs	r2, #128	@ 0x80
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	f7ff fa5d 	bl	80004bc <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_BYTE);
 8001002:	4b59      	ldr	r3, [pc, #356]	@ (8001168 <MX_USART2_UART_Init+0x248>)
 8001004:	2200      	movs	r2, #0
 8001006:	2100      	movs	r1, #0
 8001008:	0018      	movs	r0, r3
 800100a:	f7ff fa7b 	bl	8000504 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 800100e:	4b56      	ldr	r3, [pc, #344]	@ (8001168 <MX_USART2_UART_Init+0x248>)
 8001010:	2200      	movs	r2, #0
 8001012:	2100      	movs	r1, #0
 8001014:	0018      	movs	r0, r3
 8001016:	f7ff fa9b 	bl	8000550 <LL_DMA_SetMemorySize>

  /* USART2_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_2, LL_DMAMUX_REQ_USART2_RX);
 800101a:	4b53      	ldr	r3, [pc, #332]	@ (8001168 <MX_USART2_UART_Init+0x248>)
 800101c:	2234      	movs	r2, #52	@ 0x34
 800101e:	2101      	movs	r1, #1
 8001020:	0018      	movs	r0, r3
 8001022:	f7ff fb3b 	bl	800069c <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_PERIPH_TO_MEMORY); //Peripheral to memory
 8001026:	4b50      	ldr	r3, [pc, #320]	@ (8001168 <MX_USART2_UART_Init+0x248>)
 8001028:	2200      	movs	r2, #0
 800102a:	2101      	movs	r1, #1
 800102c:	0018      	movs	r0, r3
 800102e:	f7ff f9bd 	bl	80003ac <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_HIGH); //priority high
 8001032:	2380      	movs	r3, #128	@ 0x80
 8001034:	019b      	lsls	r3, r3, #6
 8001036:	484c      	ldr	r0, [pc, #304]	@ (8001168 <MX_USART2_UART_Init+0x248>)
 8001038:	001a      	movs	r2, r3
 800103a:	2101      	movs	r1, #1
 800103c:	f7ff faae 	bl	800059c <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);  //Normal DMA
 8001040:	4b49      	ldr	r3, [pc, #292]	@ (8001168 <MX_USART2_UART_Init+0x248>)
 8001042:	2200      	movs	r2, #0
 8001044:	2101      	movs	r1, #1
 8001046:	0018      	movs	r0, r3
 8001048:	f7ff f9f0 	bl	800042c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 800104c:	4b46      	ldr	r3, [pc, #280]	@ (8001168 <MX_USART2_UART_Init+0x248>)
 800104e:	2200      	movs	r2, #0
 8001050:	2101      	movs	r1, #1
 8001052:	0018      	movs	r0, r3
 8001054:	f7ff fa0e 	bl	8000474 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 8001058:	4b43      	ldr	r3, [pc, #268]	@ (8001168 <MX_USART2_UART_Init+0x248>)
 800105a:	2280      	movs	r2, #128	@ 0x80
 800105c:	2101      	movs	r1, #1
 800105e:	0018      	movs	r0, r3
 8001060:	f7ff fa2c 	bl	80004bc <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 8001064:	4b40      	ldr	r3, [pc, #256]	@ (8001168 <MX_USART2_UART_Init+0x248>)
 8001066:	2200      	movs	r2, #0
 8001068:	2101      	movs	r1, #1
 800106a:	0018      	movs	r0, r3
 800106c:	f7ff fa4a 	bl	8000504 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 8001070:	4b3d      	ldr	r3, [pc, #244]	@ (8001168 <MX_USART2_UART_Init+0x248>)
 8001072:	2200      	movs	r2, #0
 8001074:	2101      	movs	r1, #1
 8001076:	0018      	movs	r0, r3
 8001078:	f7ff fa6a 	bl	8000550 <LL_DMA_SetMemorySize>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 800107c:	2100      	movs	r1, #0
 800107e:	201c      	movs	r0, #28
 8001080:	f7ff f8e6 	bl	8000250 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001084:	201c      	movs	r0, #28
 8001086:	f7ff f8c9 	bl	800021c <__NVIC_EnableIRQ>
//                         LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT),
//                         LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1));
//  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, ubNbDataToTransmit);

  /* Configure the DMA functional parameters for reception */
  LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_2,
 800108a:	4b38      	ldr	r3, [pc, #224]	@ (800116c <MX_USART2_UART_Init+0x24c>)
 800108c:	2101      	movs	r1, #1
 800108e:	0018      	movs	r0, r3
 8001090:	f7ff fe45 	bl	8000d1e <LL_USART_DMA_GetRegAddr>
 8001094:	0005      	movs	r5, r0
 8001096:	4c36      	ldr	r4, [pc, #216]	@ (8001170 <MX_USART2_UART_Init+0x250>)
 8001098:	4b33      	ldr	r3, [pc, #204]	@ (8001168 <MX_USART2_UART_Init+0x248>)
 800109a:	2101      	movs	r1, #1
 800109c:	0018      	movs	r0, r3
 800109e:	f7ff f9ab 	bl	80003f8 <LL_DMA_GetDataTransferDirection>
 80010a2:	0003      	movs	r3, r0
 80010a4:	4830      	ldr	r0, [pc, #192]	@ (8001168 <MX_USART2_UART_Init+0x248>)
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	0023      	movs	r3, r4
 80010aa:	002a      	movs	r2, r5
 80010ac:	2101      	movs	r1, #1
 80010ae:	f7ff fabd 	bl	800062c <LL_DMA_ConfigAddresses>
                         LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
                         (uint32_t)RxRawData,
                         LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2));
  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_2, ubNbDataToReceive);
 80010b2:	4b30      	ldr	r3, [pc, #192]	@ (8001174 <MX_USART2_UART_Init+0x254>)
 80010b4:	881b      	ldrh	r3, [r3, #0]
 80010b6:	001a      	movs	r2, r3
 80010b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001168 <MX_USART2_UART_Init+0x248>)
 80010ba:	2101      	movs	r1, #1
 80010bc:	0018      	movs	r0, r3
 80010be:	f7ff fa93 	bl	80005e8 <LL_DMA_SetDataLength>

  /* Enable DMA transfer complete/error interrupts  */
//  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_1);
//  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_1);
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_2);
 80010c2:	4b29      	ldr	r3, [pc, #164]	@ (8001168 <MX_USART2_UART_Init+0x248>)
 80010c4:	2101      	movs	r1, #1
 80010c6:	0018      	movs	r0, r3
 80010c8:	f7ff fb14 	bl	80006f4 <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_2);
 80010cc:	4b26      	ldr	r3, [pc, #152]	@ (8001168 <MX_USART2_UART_Init+0x248>)
 80010ce:	2101      	movs	r1, #1
 80010d0:	0018      	movs	r0, r3
 80010d2:	f7ff fb2f 	bl	8000734 <LL_DMA_EnableIT_TE>
  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 80010d6:	19bb      	adds	r3, r7, r6
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 19200;
 80010dc:	19bb      	adds	r3, r7, r6
 80010de:	2296      	movs	r2, #150	@ 0x96
 80010e0:	01d2      	lsls	r2, r2, #7
 80010e2:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80010e4:	0031      	movs	r1, r6
 80010e6:	187b      	adds	r3, r7, r1
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80010ec:	187b      	adds	r3, r7, r1
 80010ee:	2200      	movs	r2, #0
 80010f0:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80010f2:	187b      	adds	r3, r7, r1
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80010f8:	187b      	adds	r3, r7, r1
 80010fa:	220c      	movs	r2, #12
 80010fc:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80010fe:	187b      	adds	r3, r7, r1
 8001100:	2200      	movs	r2, #0
 8001102:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001104:	187b      	adds	r3, r7, r1
 8001106:	2200      	movs	r2, #0
 8001108:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART2,&USART_InitStruct);
 800110a:	187b      	adds	r3, r7, r1
 800110c:	4a17      	ldr	r2, [pc, #92]	@ (800116c <MX_USART2_UART_Init+0x24c>)
 800110e:	0019      	movs	r1, r3
 8001110:	0010      	movs	r0, r2
 8001112:	f000 fe5f 	bl	8001dd4 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8001116:	4b15      	ldr	r3, [pc, #84]	@ (800116c <MX_USART2_UART_Init+0x24c>)
 8001118:	2100      	movs	r1, #0
 800111a:	0018      	movs	r0, r3
 800111c:	f7ff fcca 	bl	8000ab4 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8001120:	4b12      	ldr	r3, [pc, #72]	@ (800116c <MX_USART2_UART_Init+0x24c>)
 8001122:	2100      	movs	r1, #0
 8001124:	0018      	movs	r0, r3
 8001126:	f7ff fce9 	bl	8000afc <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART2);
 800112a:	4b10      	ldr	r3, [pc, #64]	@ (800116c <MX_USART2_UART_Init+0x24c>)
 800112c:	0018      	movs	r0, r3
 800112e:	f7ff fcb1 	bl	8000a94 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART2);
 8001132:	4b0e      	ldr	r3, [pc, #56]	@ (800116c <MX_USART2_UART_Init+0x24c>)
 8001134:	0018      	movs	r0, r3
 8001136:	f7ff fd27 	bl	8000b88 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */
  LL_USART_EnableRxTimeout(USART2);
 800113a:	4b0c      	ldr	r3, [pc, #48]	@ (800116c <MX_USART2_UART_Init+0x24c>)
 800113c:	0018      	movs	r0, r3
 800113e:	f7ff fd03 	bl	8000b48 <LL_USART_EnableRxTimeout>
  LL_USART_SetRxTimeout(USART2, 960);
 8001142:	23f0      	movs	r3, #240	@ 0xf0
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	4a09      	ldr	r2, [pc, #36]	@ (800116c <MX_USART2_UART_Init+0x24c>)
 8001148:	0019      	movs	r1, r3
 800114a:	0010      	movs	r0, r2
 800114c:	f7ff fd0b 	bl	8000b66 <LL_USART_SetRxTimeout>

  LL_USART_ClearFlag_RTO(USART2);
 8001150:	4b06      	ldr	r3, [pc, #24]	@ (800116c <MX_USART2_UART_Init+0x24c>)
 8001152:	0018      	movs	r0, r3
 8001154:	f7ff fd98 	bl	8000c88 <LL_USART_ClearFlag_RTO>
  LL_USART_EnableIT_RTO(USART2);
 8001158:	4b04      	ldr	r3, [pc, #16]	@ (800116c <MX_USART2_UART_Init+0x24c>)
 800115a:	0018      	movs	r0, r3
 800115c:	f7ff fda0 	bl	8000ca0 <LL_USART_EnableIT_RTO>
//  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
//  {
//  }
  /* USER CODE BEGIN USART2_Init 2 */

}
 8001160:	46c0      	nop			@ (mov r8, r8)
 8001162:	46bd      	mov	sp, r7
 8001164:	b00f      	add	sp, #60	@ 0x3c
 8001166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001168:	40020000 	.word	0x40020000
 800116c:	40004400 	.word	0x40004400
 8001170:	20000028 	.word	0x20000028
 8001174:	20000000 	.word	0x20000000

08001178 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 800117c:	2001      	movs	r0, #1
 800117e:	f7ff fbb7 	bl	80008f0 <LL_AHB1_GRP1_EnableClock>
  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
//  NVIC_SetPriority(DMA1_Channel1_IRQn, 0);
//  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0);
 8001182:	2100      	movs	r1, #0
 8001184:	200a      	movs	r0, #10
 8001186:	f7ff f863 	bl	8000250 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800118a:	200a      	movs	r0, #10
 800118c:	f7ff f846 	bl	800021c <__NVIC_EnableIRQ>

}
 8001190:	46c0      	nop			@ (mov r8, r8)
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b086      	sub	sp, #24
 800119a:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	003b      	movs	r3, r7
 800119e:	0018      	movs	r0, r3
 80011a0:	2318      	movs	r3, #24
 80011a2:	001a      	movs	r2, r3
 80011a4:	2100      	movs	r1, #0
 80011a6:	f000 feff 	bl	8001fa8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */


  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80011aa:	2001      	movs	r0, #1
 80011ac:	f7ff fbe2 	bl	8000974 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED4_GPIO_Port, LED4_Pin);
 80011b0:	23a0      	movs	r3, #160	@ 0xa0
 80011b2:	05db      	lsls	r3, r3, #23
 80011b4:	2120      	movs	r1, #32
 80011b6:	0018      	movs	r0, r3
 80011b8:	f7ff fe09 	bl	8000dce <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LED4_Pin;
 80011bc:	003b      	movs	r3, r7
 80011be:	2220      	movs	r2, #32
 80011c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80011c2:	003b      	movs	r3, r7
 80011c4:	2201      	movs	r2, #1
 80011c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80011c8:	003b      	movs	r3, r7
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011ce:	003b      	movs	r3, r7
 80011d0:	2200      	movs	r2, #0
 80011d2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011d4:	003b      	movs	r3, r7
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 80011da:	003a      	movs	r2, r7
 80011dc:	23a0      	movs	r3, #160	@ 0xa0
 80011de:	05db      	lsls	r3, r3, #23
 80011e0:	0011      	movs	r1, r2
 80011e2:	0018      	movs	r0, r3
 80011e4:	f000 fb26 	bl	8001834 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */

}
 80011e8:	46c0      	nop			@ (mov r8, r8)
 80011ea:	46bd      	mov	sp, r7
 80011ec:	b006      	add	sp, #24
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <UserButton_Init>:

/* USER CODE BEGIN 4 */
void UserButton_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  USER_BUTTON_GPIO_CLK_ENABLE();
 80011f4:	2004      	movs	r0, #4
 80011f6:	f7ff fbbd 	bl	8000974 <LL_IOP_GRP1_EnableClock>

  /* Configure GPIO for BUTTON */
  LL_GPIO_SetPinMode(USER_BUTTON_GPIO_PORT, USER_BUTTON_PIN, LL_GPIO_MODE_INPUT);
 80011fa:	2380      	movs	r3, #128	@ 0x80
 80011fc:	019b      	lsls	r3, r3, #6
 80011fe:	4812      	ldr	r0, [pc, #72]	@ (8001248 <UserButton_Init+0x58>)
 8001200:	2200      	movs	r2, #0
 8001202:	0019      	movs	r1, r3
 8001204:	f7ff fd9f 	bl	8000d46 <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinPull(USER_BUTTON_GPIO_PORT, USER_BUTTON_PIN, LL_GPIO_PULL_NO);
 8001208:	2380      	movs	r3, #128	@ 0x80
 800120a:	019b      	lsls	r3, r3, #6
 800120c:	480e      	ldr	r0, [pc, #56]	@ (8001248 <UserButton_Init+0x58>)
 800120e:	2200      	movs	r2, #0
 8001210:	0019      	movs	r1, r3
 8001212:	f7ff fdb4 	bl	8000d7e <LL_GPIO_SetPinPull>

  /* Connect External Line to the GPIO*/
  USER_BUTTON_SYSCFG_SET_EXTI();
 8001216:	4b0d      	ldr	r3, [pc, #52]	@ (800124c <UserButton_Init+0x5c>)
 8001218:	0019      	movs	r1, r3
 800121a:	2002      	movs	r0, #2
 800121c:	f7ff fc06 	bl	8000a2c <LL_EXTI_SetEXTISource>

  /* Enable a rising trigger EXTI_Line4_15 Interrupt */
  USER_BUTTON_EXTI_LINE_ENABLE();
 8001220:	2380      	movs	r3, #128	@ 0x80
 8001222:	019b      	lsls	r3, r3, #6
 8001224:	0018      	movs	r0, r3
 8001226:	f7ff fbdf 	bl	80009e8 <LL_EXTI_EnableIT_0_31>
  USER_BUTTON_EXTI_FALLING_TRIG_ENABLE();
 800122a:	2380      	movs	r3, #128	@ 0x80
 800122c:	019b      	lsls	r3, r3, #6
 800122e:	0018      	movs	r0, r3
 8001230:	f7ff fbec 	bl	8000a0c <LL_EXTI_EnableFallingTrig_0_31>

  /* Configure NVIC for USER_BUTTON_EXTI_IRQn */
  NVIC_SetPriority(USER_BUTTON_EXTI_IRQn, 3);
 8001234:	2103      	movs	r1, #3
 8001236:	2007      	movs	r0, #7
 8001238:	f7ff f80a 	bl	8000250 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USER_BUTTON_EXTI_IRQn);
 800123c:	2007      	movs	r0, #7
 800123e:	f7fe ffed 	bl	800021c <__NVIC_EnableIRQ>
}
 8001242:	46c0      	nop			@ (mov r8, r8)
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	50000800 	.word	0x50000800
 800124c:	00080003 	.word	0x00080003

08001250 <LED_On>:

void LED_On(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* Turn LED4 on */
  LL_GPIO_SetOutputPin(LED4_GPIO_Port, LED4_Pin);
 8001254:	23a0      	movs	r3, #160	@ 0xa0
 8001256:	05db      	lsls	r3, r3, #23
 8001258:	2120      	movs	r1, #32
 800125a:	0018      	movs	r0, r3
 800125c:	f7ff fdab 	bl	8000db6 <LL_GPIO_SetOutputPin>
}
 8001260:	46c0      	nop			@ (mov r8, r8)
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <LED_Off>:

void LED_Off(void)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	af00      	add	r7, sp, #0
  /* Turn LED4 off */
  LL_GPIO_ResetOutputPin(LED4_GPIO_Port, LED4_Pin);
 800126a:	23a0      	movs	r3, #160	@ 0xa0
 800126c:	05db      	lsls	r3, r3, #23
 800126e:	2120      	movs	r1, #32
 8001270:	0018      	movs	r0, r3
 8001272:	f7ff fdac 	bl	8000dce <LL_GPIO_ResetOutputPin>
}
 8001276:	46c0      	nop			@ (mov r8, r8)
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <LED_Blinking>:

void LED_Blinking(uint32_t Period)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* Toggle LED4 in an infinite loop */
  while (1)
  {
    LL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8001284:	23a0      	movs	r3, #160	@ 0xa0
 8001286:	05db      	lsls	r3, r3, #23
 8001288:	2120      	movs	r1, #32
 800128a:	0018      	movs	r0, r3
 800128c:	f7ff fdab 	bl	8000de6 <LL_GPIO_TogglePin>
    LL_mDelay(Period);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	0018      	movs	r0, r3
 8001294:	f000 fe56 	bl	8001f44 <LL_mDelay>
    LL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8001298:	46c0      	nop			@ (mov r8, r8)
 800129a:	e7f3      	b.n	8001284 <LED_Blinking+0x8>

0800129c <WaitForUserButtonPress>:
  }
}


void WaitForUserButtonPress(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0

  while (ubButtonPress == 0)
 80012a0:	e008      	b.n	80012b4 <WaitForUserButtonPress+0x18>
  {

    LL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 80012a2:	23a0      	movs	r3, #160	@ 0xa0
 80012a4:	05db      	lsls	r3, r3, #23
 80012a6:	2120      	movs	r1, #32
 80012a8:	0018      	movs	r0, r3
 80012aa:	f7ff fd9c 	bl	8000de6 <LL_GPIO_TogglePin>
    LL_mDelay(200);
 80012ae:	20c8      	movs	r0, #200	@ 0xc8
 80012b0:	f000 fe48 	bl	8001f44 <LL_mDelay>
  while (ubButtonPress == 0)
 80012b4:	4b0d      	ldr	r3, [pc, #52]	@ (80012ec <WaitForUserButtonPress+0x50>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d0f1      	beq.n	80012a2 <WaitForUserButtonPress+0x6>
  }
  /* Ensure that LED4 is turned Off */
  LL_USART_Enable(USART2);
 80012be:	4b0c      	ldr	r3, [pc, #48]	@ (80012f0 <WaitForUserButtonPress+0x54>)
 80012c0:	0018      	movs	r0, r3
 80012c2:	f7ff fbd9 	bl	8000a78 <LL_USART_Enable>
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 80012c6:	e001      	b.n	80012cc <WaitForUserButtonPress+0x30>
  //  {
  //  }
  LED_Off();
 80012c8:	f7ff ffcd 	bl	8001266 <LED_Off>
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 80012cc:	4b08      	ldr	r3, [pc, #32]	@ (80012f0 <WaitForUserButtonPress+0x54>)
 80012ce:	0018      	movs	r0, r3
 80012d0:	f7ff fc86 	bl	8000be0 <LL_USART_IsActiveFlag_TEACK>
 80012d4:	1e03      	subs	r3, r0, #0
 80012d6:	d0f7      	beq.n	80012c8 <WaitForUserButtonPress+0x2c>
 80012d8:	4b05      	ldr	r3, [pc, #20]	@ (80012f0 <WaitForUserButtonPress+0x54>)
 80012da:	0018      	movs	r0, r3
 80012dc:	f7ff fc94 	bl	8000c08 <LL_USART_IsActiveFlag_REACK>
 80012e0:	1e03      	subs	r3, r0, #0
 80012e2:	d0f1      	beq.n	80012c8 <WaitForUserButtonPress+0x2c>
}
 80012e4:	46c0      	nop			@ (mov r8, r8)
 80012e6:	46c0      	nop			@ (mov r8, r8)
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000024 	.word	0x20000024
 80012f0:	40004400 	.word	0x40004400

080012f4 <StartTransfer>:

void StartTransfer(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* Enable DMA RX Interrupt */
  LL_USART_EnableDMAReq_RX(USART2);
 80012f8:	4b05      	ldr	r3, [pc, #20]	@ (8001310 <StartTransfer+0x1c>)
 80012fa:	0018      	movs	r0, r3
 80012fc:	f7ff fcf0 	bl	8000ce0 <LL_USART_EnableDMAReq_RX>

  /* Enable DMA Channel Rx */
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_2);
 8001300:	4b04      	ldr	r3, [pc, #16]	@ (8001314 <StartTransfer+0x20>)
 8001302:	2101      	movs	r1, #1
 8001304:	0018      	movs	r0, r3
 8001306:	f7ff f811 	bl	800032c <LL_DMA_EnableChannel>

  /* Enable DMA Channel Tx */

}
 800130a:	46c0      	nop			@ (mov r8, r8)
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40004400 	.word	0x40004400
 8001314:	40020000 	.word	0x40020000

08001318 <ExecuteTasksAndDisableChannel>:


void ExecuteTasksAndDisableChannel(void){
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
	while(ubReceptionComplete != 1)
 800131c:	46c0      	nop			@ (mov r8, r8)
 800131e:	4b08      	ldr	r3, [pc, #32]	@ (8001340 <ExecuteTasksAndDisableChannel+0x28>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b01      	cmp	r3, #1
 8001326:	d1fa      	bne.n	800131e <ExecuteTasksAndDisableChannel+0x6>
	{
		//Task1(RxBuffer);
	}

	Task1(RxBuffer);
 8001328:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <ExecuteTasksAndDisableChannel+0x2c>)
 800132a:	0018      	movs	r0, r3
 800132c:	f000 f89a 	bl	8001464 <Task1>
	LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_2);
 8001330:	4b05      	ldr	r3, [pc, #20]	@ (8001348 <ExecuteTasksAndDisableChannel+0x30>)
 8001332:	2101      	movs	r1, #1
 8001334:	0018      	movs	r0, r3
 8001336:	f7ff f819 	bl	800036c <LL_DMA_DisableChannel>

}
 800133a:	46c0      	nop			@ (mov r8, r8)
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000169 	.word	0x20000169
 8001344:	20000154 	.word	0x20000154
 8001348:	40020000 	.word	0x40020000

0800134c <DMA1_ReceiveComplete_Callback>:

void DMA1_ReceiveComplete_Callback(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
	ubReceptionComplete=1;
 8001350:	4b02      	ldr	r3, [pc, #8]	@ (800135c <DMA1_ReceiveComplete_Callback+0x10>)
 8001352:	2201      	movs	r2, #1
 8001354:	701a      	strb	r2, [r3, #0]
}
 8001356:	46c0      	nop			@ (mov r8, r8)
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000169 	.word	0x20000169

08001360 <UserButton_Callback>:

void UserButton_Callback(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* Update User push-button variable : to be checked in waiting loop in main program */
	ubButtonPress = 1;
 8001364:	4b02      	ldr	r3, [pc, #8]	@ (8001370 <UserButton_Callback+0x10>)
 8001366:	2201      	movs	r2, #1
 8001368:	701a      	strb	r2, [r3, #0]
}
 800136a:	46c0      	nop			@ (mov r8, r8)
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000024 	.word	0x20000024

08001374 <ResetFlags>:

void ResetFlags(void){
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0

	/* Buffer used for reception */
	ubReceptionComplete = 0;
 8001378:	4b02      	ldr	r3, [pc, #8]	@ (8001384 <ResetFlags+0x10>)
 800137a:	2200      	movs	r2, #0
 800137c:	701a      	strb	r2, [r3, #0]

}
 800137e:	46c0      	nop			@ (mov r8, r8)
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000169 	.word	0x20000169

08001388 <USART_TransferError_Callback>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void USART_TransferError_Callback(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* Disable DMA1 Tx Channel */
  LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_1);
 800138c:	4b08      	ldr	r3, [pc, #32]	@ (80013b0 <USART_TransferError_Callback+0x28>)
 800138e:	2100      	movs	r1, #0
 8001390:	0018      	movs	r0, r3
 8001392:	f7fe ffeb 	bl	800036c <LL_DMA_DisableChannel>

  /* Disable DMA1 Rx Channel */
  LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_2);
 8001396:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <USART_TransferError_Callback+0x28>)
 8001398:	2101      	movs	r1, #1
 800139a:	0018      	movs	r0, r3
 800139c:	f7fe ffe6 	bl	800036c <LL_DMA_DisableChannel>

  /* Set LED4 to Blinking mode to indicate error occurs */
  LED_Blinking(500);
 80013a0:	23fa      	movs	r3, #250	@ 0xfa
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	0018      	movs	r0, r3
 80013a6:	f7ff ff69 	bl	800127c <LED_Blinking>
}
 80013aa:	46c0      	nop			@ (mov r8, r8)
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40020000 	.word	0x40020000

080013b4 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 80013b4:	b590      	push	{r4, r7, lr}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0

	uint32_t isrflags=READ_REG(USART2->ISR);
 80013ba:	4b25      	ldr	r3, [pc, #148]	@ (8001450 <USART2_IRQHandler+0x9c>)
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	607b      	str	r3, [r7, #4]
	uint32_t errorflags=( isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE) );
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	220f      	movs	r2, #15
 80013c4:	4013      	ands	r3, r2
 80013c6:	603b      	str	r3, [r7, #0]

  /* USER CODE BEGIN USART2_IRQn 0 */
	if (LL_USART_IsActiveFlag_RTO(USART2)) //Check if Rx Timeou(RTO) flag is set.
 80013c8:	4b21      	ldr	r3, [pc, #132]	@ (8001450 <USART2_IRQHandler+0x9c>)
 80013ca:	0018      	movs	r0, r3
 80013cc:	f7ff fbf4 	bl	8000bb8 <LL_USART_IsActiveFlag_RTO>
 80013d0:	1e03      	subs	r3, r0, #0
 80013d2:	d016      	beq.n	8001402 <USART2_IRQHandler+0x4e>
	    {
	        // Clear the Rx Timeout flag
	        LL_USART_ClearFlag_RTO(USART2);
 80013d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001450 <USART2_IRQHandler+0x9c>)
 80013d6:	0018      	movs	r0, r3
 80013d8:	f7ff fc56 	bl	8000c88 <LL_USART_ClearFlag_RTO>
//	     if ( DataUsed== 1){
//	    	 memset(RxBuffer,0,sizeof(RxBuffer));
//	    	 DataUsed=0;
//	     }
	    	 memcpy(RxBuffer, RxRawData,sizeof(RxBuffer)); // Keep the input with RxBuffer
 80013dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001454 <USART2_IRQHandler+0xa0>)
 80013de:	4a1e      	ldr	r2, [pc, #120]	@ (8001458 <USART2_IRQHandler+0xa4>)
 80013e0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80013e2:	c313      	stmia	r3!, {r0, r1, r4}
 80013e4:	6812      	ldr	r2, [r2, #0]
 80013e6:	601a      	str	r2, [r3, #0]
			 IndexRxRawData= 0; // Reset the RawData index
 80013e8:	4b1c      	ldr	r3, [pc, #112]	@ (800145c <USART2_IRQHandler+0xa8>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	701a      	strb	r2, [r3, #0]
			 memset(RxRawData, 0, sizeof(RxRawData)); // Clear the RxRawData to get new input starting from index 0.
 80013ee:	2396      	movs	r3, #150	@ 0x96
 80013f0:	005a      	lsls	r2, r3, #1
 80013f2:	4b19      	ldr	r3, [pc, #100]	@ (8001458 <USART2_IRQHandler+0xa4>)
 80013f4:	2100      	movs	r1, #0
 80013f6:	0018      	movs	r0, r3
 80013f8:	f000 fdd6 	bl	8001fa8 <memset>
			 ubReceptionComplete = 1;
 80013fc:	4b18      	ldr	r3, [pc, #96]	@ (8001460 <USART2_IRQHandler+0xac>)
 80013fe:	2201      	movs	r2, #1
 8001400:	701a      	strb	r2, [r3, #0]
	      //Calls the interrupt then restarts DMA.
	    }

if( errorflags!=0 ){
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d01f      	beq.n	8001448 <USART2_IRQHandler+0x94>
	if( (isrflags & USART_ISR_PE)!=0 ){
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	4013      	ands	r3, r2
 800140e:	d003      	beq.n	8001418 <USART2_IRQHandler+0x64>
		LL_USART_ClearFlag_PE(USART2);
 8001410:	4b0f      	ldr	r3, [pc, #60]	@ (8001450 <USART2_IRQHandler+0x9c>)
 8001412:	0018      	movs	r0, r3
 8001414:	f7ff fc0c 	bl	8000c30 <LL_USART_ClearFlag_PE>
	}
	if( (isrflags & USART_ISR_FE)!=0 ){
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2202      	movs	r2, #2
 800141c:	4013      	ands	r3, r2
 800141e:	d003      	beq.n	8001428 <USART2_IRQHandler+0x74>
		LL_USART_ClearFlag_FE(USART2);
 8001420:	4b0b      	ldr	r3, [pc, #44]	@ (8001450 <USART2_IRQHandler+0x9c>)
 8001422:	0018      	movs	r0, r3
 8001424:	f7ff fc0f 	bl	8000c46 <LL_USART_ClearFlag_FE>
	}
	if( (isrflags & USART_ISR_NE)!=0 ){
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2204      	movs	r2, #4
 800142c:	4013      	ands	r3, r2
 800142e:	d003      	beq.n	8001438 <USART2_IRQHandler+0x84>
		LL_USART_ClearFlag_NE(USART2);
 8001430:	4b07      	ldr	r3, [pc, #28]	@ (8001450 <USART2_IRQHandler+0x9c>)
 8001432:	0018      	movs	r0, r3
 8001434:	f7ff fc12 	bl	8000c5c <LL_USART_ClearFlag_NE>
	}
	if( (isrflags & USART_ISR_ORE)!=0 ){
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2208      	movs	r2, #8
 800143c:	4013      	ands	r3, r2
 800143e:	d003      	beq.n	8001448 <USART2_IRQHandler+0x94>
		LL_USART_ClearFlag_ORE(USART2);
 8001440:	4b03      	ldr	r3, [pc, #12]	@ (8001450 <USART2_IRQHandler+0x9c>)
 8001442:	0018      	movs	r0, r3
 8001444:	f7ff fc15 	bl	8000c72 <LL_USART_ClearFlag_ORE>
//	{
//		RxRawData[IndexRxRawData++] == LL_USART_ReceiveData8(USART2); //Store the received data in RxRawData
//
//
//	}
}
 8001448:	46c0      	nop			@ (mov r8, r8)
 800144a:	46bd      	mov	sp, r7
 800144c:	b003      	add	sp, #12
 800144e:	bd90      	pop	{r4, r7, pc}
 8001450:	40004400 	.word	0x40004400
 8001454:	20000154 	.word	0x20000154
 8001458:	20000028 	.word	0x20000028
 800145c:	20000168 	.word	0x20000168
 8001460:	20000169 	.word	0x20000169

08001464 <Task1>:

void Task1(uint8_t *SmallBuffer){ //
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]

	for(int i=0; i<4;i++){ // Store the processed Data from RxBuffer
 800146c:	2300      	movs	r3, #0
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	e00c      	b.n	800148c <Task1+0x28>
		ProcessedData[i]= SmallBuffer[i+6];
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	3306      	adds	r3, #6
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	18d3      	adds	r3, r2, r3
 800147a:	7819      	ldrb	r1, [r3, #0]
 800147c:	4a0d      	ldr	r2, [pc, #52]	@ (80014b4 <Task1+0x50>)
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	18d3      	adds	r3, r2, r3
 8001482:	1c0a      	adds	r2, r1, #0
 8001484:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<4;i++){ // Store the processed Data from RxBuffer
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	3301      	adds	r3, #1
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2b03      	cmp	r3, #3
 8001490:	ddef      	ble.n	8001472 <Task1+0xe>
	}
	LightTask(ProcessedData);
 8001492:	4b08      	ldr	r3, [pc, #32]	@ (80014b4 <Task1+0x50>)
 8001494:	0018      	movs	r0, r3
 8001496:	f000 f811 	bl	80014bc <LightTask>
	memset(ProcessedData,0, sizeof(ProcessedData)); // REset the ProcessedDAta
 800149a:	4b06      	ldr	r3, [pc, #24]	@ (80014b4 <Task1+0x50>)
 800149c:	2204      	movs	r2, #4
 800149e:	2100      	movs	r1, #0
 80014a0:	0018      	movs	r0, r3
 80014a2:	f000 fd81 	bl	8001fa8 <memset>
	DataUsed=1; //Raise Flag when the Task1 is done.
 80014a6:	4b04      	ldr	r3, [pc, #16]	@ (80014b8 <Task1+0x54>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	701a      	strb	r2, [r3, #0]
}
 80014ac:	46c0      	nop			@ (mov r8, r8)
 80014ae:	46bd      	mov	sp, r7
 80014b0:	b004      	add	sp, #16
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000164 	.word	0x20000164
 80014b8:	2000016a 	.word	0x2000016a

080014bc <LightTask>:
void LightTask(uint8_t *ProcessedData){
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
	int i, k = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	613b      	str	r3, [r7, #16]
	int ProcessedData_Size= sizeof(ProcessedData);
 80014c8:	2304      	movs	r3, #4
 80014ca:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < ProcessedData_Size; i++){ // Convert the processed data to whole integer number
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	e00f      	b.n	80014f2 <LightTask+0x36>
		k = 10 * k + (ProcessedData[i] - '0'); // Turn the character into integer by substracting '0'
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	0013      	movs	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	189b      	adds	r3, r3, r2
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	0019      	movs	r1, r3
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	18d3      	adds	r3, r2, r3
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	3b30      	subs	r3, #48	@ 0x30
 80014e8:	18cb      	adds	r3, r1, r3
 80014ea:	613b      	str	r3, [r7, #16]
	for (i = 0; i < ProcessedData_Size; i++){ // Convert the processed data to whole integer number
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	3301      	adds	r3, #1
 80014f0:	617b      	str	r3, [r7, #20]
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	dbeb      	blt.n	80014d2 <LightTask+0x16>
	}
	a=k;
 80014fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001524 <LightTask+0x68>)
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	601a      	str	r2, [r3, #0]
	if ( k > 1330 && k < 1340){ // Blink LED, if the proccessed integer is at between desired borders
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	4a09      	ldr	r2, [pc, #36]	@ (8001528 <LightTask+0x6c>)
 8001504:	4293      	cmp	r3, r2
 8001506:	dd06      	ble.n	8001516 <LightTask+0x5a>
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	4a08      	ldr	r2, [pc, #32]	@ (800152c <LightTask+0x70>)
 800150c:	4293      	cmp	r3, r2
 800150e:	dc02      	bgt.n	8001516 <LightTask+0x5a>
		LED_On();
 8001510:	f7ff fe9e 	bl	8001250 <LED_On>
 8001514:	e002      	b.n	800151c <LightTask+0x60>
	}
	else{
		LED_Off();
 8001516:	f7ff fea6 	bl	8001266 <LED_Off>
	}

}
 800151a:	46c0      	nop			@ (mov r8, r8)
 800151c:	46c0      	nop			@ (mov r8, r8)
 800151e:	46bd      	mov	sp, r7
 8001520:	b006      	add	sp, #24
 8001522:	bd80      	pop	{r7, pc}
 8001524:	2000016c 	.word	0x2000016c
 8001528:	00000532 	.word	0x00000532
 800152c:	0000053b 	.word	0x0000053b

08001530 <LL_DMA_IsActiveFlag_TC2>:
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF2) == (DMA_ISR_TCIF2)) ? 1UL : 0UL);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2220      	movs	r2, #32
 800153e:	4013      	ands	r3, r2
 8001540:	2b20      	cmp	r3, #32
 8001542:	d101      	bne.n	8001548 <LL_DMA_IsActiveFlag_TC2+0x18>
 8001544:	2301      	movs	r3, #1
 8001546:	e000      	b.n	800154a <LL_DMA_IsActiveFlag_TC2+0x1a>
 8001548:	2300      	movs	r3, #0
}
 800154a:	0018      	movs	r0, r3
 800154c:	46bd      	mov	sp, r7
 800154e:	b002      	add	sp, #8
 8001550:	bd80      	pop	{r7, pc}

08001552 <LL_DMA_IsActiveFlag_TE2>:
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b082      	sub	sp, #8
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF2) == (DMA_ISR_TEIF2)) ? 1UL : 0UL);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2280      	movs	r2, #128	@ 0x80
 8001560:	4013      	ands	r3, r2
 8001562:	2b80      	cmp	r3, #128	@ 0x80
 8001564:	d101      	bne.n	800156a <LL_DMA_IsActiveFlag_TE2+0x18>
 8001566:	2301      	movs	r3, #1
 8001568:	e000      	b.n	800156c <LL_DMA_IsActiveFlag_TE2+0x1a>
 800156a:	2300      	movs	r3, #0
}
 800156c:	0018      	movs	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	b002      	add	sp, #8
 8001572:	bd80      	pop	{r7, pc}

08001574 <LL_DMA_ClearFlag_TC2>:
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF2);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2220      	movs	r2, #32
 8001580:	605a      	str	r2, [r3, #4]
}
 8001582:	46c0      	nop			@ (mov r8, r8)
 8001584:	46bd      	mov	sp, r7
 8001586:	b002      	add	sp, #8
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <LL_EXTI_IsActiveFallingFlag_0_31>:
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->FPR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8001594:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <LL_EXTI_IsActiveFallingFlag_0_31+0x24>)
 8001596:	691b      	ldr	r3, [r3, #16]
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	4013      	ands	r3, r2
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d101      	bne.n	80015a6 <LL_EXTI_IsActiveFallingFlag_0_31+0x1a>
 80015a2:	2301      	movs	r3, #1
 80015a4:	e000      	b.n	80015a8 <LL_EXTI_IsActiveFallingFlag_0_31+0x1c>
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	0018      	movs	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	b002      	add	sp, #8
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40021800 	.word	0x40021800

080015b4 <LL_EXTI_ClearFallingFlag_0_31>:
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 80015bc:	4b03      	ldr	r3, [pc, #12]	@ (80015cc <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	611a      	str	r2, [r3, #16]
}
 80015c2:	46c0      	nop			@ (mov r8, r8)
 80015c4:	46bd      	mov	sp, r7
 80015c6:	b002      	add	sp, #8
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	40021800 	.word	0x40021800

080015d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015d4:	46c0      	nop			@ (mov r8, r8)
 80015d6:	e7fd      	b.n	80015d4 <NMI_Handler+0x4>

080015d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015dc:	46c0      	nop			@ (mov r8, r8)
 80015de:	e7fd      	b.n	80015dc <HardFault_Handler+0x4>

080015e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80015e4:	46c0      	nop			@ (mov r8, r8)
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ee:	46c0      	nop			@ (mov r8, r8)
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015f8:	46c0      	nop			@ (mov r8, r8)
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001602:	46c0      	nop			@ (mov r8, r8)
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */
	if (LL_DMA_IsActiveFlag_TC2(DMA1))
 800160c:	4b0b      	ldr	r3, [pc, #44]	@ (800163c <DMA1_Channel2_3_IRQHandler+0x34>)
 800160e:	0018      	movs	r0, r3
 8001610:	f7ff ff8e 	bl	8001530 <LL_DMA_IsActiveFlag_TC2>
 8001614:	1e03      	subs	r3, r0, #0
 8001616:	d006      	beq.n	8001626 <DMA1_Channel2_3_IRQHandler+0x1e>
  {
    LL_DMA_ClearFlag_TC2(DMA1);
 8001618:	4b08      	ldr	r3, [pc, #32]	@ (800163c <DMA1_Channel2_3_IRQHandler+0x34>)
 800161a:	0018      	movs	r0, r3
 800161c:	f7ff ffaa 	bl	8001574 <LL_DMA_ClearFlag_TC2>
    /* Call function Reception complete Callback */
    DMA1_ReceiveComplete_Callback();
 8001620:	f7ff fe94 	bl	800134c <DMA1_ReceiveComplete_Callback>
  /* USER CODE END DMA1_Channel2_3_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001624:	e007      	b.n	8001636 <DMA1_Channel2_3_IRQHandler+0x2e>
  else if (LL_DMA_IsActiveFlag_TE2(DMA1))
 8001626:	4b05      	ldr	r3, [pc, #20]	@ (800163c <DMA1_Channel2_3_IRQHandler+0x34>)
 8001628:	0018      	movs	r0, r3
 800162a:	f7ff ff92 	bl	8001552 <LL_DMA_IsActiveFlag_TE2>
 800162e:	1e03      	subs	r3, r0, #0
 8001630:	d001      	beq.n	8001636 <DMA1_Channel2_3_IRQHandler+0x2e>
    USART_TransferError_Callback();
 8001632:	f7ff fea9 	bl	8001388 <USART_TransferError_Callback>
}
 8001636:	46c0      	nop			@ (mov r8, r8)
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40020000 	.word	0x40020000

08001640 <EXTI4_15_IRQHandler>:
//  /* USER CODE END USART2_IRQn 1 */
//}

/* USER CODE BEGIN 1 */
void USER_BUTTON_IRQHANDLER(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* Manage Flags */
  if (LL_EXTI_IsActiveFallingFlag_0_31(USER_BUTTON_EXTI_LINE) != RESET)
 8001644:	2380      	movs	r3, #128	@ 0x80
 8001646:	019b      	lsls	r3, r3, #6
 8001648:	0018      	movs	r0, r3
 800164a:	f7ff ff9f 	bl	800158c <LL_EXTI_IsActiveFallingFlag_0_31>
 800164e:	1e03      	subs	r3, r0, #0
 8001650:	d006      	beq.n	8001660 <EXTI4_15_IRQHandler+0x20>
  {
    LL_EXTI_ClearFallingFlag_0_31(USER_BUTTON_EXTI_LINE);
 8001652:	2380      	movs	r3, #128	@ 0x80
 8001654:	019b      	lsls	r3, r3, #6
 8001656:	0018      	movs	r0, r3
 8001658:	f7ff ffac 	bl	80015b4 <LL_EXTI_ClearFallingFlag_0_31>

    /* Handle User push-button press in dedicated function */
    UserButton_Callback();
 800165c:	f7ff fe80 	bl	8001360 <UserButton_Callback>
  }
}
 8001660:	46c0      	nop			@ (mov r8, r8)
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800166a:	46c0      	nop			@ (mov r8, r8)
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001670:	480d      	ldr	r0, [pc, #52]	@ (80016a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001672:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001674:	f7ff fff7 	bl	8001666 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001678:	480c      	ldr	r0, [pc, #48]	@ (80016ac <LoopForever+0x6>)
  ldr r1, =_edata
 800167a:	490d      	ldr	r1, [pc, #52]	@ (80016b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800167c:	4a0d      	ldr	r2, [pc, #52]	@ (80016b4 <LoopForever+0xe>)
  movs r3, #0
 800167e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001680:	e002      	b.n	8001688 <LoopCopyDataInit>

08001682 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001682:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001684:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001686:	3304      	adds	r3, #4

08001688 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001688:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800168a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800168c:	d3f9      	bcc.n	8001682 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800168e:	4a0a      	ldr	r2, [pc, #40]	@ (80016b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001690:	4c0a      	ldr	r4, [pc, #40]	@ (80016bc <LoopForever+0x16>)
  movs r3, #0
 8001692:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001694:	e001      	b.n	800169a <LoopFillZerobss>

08001696 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001696:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001698:	3204      	adds	r2, #4

0800169a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800169a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800169c:	d3fb      	bcc.n	8001696 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800169e:	f000 fc8b 	bl	8001fb8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80016a2:	f7ff fbb7 	bl	8000e14 <main>

080016a6 <LoopForever>:

LoopForever:
  b LoopForever
 80016a6:	e7fe      	b.n	80016a6 <LoopForever>
  ldr   r0, =_estack
 80016a8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80016ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016b0:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 80016b4:	080020b8 	.word	0x080020b8
  ldr r2, =_sbss
 80016b8:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 80016bc:	20000170 	.word	0x20000170

080016c0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016c0:	e7fe      	b.n	80016c0 <ADC1_COMP_IRQHandler>

080016c2 <LL_GPIO_SetPinMode>:
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b084      	sub	sp, #16
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	60f8      	str	r0, [r7, #12]
 80016ca:	60b9      	str	r1, [r7, #8]
 80016cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	6819      	ldr	r1, [r3, #0]
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	435b      	muls	r3, r3
 80016d6:	001a      	movs	r2, r3
 80016d8:	0013      	movs	r3, r2
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	189b      	adds	r3, r3, r2
 80016de:	43db      	mvns	r3, r3
 80016e0:	400b      	ands	r3, r1
 80016e2:	001a      	movs	r2, r3
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	435b      	muls	r3, r3
 80016e8:	6879      	ldr	r1, [r7, #4]
 80016ea:	434b      	muls	r3, r1
 80016ec:	431a      	orrs	r2, r3
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	601a      	str	r2, [r3, #0]
}
 80016f2:	46c0      	nop			@ (mov r8, r8)
 80016f4:	46bd      	mov	sp, r7
 80016f6:	b004      	add	sp, #16
 80016f8:	bd80      	pop	{r7, pc}

080016fa <LL_GPIO_SetPinOutputType>:
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b084      	sub	sp, #16
 80016fe:	af00      	add	r7, sp, #0
 8001700:	60f8      	str	r0, [r7, #12]
 8001702:	60b9      	str	r1, [r7, #8]
 8001704:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	43d2      	mvns	r2, r2
 800170e:	401a      	ands	r2, r3
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	6879      	ldr	r1, [r7, #4]
 8001714:	434b      	muls	r3, r1
 8001716:	431a      	orrs	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	605a      	str	r2, [r3, #4]
}
 800171c:	46c0      	nop			@ (mov r8, r8)
 800171e:	46bd      	mov	sp, r7
 8001720:	b004      	add	sp, #16
 8001722:	bd80      	pop	{r7, pc}

08001724 <LL_GPIO_SetPinSpeed>:
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6899      	ldr	r1, [r3, #8]
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	435b      	muls	r3, r3
 8001738:	001a      	movs	r2, r3
 800173a:	0013      	movs	r3, r2
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	189b      	adds	r3, r3, r2
 8001740:	43db      	mvns	r3, r3
 8001742:	400b      	ands	r3, r1
 8001744:	001a      	movs	r2, r3
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	435b      	muls	r3, r3
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	434b      	muls	r3, r1
 800174e:	431a      	orrs	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	609a      	str	r2, [r3, #8]
}
 8001754:	46c0      	nop			@ (mov r8, r8)
 8001756:	46bd      	mov	sp, r7
 8001758:	b004      	add	sp, #16
 800175a:	bd80      	pop	{r7, pc}

0800175c <LL_GPIO_SetPinPull>:
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	68d9      	ldr	r1, [r3, #12]
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	435b      	muls	r3, r3
 8001770:	001a      	movs	r2, r3
 8001772:	0013      	movs	r3, r2
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	189b      	adds	r3, r3, r2
 8001778:	43db      	mvns	r3, r3
 800177a:	400b      	ands	r3, r1
 800177c:	001a      	movs	r2, r3
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	435b      	muls	r3, r3
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	434b      	muls	r3, r1
 8001786:	431a      	orrs	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	60da      	str	r2, [r3, #12]
}
 800178c:	46c0      	nop			@ (mov r8, r8)
 800178e:	46bd      	mov	sp, r7
 8001790:	b004      	add	sp, #16
 8001792:	bd80      	pop	{r7, pc}

08001794 <LL_GPIO_SetAFPin_0_7>:
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6a19      	ldr	r1, [r3, #32]
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	435b      	muls	r3, r3
 80017a8:	68ba      	ldr	r2, [r7, #8]
 80017aa:	4353      	muls	r3, r2
 80017ac:	68ba      	ldr	r2, [r7, #8]
 80017ae:	435a      	muls	r2, r3
 80017b0:	0013      	movs	r3, r2
 80017b2:	011b      	lsls	r3, r3, #4
 80017b4:	1a9b      	subs	r3, r3, r2
 80017b6:	43db      	mvns	r3, r3
 80017b8:	400b      	ands	r3, r1
 80017ba:	001a      	movs	r2, r3
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	435b      	muls	r3, r3
 80017c0:	68b9      	ldr	r1, [r7, #8]
 80017c2:	434b      	muls	r3, r1
 80017c4:	68b9      	ldr	r1, [r7, #8]
 80017c6:	434b      	muls	r3, r1
 80017c8:	6879      	ldr	r1, [r7, #4]
 80017ca:	434b      	muls	r3, r1
 80017cc:	431a      	orrs	r2, r3
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	621a      	str	r2, [r3, #32]
}
 80017d2:	46c0      	nop			@ (mov r8, r8)
 80017d4:	46bd      	mov	sp, r7
 80017d6:	b004      	add	sp, #16
 80017d8:	bd80      	pop	{r7, pc}

080017da <LL_GPIO_SetAFPin_8_15>:
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b084      	sub	sp, #16
 80017de:	af00      	add	r7, sp, #0
 80017e0:	60f8      	str	r0, [r7, #12]
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	0a1b      	lsrs	r3, r3, #8
 80017ee:	68ba      	ldr	r2, [r7, #8]
 80017f0:	0a12      	lsrs	r2, r2, #8
 80017f2:	4353      	muls	r3, r2
 80017f4:	68ba      	ldr	r2, [r7, #8]
 80017f6:	0a12      	lsrs	r2, r2, #8
 80017f8:	4353      	muls	r3, r2
 80017fa:	68ba      	ldr	r2, [r7, #8]
 80017fc:	0a12      	lsrs	r2, r2, #8
 80017fe:	435a      	muls	r2, r3
 8001800:	0013      	movs	r3, r2
 8001802:	011b      	lsls	r3, r3, #4
 8001804:	1a9b      	subs	r3, r3, r2
 8001806:	43db      	mvns	r3, r3
 8001808:	400b      	ands	r3, r1
 800180a:	001a      	movs	r2, r3
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	0a1b      	lsrs	r3, r3, #8
 8001810:	68b9      	ldr	r1, [r7, #8]
 8001812:	0a09      	lsrs	r1, r1, #8
 8001814:	434b      	muls	r3, r1
 8001816:	68b9      	ldr	r1, [r7, #8]
 8001818:	0a09      	lsrs	r1, r1, #8
 800181a:	434b      	muls	r3, r1
 800181c:	68b9      	ldr	r1, [r7, #8]
 800181e:	0a09      	lsrs	r1, r1, #8
 8001820:	434b      	muls	r3, r1
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	434b      	muls	r3, r1
 8001826:	431a      	orrs	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800182c:	46c0      	nop			@ (mov r8, r8)
 800182e:	46bd      	mov	sp, r7
 8001830:	b004      	add	sp, #16
 8001832:	bd80      	pop	{r7, pc}

08001834 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001842:	e047      	b.n	80018d4 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2101      	movs	r1, #1
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	4091      	lsls	r1, r2
 800184e:	000a      	movs	r2, r1
 8001850:	4013      	ands	r3, r2
 8001852:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d039      	beq.n	80018ce <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d003      	beq.n	800186a <LL_GPIO_Init+0x36>
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2b02      	cmp	r3, #2
 8001868:	d10d      	bne.n	8001886 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	689a      	ldr	r2, [r3, #8]
 800186e:	68b9      	ldr	r1, [r7, #8]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	0018      	movs	r0, r3
 8001874:	f7ff ff56 	bl	8001724 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	68da      	ldr	r2, [r3, #12]
 800187c:	68b9      	ldr	r1, [r7, #8]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	0018      	movs	r0, r3
 8001882:	f7ff ff3a 	bl	80016fa <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	691a      	ldr	r2, [r3, #16]
 800188a:	68b9      	ldr	r1, [r7, #8]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	0018      	movs	r0, r3
 8001890:	f7ff ff64 	bl	800175c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b02      	cmp	r3, #2
 800189a:	d111      	bne.n	80018c0 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	2bff      	cmp	r3, #255	@ 0xff
 80018a0:	d807      	bhi.n	80018b2 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	695a      	ldr	r2, [r3, #20]
 80018a6:	68b9      	ldr	r1, [r7, #8]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	0018      	movs	r0, r3
 80018ac:	f7ff ff72 	bl	8001794 <LL_GPIO_SetAFPin_0_7>
 80018b0:	e006      	b.n	80018c0 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	695a      	ldr	r2, [r3, #20]
 80018b6:	68b9      	ldr	r1, [r7, #8]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	0018      	movs	r0, r3
 80018bc:	f7ff ff8d 	bl	80017da <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	68b9      	ldr	r1, [r7, #8]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	0018      	movs	r0, r3
 80018ca:	f7ff fefa 	bl	80016c2 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	3301      	adds	r3, #1
 80018d2:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	40da      	lsrs	r2, r3
 80018dc:	1e13      	subs	r3, r2, #0
 80018de:	d1b1      	bne.n	8001844 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	0018      	movs	r0, r3
 80018e4:	46bd      	mov	sp, r7
 80018e6:	b004      	add	sp, #16
 80018e8:	bd80      	pop	{r7, pc}
	...

080018ec <LL_RCC_HSI_IsReady>:
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80018f0:	4b07      	ldr	r3, [pc, #28]	@ (8001910 <LL_RCC_HSI_IsReady+0x24>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	2380      	movs	r3, #128	@ 0x80
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	401a      	ands	r2, r3
 80018fa:	2380      	movs	r3, #128	@ 0x80
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	429a      	cmp	r2, r3
 8001900:	d101      	bne.n	8001906 <LL_RCC_HSI_IsReady+0x1a>
 8001902:	2301      	movs	r3, #1
 8001904:	e000      	b.n	8001908 <LL_RCC_HSI_IsReady+0x1c>
 8001906:	2300      	movs	r3, #0
}
 8001908:	0018      	movs	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	46c0      	nop			@ (mov r8, r8)
 8001910:	40021000 	.word	0x40021000

08001914 <LL_RCC_LSE_IsReady>:
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001918:	4b05      	ldr	r3, [pc, #20]	@ (8001930 <LL_RCC_LSE_IsReady+0x1c>)
 800191a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800191c:	2202      	movs	r2, #2
 800191e:	4013      	ands	r3, r2
 8001920:	2b02      	cmp	r3, #2
 8001922:	d101      	bne.n	8001928 <LL_RCC_LSE_IsReady+0x14>
 8001924:	2301      	movs	r3, #1
 8001926:	e000      	b.n	800192a <LL_RCC_LSE_IsReady+0x16>
 8001928:	2300      	movs	r3, #0
}
 800192a:	0018      	movs	r0, r3
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40021000 	.word	0x40021000

08001934 <LL_RCC_GetSysClkSource>:
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001938:	4b03      	ldr	r3, [pc, #12]	@ (8001948 <LL_RCC_GetSysClkSource+0x14>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	2238      	movs	r2, #56	@ 0x38
 800193e:	4013      	ands	r3, r2
}
 8001940:	0018      	movs	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	46c0      	nop			@ (mov r8, r8)
 8001948:	40021000 	.word	0x40021000

0800194c <LL_RCC_GetAHBPrescaler>:
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001950:	4b03      	ldr	r3, [pc, #12]	@ (8001960 <LL_RCC_GetAHBPrescaler+0x14>)
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	23f0      	movs	r3, #240	@ 0xf0
 8001956:	011b      	lsls	r3, r3, #4
 8001958:	4013      	ands	r3, r2
}
 800195a:	0018      	movs	r0, r3
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40021000 	.word	0x40021000

08001964 <LL_RCC_GetAPB1Prescaler>:
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001968:	4b03      	ldr	r3, [pc, #12]	@ (8001978 <LL_RCC_GetAPB1Prescaler+0x14>)
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	23e0      	movs	r3, #224	@ 0xe0
 800196e:	01db      	lsls	r3, r3, #7
 8001970:	4013      	ands	r3, r2
}
 8001972:	0018      	movs	r0, r3
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40021000 	.word	0x40021000

0800197c <LL_RCC_GetUSARTClockSource>:
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8001984:	4b05      	ldr	r3, [pc, #20]	@ (800199c <LL_RCC_GetUSARTClockSource+0x20>)
 8001986:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	401a      	ands	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	041b      	lsls	r3, r3, #16
 8001990:	4313      	orrs	r3, r2
}
 8001992:	0018      	movs	r0, r3
 8001994:	46bd      	mov	sp, r7
 8001996:	b002      	add	sp, #8
 8001998:	bd80      	pop	{r7, pc}
 800199a:	46c0      	nop			@ (mov r8, r8)
 800199c:	40021000 	.word	0x40021000

080019a0 <LL_RCC_PLL_GetN>:
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80019a4:	4b03      	ldr	r3, [pc, #12]	@ (80019b4 <LL_RCC_PLL_GetN+0x14>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	0a1b      	lsrs	r3, r3, #8
 80019aa:	227f      	movs	r2, #127	@ 0x7f
 80019ac:	4013      	ands	r3, r2
}
 80019ae:	0018      	movs	r0, r3
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40021000 	.word	0x40021000

080019b8 <LL_RCC_PLL_GetR>:
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80019bc:	4b03      	ldr	r3, [pc, #12]	@ (80019cc <LL_RCC_PLL_GetR+0x14>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	0f5b      	lsrs	r3, r3, #29
 80019c2:	075b      	lsls	r3, r3, #29
}
 80019c4:	0018      	movs	r0, r3
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	46c0      	nop			@ (mov r8, r8)
 80019cc:	40021000 	.word	0x40021000

080019d0 <LL_RCC_PLL_GetMainSource>:
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80019d4:	4b03      	ldr	r3, [pc, #12]	@ (80019e4 <LL_RCC_PLL_GetMainSource+0x14>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	2203      	movs	r2, #3
 80019da:	4013      	ands	r3, r2
}
 80019dc:	0018      	movs	r0, r3
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	46c0      	nop			@ (mov r8, r8)
 80019e4:	40021000 	.word	0x40021000

080019e8 <LL_RCC_PLL_GetDivider>:
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80019ec:	4b03      	ldr	r3, [pc, #12]	@ (80019fc <LL_RCC_PLL_GetDivider+0x14>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	2270      	movs	r2, #112	@ 0x70
 80019f2:	4013      	ands	r3, r2
}
 80019f4:	0018      	movs	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	46c0      	nop			@ (mov r8, r8)
 80019fc:	40021000 	.word	0x40021000

08001a00 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001a08:	f000 f8a8 	bl	8001b5c <RCC_GetSystemClockFreq>
 8001a0c:	0002      	movs	r2, r0
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	0018      	movs	r0, r3
 8001a18:	f000 f8ce 	bl	8001bb8 <RCC_GetHCLKClockFreq>
 8001a1c:	0002      	movs	r2, r0
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	0018      	movs	r0, r3
 8001a28:	f000 f8de 	bl	8001be8 <RCC_GetPCLK1ClockFreq>
 8001a2c:	0002      	movs	r2, r0
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	609a      	str	r2, [r3, #8]
}
 8001a32:	46c0      	nop			@ (mov r8, r8)
 8001a34:	46bd      	mov	sp, r7
 8001a36:	b002      	add	sp, #8
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001a44:	2300      	movs	r3, #0
 8001a46:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b03      	cmp	r3, #3
 8001a4c:	d134      	bne.n	8001ab8 <LL_RCC_GetUSARTClockFreq+0x7c>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	0018      	movs	r0, r3
 8001a52:	f7ff ff93 	bl	800197c <LL_RCC_GetUSARTClockSource>
 8001a56:	0003      	movs	r3, r0
 8001a58:	4a39      	ldr	r2, [pc, #228]	@ (8001b40 <LL_RCC_GetUSARTClockFreq+0x104>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d016      	beq.n	8001a8c <LL_RCC_GetUSARTClockFreq+0x50>
 8001a5e:	4a38      	ldr	r2, [pc, #224]	@ (8001b40 <LL_RCC_GetUSARTClockFreq+0x104>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d81c      	bhi.n	8001a9e <LL_RCC_GetUSARTClockFreq+0x62>
 8001a64:	4a37      	ldr	r2, [pc, #220]	@ (8001b44 <LL_RCC_GetUSARTClockFreq+0x108>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d003      	beq.n	8001a72 <LL_RCC_GetUSARTClockFreq+0x36>
 8001a6a:	4a37      	ldr	r2, [pc, #220]	@ (8001b48 <LL_RCC_GetUSARTClockFreq+0x10c>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d005      	beq.n	8001a7c <LL_RCC_GetUSARTClockFreq+0x40>
 8001a70:	e015      	b.n	8001a9e <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001a72:	f000 f873 	bl	8001b5c <RCC_GetSystemClockFreq>
 8001a76:	0003      	movs	r3, r0
 8001a78:	60fb      	str	r3, [r7, #12]
        break;
 8001a7a:	e05c      	b.n	8001b36 <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 8001a7c:	f7ff ff36 	bl	80018ec <LL_RCC_HSI_IsReady>
 8001a80:	0003      	movs	r3, r0
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d150      	bne.n	8001b28 <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = HSI_VALUE;
 8001a86:	4b31      	ldr	r3, [pc, #196]	@ (8001b4c <LL_RCC_GetUSARTClockFreq+0x110>)
 8001a88:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001a8a:	e04d      	b.n	8001b28 <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 8001a8c:	f7ff ff42 	bl	8001914 <LL_RCC_LSE_IsReady>
 8001a90:	0003      	movs	r3, r0
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d14a      	bne.n	8001b2c <LL_RCC_GetUSARTClockFreq+0xf0>
        {
          usart_frequency = LSE_VALUE;
 8001a96:	2380      	movs	r3, #128	@ 0x80
 8001a98:	021b      	lsls	r3, r3, #8
 8001a9a:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001a9c:	e046      	b.n	8001b2c <LL_RCC_GetUSARTClockFreq+0xf0>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001a9e:	f000 f85d 	bl	8001b5c <RCC_GetSystemClockFreq>
 8001aa2:	0003      	movs	r3, r0
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	f000 f887 	bl	8001bb8 <RCC_GetHCLKClockFreq>
 8001aaa:	0003      	movs	r3, r0
 8001aac:	0018      	movs	r0, r3
 8001aae:	f000 f89b 	bl	8001be8 <RCC_GetPCLK1ClockFreq>
 8001ab2:	0003      	movs	r3, r0
 8001ab4:	60fb      	str	r3, [r7, #12]
        break;
 8001ab6:	e03e      	b.n	8001b36 <LL_RCC_GetUSARTClockFreq+0xfa>
    }
  }
#if defined(RCC_CCIPR_USART2SEL)
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b0c      	cmp	r3, #12
 8001abc:	d13b      	bne.n	8001b36 <LL_RCC_GetUSARTClockFreq+0xfa>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	f7ff ff5b 	bl	800197c <LL_RCC_GetUSARTClockSource>
 8001ac6:	0003      	movs	r3, r0
 8001ac8:	4a21      	ldr	r2, [pc, #132]	@ (8001b50 <LL_RCC_GetUSARTClockFreq+0x114>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d016      	beq.n	8001afc <LL_RCC_GetUSARTClockFreq+0xc0>
 8001ace:	4a20      	ldr	r2, [pc, #128]	@ (8001b50 <LL_RCC_GetUSARTClockFreq+0x114>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d81c      	bhi.n	8001b0e <LL_RCC_GetUSARTClockFreq+0xd2>
 8001ad4:	4a1f      	ldr	r2, [pc, #124]	@ (8001b54 <LL_RCC_GetUSARTClockFreq+0x118>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d003      	beq.n	8001ae2 <LL_RCC_GetUSARTClockFreq+0xa6>
 8001ada:	4a1f      	ldr	r2, [pc, #124]	@ (8001b58 <LL_RCC_GetUSARTClockFreq+0x11c>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d005      	beq.n	8001aec <LL_RCC_GetUSARTClockFreq+0xb0>
 8001ae0:	e015      	b.n	8001b0e <LL_RCC_GetUSARTClockFreq+0xd2>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001ae2:	f000 f83b 	bl	8001b5c <RCC_GetSystemClockFreq>
 8001ae6:	0003      	movs	r3, r0
 8001ae8:	60fb      	str	r3, [r7, #12]
        break;
 8001aea:	e024      	b.n	8001b36 <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 8001aec:	f7ff fefe 	bl	80018ec <LL_RCC_HSI_IsReady>
 8001af0:	0003      	movs	r3, r0
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d11c      	bne.n	8001b30 <LL_RCC_GetUSARTClockFreq+0xf4>
        {
          usart_frequency = HSI_VALUE;
 8001af6:	4b15      	ldr	r3, [pc, #84]	@ (8001b4c <LL_RCC_GetUSARTClockFreq+0x110>)
 8001af8:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001afa:	e019      	b.n	8001b30 <LL_RCC_GetUSARTClockFreq+0xf4>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 8001afc:	f7ff ff0a 	bl	8001914 <LL_RCC_LSE_IsReady>
 8001b00:	0003      	movs	r3, r0
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d116      	bne.n	8001b34 <LL_RCC_GetUSARTClockFreq+0xf8>
        {
          usart_frequency = LSE_VALUE;
 8001b06:	2380      	movs	r3, #128	@ 0x80
 8001b08:	021b      	lsls	r3, r3, #8
 8001b0a:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001b0c:	e012      	b.n	8001b34 <LL_RCC_GetUSARTClockFreq+0xf8>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001b0e:	f000 f825 	bl	8001b5c <RCC_GetSystemClockFreq>
 8001b12:	0003      	movs	r3, r0
 8001b14:	0018      	movs	r0, r3
 8001b16:	f000 f84f 	bl	8001bb8 <RCC_GetHCLKClockFreq>
 8001b1a:	0003      	movs	r3, r0
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	f000 f863 	bl	8001be8 <RCC_GetPCLK1ClockFreq>
 8001b22:	0003      	movs	r3, r0
 8001b24:	60fb      	str	r3, [r7, #12]
        break;
 8001b26:	e006      	b.n	8001b36 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 8001b28:	46c0      	nop			@ (mov r8, r8)
 8001b2a:	e004      	b.n	8001b36 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 8001b2c:	46c0      	nop			@ (mov r8, r8)
 8001b2e:	e002      	b.n	8001b36 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 8001b30:	46c0      	nop			@ (mov r8, r8)
 8001b32:	e000      	b.n	8001b36 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 8001b34:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 8001b36:	68fb      	ldr	r3, [r7, #12]
}
 8001b38:	0018      	movs	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	b004      	add	sp, #16
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	00030003 	.word	0x00030003
 8001b44:	00030001 	.word	0x00030001
 8001b48:	00030002 	.word	0x00030002
 8001b4c:	00f42400 	.word	0x00f42400
 8001b50:	000c000c 	.word	0x000c000c
 8001b54:	000c0004 	.word	0x000c0004
 8001b58:	000c0008 	.word	0x000c0008

08001b5c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001b62:	f7ff fee7 	bl	8001934 <LL_RCC_GetSysClkSource>
 8001b66:	0003      	movs	r3, r0
 8001b68:	2b08      	cmp	r3, #8
 8001b6a:	d002      	beq.n	8001b72 <RCC_GetSystemClockFreq+0x16>
 8001b6c:	2b10      	cmp	r3, #16
 8001b6e:	d003      	beq.n	8001b78 <RCC_GetSystemClockFreq+0x1c>
 8001b70:	e007      	b.n	8001b82 <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001b72:	4b0e      	ldr	r3, [pc, #56]	@ (8001bac <RCC_GetSystemClockFreq+0x50>)
 8001b74:	607b      	str	r3, [r7, #4]
      break;
 8001b76:	e014      	b.n	8001ba2 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001b78:	f000 f84c 	bl	8001c14 <RCC_PLL_GetFreqDomain_SYS>
 8001b7c:	0003      	movs	r3, r0
 8001b7e:	607b      	str	r3, [r7, #4]
      break;
 8001b80:	e00f      	b.n	8001ba2 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001b82:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb0 <RCC_GetSystemClockFreq+0x54>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	0adb      	lsrs	r3, r3, #11
 8001b88:	2207      	movs	r2, #7
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	409a      	lsls	r2, r3
 8001b90:	0013      	movs	r3, r2
 8001b92:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 8001b94:	6839      	ldr	r1, [r7, #0]
 8001b96:	4807      	ldr	r0, [pc, #28]	@ (8001bb4 <RCC_GetSystemClockFreq+0x58>)
 8001b98:	f7fe fab4 	bl	8000104 <__udivsi3>
 8001b9c:	0003      	movs	r3, r0
 8001b9e:	607b      	str	r3, [r7, #4]
      break;
 8001ba0:	46c0      	nop			@ (mov r8, r8)
  }

  return frequency;
 8001ba2:	687b      	ldr	r3, [r7, #4]
}
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	b002      	add	sp, #8
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	007a1200 	.word	0x007a1200
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	00f42400 	.word	0x00f42400

08001bb8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001bc0:	f7ff fec4 	bl	800194c <LL_RCC_GetAHBPrescaler>
 8001bc4:	0003      	movs	r3, r0
 8001bc6:	0a1b      	lsrs	r3, r3, #8
 8001bc8:	220f      	movs	r2, #15
 8001bca:	401a      	ands	r2, r3
 8001bcc:	4b05      	ldr	r3, [pc, #20]	@ (8001be4 <RCC_GetHCLKClockFreq+0x2c>)
 8001bce:	0092      	lsls	r2, r2, #2
 8001bd0:	58d3      	ldr	r3, [r2, r3]
 8001bd2:	221f      	movs	r2, #31
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	40da      	lsrs	r2, r3
 8001bda:	0013      	movs	r3, r2
}
 8001bdc:	0018      	movs	r0, r3
 8001bde:	46bd      	mov	sp, r7
 8001be0:	b002      	add	sp, #8
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	08002020 	.word	0x08002020

08001be8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001bf0:	f7ff feb8 	bl	8001964 <LL_RCC_GetAPB1Prescaler>
 8001bf4:	0003      	movs	r3, r0
 8001bf6:	0b1a      	lsrs	r2, r3, #12
 8001bf8:	4b05      	ldr	r3, [pc, #20]	@ (8001c10 <RCC_GetPCLK1ClockFreq+0x28>)
 8001bfa:	0092      	lsls	r2, r2, #2
 8001bfc:	58d3      	ldr	r3, [r2, r3]
 8001bfe:	221f      	movs	r2, #31
 8001c00:	4013      	ands	r3, r2
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	40da      	lsrs	r2, r3
 8001c06:	0013      	movs	r3, r2
}
 8001c08:	0018      	movs	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	b002      	add	sp, #8
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	08002060 	.word	0x08002060

08001c14 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001c14:	b590      	push	{r4, r7, lr}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001c1a:	f7ff fed9 	bl	80019d0 <LL_RCC_PLL_GetMainSource>
 8001c1e:	0003      	movs	r3, r0
 8001c20:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d003      	beq.n	8001c30 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	2b03      	cmp	r3, #3
 8001c2c:	d003      	beq.n	8001c36 <RCC_PLL_GetFreqDomain_SYS+0x22>
 8001c2e:	e005      	b.n	8001c3c <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8001c30:	4b13      	ldr	r3, [pc, #76]	@ (8001c80 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8001c32:	607b      	str	r3, [r7, #4]
      break;
 8001c34:	e005      	b.n	8001c42 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001c36:	4b13      	ldr	r3, [pc, #76]	@ (8001c84 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 8001c38:	607b      	str	r3, [r7, #4]
      break;
 8001c3a:	e002      	b.n	8001c42 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 8001c3c:	4b10      	ldr	r3, [pc, #64]	@ (8001c80 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8001c3e:	607b      	str	r3, [r7, #4]
      break;
 8001c40:	46c0      	nop			@ (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001c42:	f7ff fead 	bl	80019a0 <LL_RCC_PLL_GetN>
 8001c46:	0002      	movs	r2, r0
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4353      	muls	r3, r2
 8001c4c:	001c      	movs	r4, r3
 8001c4e:	f7ff fecb 	bl	80019e8 <LL_RCC_PLL_GetDivider>
 8001c52:	0003      	movs	r3, r0
 8001c54:	091b      	lsrs	r3, r3, #4
 8001c56:	3301      	adds	r3, #1
 8001c58:	0019      	movs	r1, r3
 8001c5a:	0020      	movs	r0, r4
 8001c5c:	f7fe fa52 	bl	8000104 <__udivsi3>
 8001c60:	0003      	movs	r3, r0
 8001c62:	001c      	movs	r4, r3
 8001c64:	f7ff fea8 	bl	80019b8 <LL_RCC_PLL_GetR>
 8001c68:	0003      	movs	r3, r0
 8001c6a:	0f5b      	lsrs	r3, r3, #29
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	0019      	movs	r1, r3
 8001c70:	0020      	movs	r0, r4
 8001c72:	f7fe fa47 	bl	8000104 <__udivsi3>
 8001c76:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8001c78:	0018      	movs	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	b003      	add	sp, #12
 8001c7e:	bd90      	pop	{r4, r7, pc}
 8001c80:	00f42400 	.word	0x00f42400
 8001c84:	007a1200 	.word	0x007a1200

08001c88 <LL_USART_IsEnabled>:
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2201      	movs	r2, #1
 8001c96:	4013      	ands	r3, r2
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d101      	bne.n	8001ca0 <LL_USART_IsEnabled+0x18>
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e000      	b.n	8001ca2 <LL_USART_IsEnabled+0x1a>
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	b002      	add	sp, #8
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <LL_USART_SetPrescaler>:
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
 8001cb2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cb8:	220f      	movs	r2, #15
 8001cba:	4393      	bics	r3, r2
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	b292      	uxth	r2, r2
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001cc6:	46c0      	nop			@ (mov r8, r8)
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	b002      	add	sp, #8
 8001ccc:	bd80      	pop	{r7, pc}
	...

08001cd0 <LL_USART_SetStopBitsLength>:
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	4a05      	ldr	r2, [pc, #20]	@ (8001cf4 <LL_USART_SetStopBitsLength+0x24>)
 8001ce0:	401a      	ands	r2, r3
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	605a      	str	r2, [r3, #4]
}
 8001cea:	46c0      	nop			@ (mov r8, r8)
 8001cec:	46bd      	mov	sp, r7
 8001cee:	b002      	add	sp, #8
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	46c0      	nop			@ (mov r8, r8)
 8001cf4:	ffffcfff 	.word	0xffffcfff

08001cf8 <LL_USART_SetHWFlowCtrl>:
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	4a05      	ldr	r2, [pc, #20]	@ (8001d1c <LL_USART_SetHWFlowCtrl+0x24>)
 8001d08:	401a      	ands	r2, r3
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	609a      	str	r2, [r3, #8]
}
 8001d12:	46c0      	nop			@ (mov r8, r8)
 8001d14:	46bd      	mov	sp, r7
 8001d16:	b002      	add	sp, #8
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	46c0      	nop			@ (mov r8, r8)
 8001d1c:	fffffcff 	.word	0xfffffcff

08001d20 <LL_USART_SetBaudRate>:
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
 8001d2c:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b0b      	cmp	r3, #11
 8001d32:	d846      	bhi.n	8001dc2 <LL_USART_SetBaudRate+0xa2>
  else if (BaudRate == 0U)
 8001d34:	6a3b      	ldr	r3, [r7, #32]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d043      	beq.n	8001dc2 <LL_USART_SetBaudRate+0xa2>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	2380      	movs	r3, #128	@ 0x80
 8001d3e:	021b      	lsls	r3, r3, #8
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d126      	bne.n	8001d92 <LL_USART_SetBaudRate+0x72>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	001a      	movs	r2, r3
 8001d4a:	4b20      	ldr	r3, [pc, #128]	@ (8001dcc <LL_USART_SetBaudRate+0xac>)
 8001d4c:	0092      	lsls	r2, r2, #2
 8001d4e:	58d3      	ldr	r3, [r2, r3]
 8001d50:	0019      	movs	r1, r3
 8001d52:	68b8      	ldr	r0, [r7, #8]
 8001d54:	f7fe f9d6 	bl	8000104 <__udivsi3>
 8001d58:	0003      	movs	r3, r0
 8001d5a:	005a      	lsls	r2, r3, #1
 8001d5c:	6a3b      	ldr	r3, [r7, #32]
 8001d5e:	085b      	lsrs	r3, r3, #1
 8001d60:	18d3      	adds	r3, r2, r3
 8001d62:	6a39      	ldr	r1, [r7, #32]
 8001d64:	0018      	movs	r0, r3
 8001d66:	f7fe f9cd 	bl	8000104 <__udivsi3>
 8001d6a:	0003      	movs	r3, r0
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	4a17      	ldr	r2, [pc, #92]	@ (8001dd0 <LL_USART_SetBaudRate+0xb0>)
 8001d74:	4013      	ands	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	085b      	lsrs	r3, r3, #1
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	001a      	movs	r2, r3
 8001d80:	2307      	movs	r3, #7
 8001d82:	4013      	ands	r3, r2
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	60da      	str	r2, [r3, #12]
}
 8001d90:	e017      	b.n	8001dc2 <LL_USART_SetBaudRate+0xa2>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	001a      	movs	r2, r3
 8001d98:	4b0c      	ldr	r3, [pc, #48]	@ (8001dcc <LL_USART_SetBaudRate+0xac>)
 8001d9a:	0092      	lsls	r2, r2, #2
 8001d9c:	58d3      	ldr	r3, [r2, r3]
 8001d9e:	0019      	movs	r1, r3
 8001da0:	68b8      	ldr	r0, [r7, #8]
 8001da2:	f7fe f9af 	bl	8000104 <__udivsi3>
 8001da6:	0003      	movs	r3, r0
 8001da8:	001a      	movs	r2, r3
 8001daa:	6a3b      	ldr	r3, [r7, #32]
 8001dac:	085b      	lsrs	r3, r3, #1
 8001dae:	18d3      	adds	r3, r2, r3
 8001db0:	6a39      	ldr	r1, [r7, #32]
 8001db2:	0018      	movs	r0, r3
 8001db4:	f7fe f9a6 	bl	8000104 <__udivsi3>
 8001db8:	0003      	movs	r3, r0
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	001a      	movs	r2, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	60da      	str	r2, [r3, #12]
}
 8001dc2:	46c0      	nop			@ (mov r8, r8)
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	b006      	add	sp, #24
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	46c0      	nop			@ (mov r8, r8)
 8001dcc:	08002080 	.word	0x08002080
 8001dd0:	0000fff0 	.word	0x0000fff0

08001dd4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8001dd4:	b590      	push	{r4, r7, lr}
 8001dd6:	b08b      	sub	sp, #44	@ 0x2c
 8001dd8:	af02      	add	r7, sp, #8
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001dde:	231f      	movs	r3, #31
 8001de0:	18fb      	adds	r3, r7, r3
 8001de2:	2201      	movs	r2, #1
 8001de4:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	0018      	movs	r0, r3
 8001dee:	f7ff ff4b 	bl	8001c88 <LL_USART_IsEnabled>
 8001df2:	1e03      	subs	r3, r0, #0
 8001df4:	d16a      	bne.n	8001ecc <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a38      	ldr	r2, [pc, #224]	@ (8001edc <LL_USART_Init+0x108>)
 8001dfc:	401a      	ands	r2, r3
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	6899      	ldr	r1, [r3, #8]
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	4319      	orrs	r1, r3
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	695b      	ldr	r3, [r3, #20]
 8001e0c:	4319      	orrs	r1, r3
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	430b      	orrs	r3, r1
 8001e14:	431a      	orrs	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	68da      	ldr	r2, [r3, #12]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	0011      	movs	r1, r2
 8001e22:	0018      	movs	r0, r3
 8001e24:	f7ff ff54 	bl	8001cd0 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	699a      	ldr	r2, [r3, #24]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	0011      	movs	r1, r2
 8001e30:	0018      	movs	r0, r3
 8001e32:	f7ff ff61 	bl	8001cf8 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a29      	ldr	r2, [pc, #164]	@ (8001ee0 <LL_USART_Init+0x10c>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d105      	bne.n	8001e4a <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8001e3e:	2003      	movs	r0, #3
 8001e40:	f7ff fdfc 	bl	8001a3c <LL_RCC_GetUSARTClockFreq>
 8001e44:	0003      	movs	r3, r0
 8001e46:	61bb      	str	r3, [r7, #24]
 8001e48:	e022      	b.n	8001e90 <LL_USART_Init+0xbc>
    }
    else if (USARTx == USART2)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a25      	ldr	r2, [pc, #148]	@ (8001ee4 <LL_USART_Init+0x110>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d105      	bne.n	8001e5e <LL_USART_Init+0x8a>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8001e52:	200c      	movs	r0, #12
 8001e54:	f7ff fdf2 	bl	8001a3c <LL_RCC_GetUSARTClockFreq>
 8001e58:	0003      	movs	r3, r0
 8001e5a:	61bb      	str	r3, [r7, #24]
 8001e5c:	e018      	b.n	8001e90 <LL_USART_Init+0xbc>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* USART2 Clock selector flag */
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a21      	ldr	r2, [pc, #132]	@ (8001ee8 <LL_USART_Init+0x114>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d108      	bne.n	8001e78 <LL_USART_Init+0xa4>
    {
#if defined(RCC_CCIPR_USART3SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8001e66:	240c      	movs	r4, #12
 8001e68:	193b      	adds	r3, r7, r4
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	f7ff fdc8 	bl	8001a00 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8001e70:	193b      	adds	r3, r7, r4
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	61bb      	str	r3, [r7, #24]
 8001e76:	e00b      	b.n	8001e90 <LL_USART_Init+0xbc>
#endif /* USART3 Clock selector flag */
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a1c      	ldr	r2, [pc, #112]	@ (8001eec <LL_USART_Init+0x118>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d107      	bne.n	8001e90 <LL_USART_Init+0xbc>
    {
#if defined(RCC_CCIPR_USART4SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART4_CLKSOURCE);
#else
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8001e80:	240c      	movs	r4, #12
 8001e82:	193b      	adds	r3, r7, r4
 8001e84:	0018      	movs	r0, r3
 8001e86:	f7ff fdbb 	bl	8001a00 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8001e8a:	193b      	adds	r3, r7, r4
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d013      	beq.n	8001ebe <LL_USART_Init+0xea>
        && (USART_InitStruct->BaudRate != 0U))
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00f      	beq.n	8001ebe <LL_USART_Init+0xea>
    {
      status = SUCCESS;
 8001e9e:	231f      	movs	r3, #31
 8001ea0:	18fb      	adds	r3, r7, r3
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->PrescalerValue,
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
                           USART_InitStruct->OverSampling,
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	69dc      	ldr	r4, [r3, #28]
                           USART_InitStruct->BaudRate);
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
      LL_USART_SetBaudRate(USARTx,
 8001eb2:	69b9      	ldr	r1, [r7, #24]
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	0023      	movs	r3, r4
 8001eba:	f7ff ff31 	bl	8001d20 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	0011      	movs	r1, r2
 8001ec6:	0018      	movs	r0, r3
 8001ec8:	f7ff feef 	bl	8001caa <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001ecc:	231f      	movs	r3, #31
 8001ece:	18fb      	adds	r3, r7, r3
 8001ed0:	781b      	ldrb	r3, [r3, #0]
}
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	b009      	add	sp, #36	@ 0x24
 8001ed8:	bd90      	pop	{r4, r7, pc}
 8001eda:	46c0      	nop			@ (mov r8, r8)
 8001edc:	efff69f3 	.word	0xefff69f3
 8001ee0:	40013800 	.word	0x40013800
 8001ee4:	40004400 	.word	0x40004400
 8001ee8:	40004800 	.word	0x40004800
 8001eec:	40004c00 	.word	0x40004c00

08001ef0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001efa:	6839      	ldr	r1, [r7, #0]
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f7fe f901 	bl	8000104 <__udivsi3>
 8001f02:	0003      	movs	r3, r0
 8001f04:	001a      	movs	r2, r3
 8001f06:	4b06      	ldr	r3, [pc, #24]	@ (8001f20 <LL_InitTick+0x30>)
 8001f08:	3a01      	subs	r2, #1
 8001f0a:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001f0c:	4b04      	ldr	r3, [pc, #16]	@ (8001f20 <LL_InitTick+0x30>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f12:	4b03      	ldr	r3, [pc, #12]	@ (8001f20 <LL_InitTick+0x30>)
 8001f14:	2205      	movs	r2, #5
 8001f16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001f18:	46c0      	nop			@ (mov r8, r8)
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	b002      	add	sp, #8
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	e000e010 	.word	0xe000e010

08001f24 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001f2c:	23fa      	movs	r3, #250	@ 0xfa
 8001f2e:	009a      	lsls	r2, r3, #2
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	0011      	movs	r1, r2
 8001f34:	0018      	movs	r0, r3
 8001f36:	f7ff ffdb 	bl	8001ef0 <LL_InitTick>
}
 8001f3a:	46c0      	nop			@ (mov r8, r8)
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	b002      	add	sp, #8
 8001f40:	bd80      	pop	{r7, pc}
	...

08001f44 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f88 <LL_mDelay+0x44>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	60bb      	str	r3, [r7, #8]
   uint32_t tmpDelay; /* MISRAC2012-Rule-17.8 */
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001f52:	68bb      	ldr	r3, [r7, #8]
  tmpDelay  = Delay;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	60fb      	str	r3, [r7, #12]
  /* Add a period to guaranty minimum wait */
  if (tmpDelay  < LL_MAX_DELAY)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	d00c      	beq.n	8001f78 <LL_mDelay+0x34>
  {
    tmpDelay ++;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	3301      	adds	r3, #1
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	e008      	b.n	8001f78 <LL_mDelay+0x34>
  }

  while (tmpDelay  != 0U)
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001f66:	4b08      	ldr	r3, [pc, #32]	@ (8001f88 <LL_mDelay+0x44>)
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	2380      	movs	r3, #128	@ 0x80
 8001f6c:	025b      	lsls	r3, r3, #9
 8001f6e:	4013      	ands	r3, r2
 8001f70:	d002      	beq.n	8001f78 <LL_mDelay+0x34>
    {
      tmpDelay --;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	3b01      	subs	r3, #1
 8001f76:	60fb      	str	r3, [r7, #12]
  while (tmpDelay  != 0U)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f3      	bne.n	8001f66 <LL_mDelay+0x22>
    }
  }
}
 8001f7e:	46c0      	nop			@ (mov r8, r8)
 8001f80:	46c0      	nop			@ (mov r8, r8)
 8001f82:	46bd      	mov	sp, r7
 8001f84:	b004      	add	sp, #16
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	e000e010 	.word	0xe000e010

08001f8c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001f94:	4b03      	ldr	r3, [pc, #12]	@ (8001fa4 <LL_SetSystemCoreClock+0x18>)
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	601a      	str	r2, [r3, #0]
}
 8001f9a:	46c0      	nop			@ (mov r8, r8)
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	b002      	add	sp, #8
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	46c0      	nop			@ (mov r8, r8)
 8001fa4:	20000004 	.word	0x20000004

08001fa8 <memset>:
 8001fa8:	0003      	movs	r3, r0
 8001faa:	1882      	adds	r2, r0, r2
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d100      	bne.n	8001fb2 <memset+0xa>
 8001fb0:	4770      	bx	lr
 8001fb2:	7019      	strb	r1, [r3, #0]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	e7f9      	b.n	8001fac <memset+0x4>

08001fb8 <__libc_init_array>:
 8001fb8:	b570      	push	{r4, r5, r6, lr}
 8001fba:	2600      	movs	r6, #0
 8001fbc:	4c0c      	ldr	r4, [pc, #48]	@ (8001ff0 <__libc_init_array+0x38>)
 8001fbe:	4d0d      	ldr	r5, [pc, #52]	@ (8001ff4 <__libc_init_array+0x3c>)
 8001fc0:	1b64      	subs	r4, r4, r5
 8001fc2:	10a4      	asrs	r4, r4, #2
 8001fc4:	42a6      	cmp	r6, r4
 8001fc6:	d109      	bne.n	8001fdc <__libc_init_array+0x24>
 8001fc8:	2600      	movs	r6, #0
 8001fca:	f000 f819 	bl	8002000 <_init>
 8001fce:	4c0a      	ldr	r4, [pc, #40]	@ (8001ff8 <__libc_init_array+0x40>)
 8001fd0:	4d0a      	ldr	r5, [pc, #40]	@ (8001ffc <__libc_init_array+0x44>)
 8001fd2:	1b64      	subs	r4, r4, r5
 8001fd4:	10a4      	asrs	r4, r4, #2
 8001fd6:	42a6      	cmp	r6, r4
 8001fd8:	d105      	bne.n	8001fe6 <__libc_init_array+0x2e>
 8001fda:	bd70      	pop	{r4, r5, r6, pc}
 8001fdc:	00b3      	lsls	r3, r6, #2
 8001fde:	58eb      	ldr	r3, [r5, r3]
 8001fe0:	4798      	blx	r3
 8001fe2:	3601      	adds	r6, #1
 8001fe4:	e7ee      	b.n	8001fc4 <__libc_init_array+0xc>
 8001fe6:	00b3      	lsls	r3, r6, #2
 8001fe8:	58eb      	ldr	r3, [r5, r3]
 8001fea:	4798      	blx	r3
 8001fec:	3601      	adds	r6, #1
 8001fee:	e7f2      	b.n	8001fd6 <__libc_init_array+0x1e>
 8001ff0:	080020b0 	.word	0x080020b0
 8001ff4:	080020b0 	.word	0x080020b0
 8001ff8:	080020b4 	.word	0x080020b4
 8001ffc:	080020b0 	.word	0x080020b0

08002000 <_init>:
 8002000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002002:	46c0      	nop			@ (mov r8, r8)
 8002004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002006:	bc08      	pop	{r3}
 8002008:	469e      	mov	lr, r3
 800200a:	4770      	bx	lr

0800200c <_fini>:
 800200c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800200e:	46c0      	nop			@ (mov r8, r8)
 8002010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002012:	bc08      	pop	{r3}
 8002014:	469e      	mov	lr, r3
 8002016:	4770      	bx	lr
