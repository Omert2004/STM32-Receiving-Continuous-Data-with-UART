
WeightTransmission_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c8c  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08001d48  08001d48  00002d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001de0  08001de0  00003008  2**0
                  CONTENTS
  4 .ARM          00000000  08001de0  08001de0  00003008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001de0  08001de0  00003008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001de0  08001de0  00002de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001de4  08001de4  00002de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000008  20000000  08001de8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000008  08001df0  00003008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  08001df0  00003158  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00003008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004050  00000000  00000000  00003030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ec4  00000000  00000000  00007080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000688  00000000  00000000  00007f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004d0  00000000  00000000  000085d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000114dd  00000000  00000000  00008aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004509  00000000  00000000  00019f7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00060e06  00000000  00000000  0001e486  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0007f28c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016cc  00000000  00000000  0007f2d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  0008099c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000008 	.word	0x20000008
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08001d30 	.word	0x08001d30

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000000c 	.word	0x2000000c
 8000100:	08001d30 	.word	0x08001d30

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b7f      	cmp	r3, #127	@ 0x7f
 800022e:	d809      	bhi.n	8000244 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000230:	1dfb      	adds	r3, r7, #7
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	001a      	movs	r2, r3
 8000236:	231f      	movs	r3, #31
 8000238:	401a      	ands	r2, r3
 800023a:	4b04      	ldr	r3, [pc, #16]	@ (800024c <__NVIC_EnableIRQ+0x30>)
 800023c:	2101      	movs	r1, #1
 800023e:	4091      	lsls	r1, r2
 8000240:	000a      	movs	r2, r1
 8000242:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000244:	46c0      	nop			@ (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e100 	.word	0xe000e100

08000250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	0002      	movs	r2, r0
 8000258:	6039      	str	r1, [r7, #0]
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b7f      	cmp	r3, #127	@ 0x7f
 8000264:	d828      	bhi.n	80002b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000266:	4a2f      	ldr	r2, [pc, #188]	@ (8000324 <__NVIC_SetPriority+0xd4>)
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	b25b      	sxtb	r3, r3
 800026e:	089b      	lsrs	r3, r3, #2
 8000270:	33c0      	adds	r3, #192	@ 0xc0
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	589b      	ldr	r3, [r3, r2]
 8000276:	1dfa      	adds	r2, r7, #7
 8000278:	7812      	ldrb	r2, [r2, #0]
 800027a:	0011      	movs	r1, r2
 800027c:	2203      	movs	r2, #3
 800027e:	400a      	ands	r2, r1
 8000280:	00d2      	lsls	r2, r2, #3
 8000282:	21ff      	movs	r1, #255	@ 0xff
 8000284:	4091      	lsls	r1, r2
 8000286:	000a      	movs	r2, r1
 8000288:	43d2      	mvns	r2, r2
 800028a:	401a      	ands	r2, r3
 800028c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	019b      	lsls	r3, r3, #6
 8000292:	22ff      	movs	r2, #255	@ 0xff
 8000294:	401a      	ands	r2, r3
 8000296:	1dfb      	adds	r3, r7, #7
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	0018      	movs	r0, r3
 800029c:	2303      	movs	r3, #3
 800029e:	4003      	ands	r3, r0
 80002a0:	00db      	lsls	r3, r3, #3
 80002a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a4:	481f      	ldr	r0, [pc, #124]	@ (8000324 <__NVIC_SetPriority+0xd4>)
 80002a6:	1dfb      	adds	r3, r7, #7
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	b25b      	sxtb	r3, r3
 80002ac:	089b      	lsrs	r3, r3, #2
 80002ae:	430a      	orrs	r2, r1
 80002b0:	33c0      	adds	r3, #192	@ 0xc0
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002b6:	e031      	b.n	800031c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b8:	4a1b      	ldr	r2, [pc, #108]	@ (8000328 <__NVIC_SetPriority+0xd8>)
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	0019      	movs	r1, r3
 80002c0:	230f      	movs	r3, #15
 80002c2:	400b      	ands	r3, r1
 80002c4:	3b08      	subs	r3, #8
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	3306      	adds	r3, #6
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	18d3      	adds	r3, r2, r3
 80002ce:	3304      	adds	r3, #4
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1dfa      	adds	r2, r7, #7
 80002d4:	7812      	ldrb	r2, [r2, #0]
 80002d6:	0011      	movs	r1, r2
 80002d8:	2203      	movs	r2, #3
 80002da:	400a      	ands	r2, r1
 80002dc:	00d2      	lsls	r2, r2, #3
 80002de:	21ff      	movs	r1, #255	@ 0xff
 80002e0:	4091      	lsls	r1, r2
 80002e2:	000a      	movs	r2, r1
 80002e4:	43d2      	mvns	r2, r2
 80002e6:	401a      	ands	r2, r3
 80002e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	019b      	lsls	r3, r3, #6
 80002ee:	22ff      	movs	r2, #255	@ 0xff
 80002f0:	401a      	ands	r2, r3
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	0018      	movs	r0, r3
 80002f8:	2303      	movs	r3, #3
 80002fa:	4003      	ands	r3, r0
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	4809      	ldr	r0, [pc, #36]	@ (8000328 <__NVIC_SetPriority+0xd8>)
 8000302:	1dfb      	adds	r3, r7, #7
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	001c      	movs	r4, r3
 8000308:	230f      	movs	r3, #15
 800030a:	4023      	ands	r3, r4
 800030c:	3b08      	subs	r3, #8
 800030e:	089b      	lsrs	r3, r3, #2
 8000310:	430a      	orrs	r2, r1
 8000312:	3306      	adds	r3, #6
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	18c3      	adds	r3, r0, r3
 8000318:	3304      	adds	r3, #4
 800031a:	601a      	str	r2, [r3, #0]
}
 800031c:	46c0      	nop			@ (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b003      	add	sp, #12
 8000322:	bd90      	pop	{r4, r7, pc}
 8000324:	e000e100 	.word	0xe000e100
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(const DMA_TypeDef *DMAx, uint32_t Channel)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b084      	sub	sp, #16
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
 8000334:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 800033a:	4a0b      	ldr	r2, [pc, #44]	@ (8000368 <LL_DMA_EnableChannel+0x3c>)
 800033c:	683b      	ldr	r3, [r7, #0]
 800033e:	18d3      	adds	r3, r2, r3
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	001a      	movs	r2, r3
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	18d3      	adds	r3, r2, r3
 8000348:	681a      	ldr	r2, [r3, #0]
 800034a:	4907      	ldr	r1, [pc, #28]	@ (8000368 <LL_DMA_EnableChannel+0x3c>)
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	18cb      	adds	r3, r1, r3
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	0019      	movs	r1, r3
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	18cb      	adds	r3, r1, r3
 8000358:	2101      	movs	r1, #1
 800035a:	430a      	orrs	r2, r1
 800035c:	601a      	str	r2, [r3, #0]
}
 800035e:	46c0      	nop			@ (mov r8, r8)
 8000360:	46bd      	mov	sp, r7
 8000362:	b004      	add	sp, #16
 8000364:	bd80      	pop	{r7, pc}
 8000366:	46c0      	nop			@ (mov r8, r8)
 8000368:	08001d48 	.word	0x08001d48

0800036c <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(const DMA_TypeDef *DMAx, uint32_t Channel)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b084      	sub	sp, #16
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 800037a:	4a0b      	ldr	r2, [pc, #44]	@ (80003a8 <LL_DMA_DisableChannel+0x3c>)
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	18d3      	adds	r3, r2, r3
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	001a      	movs	r2, r3
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	18d3      	adds	r3, r2, r3
 8000388:	681a      	ldr	r2, [r3, #0]
 800038a:	4907      	ldr	r1, [pc, #28]	@ (80003a8 <LL_DMA_DisableChannel+0x3c>)
 800038c:	683b      	ldr	r3, [r7, #0]
 800038e:	18cb      	adds	r3, r1, r3
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	0019      	movs	r1, r3
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	18cb      	adds	r3, r1, r3
 8000398:	2101      	movs	r1, #1
 800039a:	438a      	bics	r2, r1
 800039c:	601a      	str	r2, [r3, #0]
}
 800039e:	46c0      	nop			@ (mov r8, r8)
 80003a0:	46bd      	mov	sp, r7
 80003a2:	b004      	add	sp, #16
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	46c0      	nop			@ (mov r8, r8)
 80003a8:	08001d48 	.word	0x08001d48

080003ac <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b086      	sub	sp, #24
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	60f8      	str	r0, [r7, #12]
 80003b4:	60b9      	str	r1, [r7, #8]
 80003b6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 80003bc:	4a0c      	ldr	r2, [pc, #48]	@ (80003f0 <LL_DMA_SetDataTransferDirection+0x44>)
 80003be:	68bb      	ldr	r3, [r7, #8]
 80003c0:	18d3      	adds	r3, r2, r3
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	001a      	movs	r2, r3
 80003c6:	697b      	ldr	r3, [r7, #20]
 80003c8:	18d3      	adds	r3, r2, r3
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a09      	ldr	r2, [pc, #36]	@ (80003f4 <LL_DMA_SetDataTransferDirection+0x48>)
 80003ce:	4013      	ands	r3, r2
 80003d0:	0019      	movs	r1, r3
 80003d2:	4a07      	ldr	r2, [pc, #28]	@ (80003f0 <LL_DMA_SetDataTransferDirection+0x44>)
 80003d4:	68bb      	ldr	r3, [r7, #8]
 80003d6:	18d3      	adds	r3, r2, r3
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	001a      	movs	r2, r3
 80003dc:	697b      	ldr	r3, [r7, #20]
 80003de:	18d3      	adds	r3, r2, r3
 80003e0:	687a      	ldr	r2, [r7, #4]
 80003e2:	430a      	orrs	r2, r1
 80003e4:	601a      	str	r2, [r3, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 80003e6:	46c0      	nop			@ (mov r8, r8)
 80003e8:	46bd      	mov	sp, r7
 80003ea:	b006      	add	sp, #24
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	46c0      	nop			@ (mov r8, r8)
 80003f0:	08001d48 	.word	0x08001d48
 80003f4:	ffffbfef 	.word	0xffffbfef

080003f8 <LL_DMA_GetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataTransferDirection(const DMA_TypeDef *DMAx, uint32_t Channel)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b084      	sub	sp, #16
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
 8000400:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	60fb      	str	r3, [r7, #12]
  return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8000406:	4a07      	ldr	r2, [pc, #28]	@ (8000424 <LL_DMA_GetDataTransferDirection+0x2c>)
 8000408:	683b      	ldr	r3, [r7, #0]
 800040a:	18d3      	adds	r3, r2, r3
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	001a      	movs	r2, r3
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	18d3      	adds	r3, r2, r3
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	4a04      	ldr	r2, [pc, #16]	@ (8000428 <LL_DMA_GetDataTransferDirection+0x30>)
 8000418:	4013      	ands	r3, r2
                   DMA_CCR_DIR | DMA_CCR_MEM2MEM));
}
 800041a:	0018      	movs	r0, r3
 800041c:	46bd      	mov	sp, r7
 800041e:	b004      	add	sp, #16
 8000420:	bd80      	pop	{r7, pc}
 8000422:	46c0      	nop			@ (mov r8, r8)
 8000424:	08001d48 	.word	0x08001d48
 8000428:	00004010 	.word	0x00004010

0800042c <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b086      	sub	sp, #24
 8000430:	af00      	add	r7, sp, #0
 8000432:	60f8      	str	r0, [r7, #12]
 8000434:	60b9      	str	r1, [r7, #8]
 8000436:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 800043c:	4a0c      	ldr	r2, [pc, #48]	@ (8000470 <LL_DMA_SetMode+0x44>)
 800043e:	68bb      	ldr	r3, [r7, #8]
 8000440:	18d3      	adds	r3, r2, r3
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	001a      	movs	r2, r3
 8000446:	697b      	ldr	r3, [r7, #20]
 8000448:	18d3      	adds	r3, r2, r3
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	2220      	movs	r2, #32
 800044e:	4393      	bics	r3, r2
 8000450:	0019      	movs	r1, r3
 8000452:	4a07      	ldr	r2, [pc, #28]	@ (8000470 <LL_DMA_SetMode+0x44>)
 8000454:	68bb      	ldr	r3, [r7, #8]
 8000456:	18d3      	adds	r3, r2, r3
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	001a      	movs	r2, r3
 800045c:	697b      	ldr	r3, [r7, #20]
 800045e:	18d3      	adds	r3, r2, r3
 8000460:	687a      	ldr	r2, [r7, #4]
 8000462:	430a      	orrs	r2, r1
 8000464:	601a      	str	r2, [r3, #0]
             Mode);
}
 8000466:	46c0      	nop			@ (mov r8, r8)
 8000468:	46bd      	mov	sp, r7
 800046a:	b006      	add	sp, #24
 800046c:	bd80      	pop	{r7, pc}
 800046e:	46c0      	nop			@ (mov r8, r8)
 8000470:	08001d48 	.word	0x08001d48

08000474 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b086      	sub	sp, #24
 8000478:	af00      	add	r7, sp, #0
 800047a:	60f8      	str	r0, [r7, #12]
 800047c:	60b9      	str	r1, [r7, #8]
 800047e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8000484:	4a0c      	ldr	r2, [pc, #48]	@ (80004b8 <LL_DMA_SetPeriphIncMode+0x44>)
 8000486:	68bb      	ldr	r3, [r7, #8]
 8000488:	18d3      	adds	r3, r2, r3
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	001a      	movs	r2, r3
 800048e:	697b      	ldr	r3, [r7, #20]
 8000490:	18d3      	adds	r3, r2, r3
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	2240      	movs	r2, #64	@ 0x40
 8000496:	4393      	bics	r3, r2
 8000498:	0019      	movs	r1, r3
 800049a:	4a07      	ldr	r2, [pc, #28]	@ (80004b8 <LL_DMA_SetPeriphIncMode+0x44>)
 800049c:	68bb      	ldr	r3, [r7, #8]
 800049e:	18d3      	adds	r3, r2, r3
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	001a      	movs	r2, r3
 80004a4:	697b      	ldr	r3, [r7, #20]
 80004a6:	18d3      	adds	r3, r2, r3
 80004a8:	687a      	ldr	r2, [r7, #4]
 80004aa:	430a      	orrs	r2, r1
 80004ac:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcIncMode);
}
 80004ae:	46c0      	nop			@ (mov r8, r8)
 80004b0:	46bd      	mov	sp, r7
 80004b2:	b006      	add	sp, #24
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	46c0      	nop			@ (mov r8, r8)
 80004b8:	08001d48 	.word	0x08001d48

080004bc <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b086      	sub	sp, #24
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	60f8      	str	r0, [r7, #12]
 80004c4:	60b9      	str	r1, [r7, #8]
 80004c6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 80004cc:	4a0c      	ldr	r2, [pc, #48]	@ (8000500 <LL_DMA_SetMemoryIncMode+0x44>)
 80004ce:	68bb      	ldr	r3, [r7, #8]
 80004d0:	18d3      	adds	r3, r2, r3
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	001a      	movs	r2, r3
 80004d6:	697b      	ldr	r3, [r7, #20]
 80004d8:	18d3      	adds	r3, r2, r3
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	2280      	movs	r2, #128	@ 0x80
 80004de:	4393      	bics	r3, r2
 80004e0:	0019      	movs	r1, r3
 80004e2:	4a07      	ldr	r2, [pc, #28]	@ (8000500 <LL_DMA_SetMemoryIncMode+0x44>)
 80004e4:	68bb      	ldr	r3, [r7, #8]
 80004e6:	18d3      	adds	r3, r2, r3
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	001a      	movs	r2, r3
 80004ec:	697b      	ldr	r3, [r7, #20]
 80004ee:	18d3      	adds	r3, r2, r3
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	430a      	orrs	r2, r1
 80004f4:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstIncMode);
}
 80004f6:	46c0      	nop			@ (mov r8, r8)
 80004f8:	46bd      	mov	sp, r7
 80004fa:	b006      	add	sp, #24
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	46c0      	nop			@ (mov r8, r8)
 8000500:	08001d48 	.word	0x08001d48

08000504 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	60b9      	str	r1, [r7, #8]
 800050e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 8000514:	4a0c      	ldr	r2, [pc, #48]	@ (8000548 <LL_DMA_SetPeriphSize+0x44>)
 8000516:	68bb      	ldr	r3, [r7, #8]
 8000518:	18d3      	adds	r3, r2, r3
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	001a      	movs	r2, r3
 800051e:	697b      	ldr	r3, [r7, #20]
 8000520:	18d3      	adds	r3, r2, r3
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a09      	ldr	r2, [pc, #36]	@ (800054c <LL_DMA_SetPeriphSize+0x48>)
 8000526:	4013      	ands	r3, r2
 8000528:	0019      	movs	r1, r3
 800052a:	4a07      	ldr	r2, [pc, #28]	@ (8000548 <LL_DMA_SetPeriphSize+0x44>)
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	18d3      	adds	r3, r2, r3
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	001a      	movs	r2, r3
 8000534:	697b      	ldr	r3, [r7, #20]
 8000536:	18d3      	adds	r3, r2, r3
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	430a      	orrs	r2, r1
 800053c:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcDataSize);
}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	46bd      	mov	sp, r7
 8000542:	b006      	add	sp, #24
 8000544:	bd80      	pop	{r7, pc}
 8000546:	46c0      	nop			@ (mov r8, r8)
 8000548:	08001d48 	.word	0x08001d48
 800054c:	fffffcff 	.word	0xfffffcff

08000550 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af00      	add	r7, sp, #0
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8000560:	4a0c      	ldr	r2, [pc, #48]	@ (8000594 <LL_DMA_SetMemorySize+0x44>)
 8000562:	68bb      	ldr	r3, [r7, #8]
 8000564:	18d3      	adds	r3, r2, r3
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	001a      	movs	r2, r3
 800056a:	697b      	ldr	r3, [r7, #20]
 800056c:	18d3      	adds	r3, r2, r3
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a09      	ldr	r2, [pc, #36]	@ (8000598 <LL_DMA_SetMemorySize+0x48>)
 8000572:	4013      	ands	r3, r2
 8000574:	0019      	movs	r1, r3
 8000576:	4a07      	ldr	r2, [pc, #28]	@ (8000594 <LL_DMA_SetMemorySize+0x44>)
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	18d3      	adds	r3, r2, r3
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	001a      	movs	r2, r3
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	18d3      	adds	r3, r2, r3
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	430a      	orrs	r2, r1
 8000588:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstDataSize);
}
 800058a:	46c0      	nop			@ (mov r8, r8)
 800058c:	46bd      	mov	sp, r7
 800058e:	b006      	add	sp, #24
 8000590:	bd80      	pop	{r7, pc}
 8000592:	46c0      	nop			@ (mov r8, r8)
 8000594:	08001d48 	.word	0x08001d48
 8000598:	fffff3ff 	.word	0xfffff3ff

0800059c <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b086      	sub	sp, #24
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 80005ac:	4a0c      	ldr	r2, [pc, #48]	@ (80005e0 <LL_DMA_SetChannelPriorityLevel+0x44>)
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	18d3      	adds	r3, r2, r3
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	001a      	movs	r2, r3
 80005b6:	697b      	ldr	r3, [r7, #20]
 80005b8:	18d3      	adds	r3, r2, r3
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a09      	ldr	r2, [pc, #36]	@ (80005e4 <LL_DMA_SetChannelPriorityLevel+0x48>)
 80005be:	4013      	ands	r3, r2
 80005c0:	0019      	movs	r1, r3
 80005c2:	4a07      	ldr	r2, [pc, #28]	@ (80005e0 <LL_DMA_SetChannelPriorityLevel+0x44>)
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	18d3      	adds	r3, r2, r3
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	001a      	movs	r2, r3
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	18d3      	adds	r3, r2, r3
 80005d0:	687a      	ldr	r2, [r7, #4]
 80005d2:	430a      	orrs	r2, r1
 80005d4:	601a      	str	r2, [r3, #0]
             Priority);
}
 80005d6:	46c0      	nop			@ (mov r8, r8)
 80005d8:	46bd      	mov	sp, r7
 80005da:	b006      	add	sp, #24
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)
 80005e0:	08001d48 	.word	0x08001d48
 80005e4:	ffffcfff 	.word	0xffffcfff

080005e8 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b086      	sub	sp, #24
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	60f8      	str	r0, [r7, #12]
 80005f0:	60b9      	str	r1, [r7, #8]
 80005f2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 80005f8:	4a0b      	ldr	r2, [pc, #44]	@ (8000628 <LL_DMA_SetDataLength+0x40>)
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	18d3      	adds	r3, r2, r3
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	001a      	movs	r2, r3
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	18d3      	adds	r3, r2, r3
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	0c1b      	lsrs	r3, r3, #16
 800060a:	0419      	lsls	r1, r3, #16
 800060c:	4a06      	ldr	r2, [pc, #24]	@ (8000628 <LL_DMA_SetDataLength+0x40>)
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	18d3      	adds	r3, r2, r3
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	001a      	movs	r2, r3
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	18d3      	adds	r3, r2, r3
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	430a      	orrs	r2, r1
 800061e:	605a      	str	r2, [r3, #4]
             DMA_CNDTR_NDT, NbData);
}
 8000620:	46c0      	nop			@ (mov r8, r8)
 8000622:	46bd      	mov	sp, r7
 8000624:	b006      	add	sp, #24
 8000626:	bd80      	pop	{r7, pc}
 8000628:	08001d48 	.word	0x08001d48

0800062c <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	607a      	str	r2, [r7, #4]
 8000638:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	617b      	str	r3, [r7, #20]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 800063e:	6a3b      	ldr	r3, [r7, #32]
 8000640:	2b10      	cmp	r3, #16
 8000642:	d112      	bne.n	800066a <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, SrcAddress);
 8000644:	4a14      	ldr	r2, [pc, #80]	@ (8000698 <LL_DMA_ConfigAddresses+0x6c>)
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	18d3      	adds	r3, r2, r3
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	001a      	movs	r2, r3
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	18d3      	adds	r3, r2, r3
 8000652:	687a      	ldr	r2, [r7, #4]
 8000654:	60da      	str	r2, [r3, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, DstAddress);
 8000656:	4a10      	ldr	r2, [pc, #64]	@ (8000698 <LL_DMA_ConfigAddresses+0x6c>)
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	18d3      	adds	r3, r2, r3
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	001a      	movs	r2, r3
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	18d3      	adds	r3, r2, r3
 8000664:	683a      	ldr	r2, [r7, #0]
 8000666:	609a      	str	r2, [r3, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, DstAddress);
  }
}
 8000668:	e011      	b.n	800068e <LL_DMA_ConfigAddresses+0x62>
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, SrcAddress);
 800066a:	4a0b      	ldr	r2, [pc, #44]	@ (8000698 <LL_DMA_ConfigAddresses+0x6c>)
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	18d3      	adds	r3, r2, r3
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	001a      	movs	r2, r3
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	18d3      	adds	r3, r2, r3
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	609a      	str	r2, [r3, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, DstAddress);
 800067c:	4a06      	ldr	r2, [pc, #24]	@ (8000698 <LL_DMA_ConfigAddresses+0x6c>)
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	18d3      	adds	r3, r2, r3
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	001a      	movs	r2, r3
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	18d3      	adds	r3, r2, r3
 800068a:	683a      	ldr	r2, [r7, #0]
 800068c:	60da      	str	r2, [r3, #12]
}
 800068e:	46c0      	nop			@ (mov r8, r8)
 8000690:	46bd      	mov	sp, r7
 8000692:	b006      	add	sp, #24
 8000694:	bd80      	pop	{r7, pc}
 8000696:	46c0      	nop			@ (mov r8, r8)
 8000698:	08001d48 	.word	0x08001d48

0800069c <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_RX
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_TX
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Request)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	60b9      	str	r1, [r7, #8]
 80006a6:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	0a9b      	lsrs	r3, r3, #10
 80006ac:	4a0f      	ldr	r2, [pc, #60]	@ (80006ec <LL_DMA_SetPeriphRequest+0x50>)
 80006ae:	405a      	eors	r2, r3
 80006b0:	0013      	movs	r3, r2
 80006b2:	00db      	lsls	r3, r3, #3
 80006b4:	1a9b      	subs	r3, r3, r2
 80006b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 80006b8:	68ba      	ldr	r2, [r7, #8]
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	18d3      	adds	r3, r2, r3
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	4a0b      	ldr	r2, [pc, #44]	@ (80006f0 <LL_DMA_SetPeriphRequest+0x54>)
 80006c2:	4694      	mov	ip, r2
 80006c4:	4463      	add	r3, ip
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	223f      	movs	r2, #63	@ 0x3f
 80006ca:	4393      	bics	r3, r2
 80006cc:	0019      	movs	r1, r3
 80006ce:	68ba      	ldr	r2, [r7, #8]
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	18d3      	adds	r3, r2, r3
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	4a06      	ldr	r2, [pc, #24]	@ (80006f0 <LL_DMA_SetPeriphRequest+0x54>)
 80006d8:	4694      	mov	ip, r2
 80006da:	4463      	add	r3, ip
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	430a      	orrs	r2, r1
 80006e0:	601a      	str	r2, [r3, #0]
}
 80006e2:	46c0      	nop			@ (mov r8, r8)
 80006e4:	46bd      	mov	sp, r7
 80006e6:	b006      	add	sp, #24
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	46c0      	nop			@ (mov r8, r8)
 80006ec:	00100080 	.word	0x00100080
 80006f0:	40020800 	.word	0x40020800

080006f4 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(const DMA_TypeDef *DMAx, uint32_t Channel)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 8000702:	4a0b      	ldr	r2, [pc, #44]	@ (8000730 <LL_DMA_EnableIT_TC+0x3c>)
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	18d3      	adds	r3, r2, r3
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	001a      	movs	r2, r3
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	18d3      	adds	r3, r2, r3
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	4907      	ldr	r1, [pc, #28]	@ (8000730 <LL_DMA_EnableIT_TC+0x3c>)
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	18cb      	adds	r3, r1, r3
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	0019      	movs	r1, r3
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	18cb      	adds	r3, r1, r3
 8000720:	2102      	movs	r1, #2
 8000722:	430a      	orrs	r2, r1
 8000724:	601a      	str	r2, [r3, #0]
}
 8000726:	46c0      	nop			@ (mov r8, r8)
 8000728:	46bd      	mov	sp, r7
 800072a:	b004      	add	sp, #16
 800072c:	bd80      	pop	{r7, pc}
 800072e:	46c0      	nop			@ (mov r8, r8)
 8000730:	08001d48 	.word	0x08001d48

08000734 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(const DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TEIE);
 8000742:	4a0b      	ldr	r2, [pc, #44]	@ (8000770 <LL_DMA_EnableIT_TE+0x3c>)
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	18d3      	adds	r3, r2, r3
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	001a      	movs	r2, r3
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	18d3      	adds	r3, r2, r3
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	4907      	ldr	r1, [pc, #28]	@ (8000770 <LL_DMA_EnableIT_TE+0x3c>)
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	18cb      	adds	r3, r1, r3
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	0019      	movs	r1, r3
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	18cb      	adds	r3, r1, r3
 8000760:	2108      	movs	r1, #8
 8000762:	430a      	orrs	r2, r1
 8000764:	601a      	str	r2, [r3, #0]
}
 8000766:	46c0      	nop			@ (mov r8, r8)
 8000768:	46bd      	mov	sp, r7
 800076a:	b004      	add	sp, #16
 800076c:	bd80      	pop	{r7, pc}
 800076e:	46c0      	nop			@ (mov r8, r8)
 8000770:	08001d48 	.word	0x08001d48

08000774 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000778:	4b04      	ldr	r3, [pc, #16]	@ (800078c <LL_RCC_HSI_Enable+0x18>)
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	4b03      	ldr	r3, [pc, #12]	@ (800078c <LL_RCC_HSI_Enable+0x18>)
 800077e:	2180      	movs	r1, #128	@ 0x80
 8000780:	0049      	lsls	r1, r1, #1
 8000782:	430a      	orrs	r2, r1
 8000784:	601a      	str	r2, [r3, #0]
}
 8000786:	46c0      	nop			@ (mov r8, r8)
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40021000 	.word	0x40021000

08000790 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000794:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <LL_RCC_HSI_IsReady+0x24>)
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	2380      	movs	r3, #128	@ 0x80
 800079a:	00db      	lsls	r3, r3, #3
 800079c:	401a      	ands	r2, r3
 800079e:	2380      	movs	r3, #128	@ 0x80
 80007a0:	00db      	lsls	r3, r3, #3
 80007a2:	429a      	cmp	r2, r3
 80007a4:	d101      	bne.n	80007aa <LL_RCC_HSI_IsReady+0x1a>
 80007a6:	2301      	movs	r3, #1
 80007a8:	e000      	b.n	80007ac <LL_RCC_HSI_IsReady+0x1c>
 80007aa:	2300      	movs	r3, #0
}
 80007ac:	0018      	movs	r0, r3
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	46c0      	nop			@ (mov r8, r8)
 80007b4:	40021000 	.word	0x40021000

080007b8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <LL_RCC_SetSysClkSource+0x24>)
 80007c2:	689b      	ldr	r3, [r3, #8]
 80007c4:	2207      	movs	r2, #7
 80007c6:	4393      	bics	r3, r2
 80007c8:	0019      	movs	r1, r3
 80007ca:	4b04      	ldr	r3, [pc, #16]	@ (80007dc <LL_RCC_SetSysClkSource+0x24>)
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	430a      	orrs	r2, r1
 80007d0:	609a      	str	r2, [r3, #8]
}
 80007d2:	46c0      	nop			@ (mov r8, r8)
 80007d4:	46bd      	mov	sp, r7
 80007d6:	b002      	add	sp, #8
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	46c0      	nop			@ (mov r8, r8)
 80007dc:	40021000 	.word	0x40021000

080007e0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80007e4:	4b03      	ldr	r3, [pc, #12]	@ (80007f4 <LL_RCC_GetSysClkSource+0x14>)
 80007e6:	689b      	ldr	r3, [r3, #8]
 80007e8:	2238      	movs	r2, #56	@ 0x38
 80007ea:	4013      	ands	r3, r2
}
 80007ec:	0018      	movs	r0, r3
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	46c0      	nop			@ (mov r8, r8)
 80007f4:	40021000 	.word	0x40021000

080007f8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000800:	4b06      	ldr	r3, [pc, #24]	@ (800081c <LL_RCC_SetAHBPrescaler+0x24>)
 8000802:	689b      	ldr	r3, [r3, #8]
 8000804:	4a06      	ldr	r2, [pc, #24]	@ (8000820 <LL_RCC_SetAHBPrescaler+0x28>)
 8000806:	4013      	ands	r3, r2
 8000808:	0019      	movs	r1, r3
 800080a:	4b04      	ldr	r3, [pc, #16]	@ (800081c <LL_RCC_SetAHBPrescaler+0x24>)
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	430a      	orrs	r2, r1
 8000810:	609a      	str	r2, [r3, #8]
}
 8000812:	46c0      	nop			@ (mov r8, r8)
 8000814:	46bd      	mov	sp, r7
 8000816:	b002      	add	sp, #8
 8000818:	bd80      	pop	{r7, pc}
 800081a:	46c0      	nop			@ (mov r8, r8)
 800081c:	40021000 	.word	0x40021000
 8000820:	fffff0ff 	.word	0xfffff0ff

08000824 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 800082c:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <LL_RCC_SetAPB1Prescaler+0x24>)
 800082e:	689b      	ldr	r3, [r3, #8]
 8000830:	4a06      	ldr	r2, [pc, #24]	@ (800084c <LL_RCC_SetAPB1Prescaler+0x28>)
 8000832:	4013      	ands	r3, r2
 8000834:	0019      	movs	r1, r3
 8000836:	4b04      	ldr	r3, [pc, #16]	@ (8000848 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	430a      	orrs	r2, r1
 800083c:	609a      	str	r2, [r3, #8]
}
 800083e:	46c0      	nop			@ (mov r8, r8)
 8000840:	46bd      	mov	sp, r7
 8000842:	b002      	add	sp, #8
 8000844:	bd80      	pop	{r7, pc}
 8000846:	46c0      	nop			@ (mov r8, r8)
 8000848:	40021000 	.word	0x40021000
 800084c:	ffff8fff 	.word	0xffff8fff

08000850 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000854:	4b04      	ldr	r3, [pc, #16]	@ (8000868 <LL_RCC_PLL_Enable+0x18>)
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	4b03      	ldr	r3, [pc, #12]	@ (8000868 <LL_RCC_PLL_Enable+0x18>)
 800085a:	2180      	movs	r1, #128	@ 0x80
 800085c:	0449      	lsls	r1, r1, #17
 800085e:	430a      	orrs	r2, r1
 8000860:	601a      	str	r2, [r3, #0]
}
 8000862:	46c0      	nop			@ (mov r8, r8)
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40021000 	.word	0x40021000

0800086c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8000870:	4b07      	ldr	r3, [pc, #28]	@ (8000890 <LL_RCC_PLL_IsReady+0x24>)
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	2380      	movs	r3, #128	@ 0x80
 8000876:	049b      	lsls	r3, r3, #18
 8000878:	401a      	ands	r2, r3
 800087a:	2380      	movs	r3, #128	@ 0x80
 800087c:	049b      	lsls	r3, r3, #18
 800087e:	429a      	cmp	r2, r3
 8000880:	d101      	bne.n	8000886 <LL_RCC_PLL_IsReady+0x1a>
 8000882:	2301      	movs	r3, #1
 8000884:	e000      	b.n	8000888 <LL_RCC_PLL_IsReady+0x1c>
 8000886:	2300      	movs	r3, #0
}
 8000888:	0018      	movs	r0, r3
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	46c0      	nop			@ (mov r8, r8)
 8000890:	40021000 	.word	0x40021000

08000894 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	607a      	str	r2, [r7, #4]
 80008a0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80008a2:	4b0a      	ldr	r3, [pc, #40]	@ (80008cc <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80008a4:	68db      	ldr	r3, [r3, #12]
 80008a6:	4a0a      	ldr	r2, [pc, #40]	@ (80008d0 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80008a8:	4013      	ands	r3, r2
 80008aa:	0019      	movs	r1, r3
 80008ac:	68fa      	ldr	r2, [r7, #12]
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	431a      	orrs	r2, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	021b      	lsls	r3, r3, #8
 80008b6:	431a      	orrs	r2, r3
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	431a      	orrs	r2, r3
 80008bc:	4b03      	ldr	r3, [pc, #12]	@ (80008cc <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80008be:	430a      	orrs	r2, r1
 80008c0:	60da      	str	r2, [r3, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 80008c2:	46c0      	nop			@ (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	b004      	add	sp, #16
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	46c0      	nop			@ (mov r8, r8)
 80008cc:	40021000 	.word	0x40021000
 80008d0:	1fff808c 	.word	0x1fff808c

080008d4 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 80008d8:	4b04      	ldr	r3, [pc, #16]	@ (80008ec <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 80008da:	68da      	ldr	r2, [r3, #12]
 80008dc:	4b03      	ldr	r3, [pc, #12]	@ (80008ec <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 80008de:	2180      	movs	r1, #128	@ 0x80
 80008e0:	0549      	lsls	r1, r1, #21
 80008e2:	430a      	orrs	r2, r1
 80008e4:	60da      	str	r2, [r3, #12]
}
 80008e6:	46c0      	nop			@ (mov r8, r8)
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40021000 	.word	0x40021000

080008f0 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_RNG  (*)
  * @note   (*) RNG & CRYP Peripherals available only on STM32G081xx
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80008f8:	4b07      	ldr	r3, [pc, #28]	@ (8000918 <LL_AHB1_GRP1_EnableClock+0x28>)
 80008fa:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80008fc:	4b06      	ldr	r3, [pc, #24]	@ (8000918 <LL_AHB1_GRP1_EnableClock+0x28>)
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	430a      	orrs	r2, r1
 8000902:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000904:	4b04      	ldr	r3, [pc, #16]	@ (8000918 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000908:	687a      	ldr	r2, [r7, #4]
 800090a:	4013      	ands	r3, r2
 800090c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800090e:	68fb      	ldr	r3, [r7, #12]
}
 8000910:	46c0      	nop			@ (mov r8, r8)
 8000912:	46bd      	mov	sp, r7
 8000914:	b004      	add	sp, #16
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40021000 	.word	0x40021000

0800091c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 8000924:	4b07      	ldr	r3, [pc, #28]	@ (8000944 <LL_APB1_GRP1_EnableClock+0x28>)
 8000926:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8000928:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <LL_APB1_GRP1_EnableClock+0x28>)
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	430a      	orrs	r2, r1
 800092e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8000930:	4b04      	ldr	r3, [pc, #16]	@ (8000944 <LL_APB1_GRP1_EnableClock+0x28>)
 8000932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	4013      	ands	r3, r2
 8000938:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800093a:	68fb      	ldr	r3, [r7, #12]
}
 800093c:	46c0      	nop			@ (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	b004      	add	sp, #16
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40021000 	.word	0x40021000

08000948 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_ADC
  * @note (*) peripheral not available on all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR2, Periphs);
 8000950:	4b07      	ldr	r3, [pc, #28]	@ (8000970 <LL_APB2_GRP1_EnableClock+0x28>)
 8000952:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8000954:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <LL_APB2_GRP1_EnableClock+0x28>)
 8000956:	687a      	ldr	r2, [r7, #4]
 8000958:	430a      	orrs	r2, r1
 800095a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 800095c:	4b04      	ldr	r3, [pc, #16]	@ (8000970 <LL_APB2_GRP1_EnableClock+0x28>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000960:	687a      	ldr	r2, [r7, #4]
 8000962:	4013      	ands	r3, r2
 8000964:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000966:	68fb      	ldr	r3, [r7, #12]
}
 8000968:	46c0      	nop			@ (mov r8, r8)
 800096a:	46bd      	mov	sp, r7
 800096c:	b004      	add	sp, #16
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40021000 	.word	0x40021000

08000974 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 800097c:	4b07      	ldr	r3, [pc, #28]	@ (800099c <LL_IOP_GRP1_EnableClock+0x28>)
 800097e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000980:	4b06      	ldr	r3, [pc, #24]	@ (800099c <LL_IOP_GRP1_EnableClock+0x28>)
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	430a      	orrs	r2, r1
 8000986:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000988:	4b04      	ldr	r3, [pc, #16]	@ (800099c <LL_IOP_GRP1_EnableClock+0x28>)
 800098a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800098c:	687a      	ldr	r2, [r7, #4]
 800098e:	4013      	ands	r3, r2
 8000990:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000992:	68fb      	ldr	r3, [r7, #12]
}
 8000994:	46c0      	nop			@ (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	b004      	add	sp, #16
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40021000 	.word	0x40021000

080009a0 <LL_SYSCFG_DisableDBATT>:
  *         @arg @ref LL_SYSCFG_UCPD2_STROBE
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_DisableDBATT(uint32_t ConfigDeadBattery)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigDeadBattery);
 80009a8:	4b04      	ldr	r3, [pc, #16]	@ (80009bc <LL_SYSCFG_DisableDBATT+0x1c>)
 80009aa:	6819      	ldr	r1, [r3, #0]
 80009ac:	4b03      	ldr	r3, [pc, #12]	@ (80009bc <LL_SYSCFG_DisableDBATT+0x1c>)
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	430a      	orrs	r2, r1
 80009b2:	601a      	str	r2, [r3, #0]
}
 80009b4:	46c0      	nop			@ (mov r8, r8)
 80009b6:	46bd      	mov	sp, r7
 80009b8:	b002      	add	sp, #8
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40010000 	.word	0x40010000

080009c0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80009c8:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <LL_FLASH_SetLatency+0x24>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2207      	movs	r2, #7
 80009ce:	4393      	bics	r3, r2
 80009d0:	0019      	movs	r1, r3
 80009d2:	4b04      	ldr	r3, [pc, #16]	@ (80009e4 <LL_FLASH_SetLatency+0x24>)
 80009d4:	687a      	ldr	r2, [r7, #4]
 80009d6:	430a      	orrs	r2, r1
 80009d8:	601a      	str	r2, [r3, #0]
}
 80009da:	46c0      	nop			@ (mov r8, r8)
 80009dc:	46bd      	mov	sp, r7
 80009de:	b002      	add	sp, #8
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	46c0      	nop			@ (mov r8, r8)
 80009e4:	40022000 	.word	0x40022000

080009e8 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80009f0:	4a05      	ldr	r2, [pc, #20]	@ (8000a08 <LL_EXTI_EnableIT_0_31+0x20>)
 80009f2:	2380      	movs	r3, #128	@ 0x80
 80009f4:	58d2      	ldr	r2, [r2, r3]
 80009f6:	4904      	ldr	r1, [pc, #16]	@ (8000a08 <LL_EXTI_EnableIT_0_31+0x20>)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4313      	orrs	r3, r2
 80009fc:	2280      	movs	r2, #128	@ 0x80
 80009fe:	508b      	str	r3, [r1, r2]
}
 8000a00:	46c0      	nop			@ (mov r8, r8)
 8000a02:	46bd      	mov	sp, r7
 8000a04:	b002      	add	sp, #8
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40021800 	.word	0x40021800

08000a0c <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8000a14:	4b04      	ldr	r3, [pc, #16]	@ (8000a28 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8000a16:	6859      	ldr	r1, [r3, #4]
 8000a18:	4b03      	ldr	r3, [pc, #12]	@ (8000a28 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	430a      	orrs	r2, r1
 8000a1e:	605a      	str	r2, [r3, #4]
}
 8000a20:	46c0      	nop			@ (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	b002      	add	sp, #8
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40021800 	.word	0x40021800

08000a2c <LL_EXTI_SetEXTISource>:
  *         @arg @ref LL_EXTI_CONFIG_LINE14
  *         @arg @ref LL_EXTI_CONFIG_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000a2c:	b590      	push	{r4, r7, lr}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(EXTI->EXTICR[Line & 0x03u], EXTI_EXTICR1_EXTI0 << (Line >> LL_EXTI_REGISTER_PINPOS_SHFT), Port << (Line >> LL_EXTI_REGISTER_PINPOS_SHFT));
 8000a36:	4a0f      	ldr	r2, [pc, #60]	@ (8000a74 <LL_EXTI_SetEXTISource+0x48>)
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	2103      	movs	r1, #3
 8000a3c:	400b      	ands	r3, r1
 8000a3e:	3318      	adds	r3, #24
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	589b      	ldr	r3, [r3, r2]
 8000a44:	683a      	ldr	r2, [r7, #0]
 8000a46:	0c12      	lsrs	r2, r2, #16
 8000a48:	2107      	movs	r1, #7
 8000a4a:	4091      	lsls	r1, r2
 8000a4c:	000a      	movs	r2, r1
 8000a4e:	43d2      	mvns	r2, r2
 8000a50:	401a      	ands	r2, r3
 8000a52:	0011      	movs	r1, r2
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	0c1b      	lsrs	r3, r3, #16
 8000a58:	687a      	ldr	r2, [r7, #4]
 8000a5a:	409a      	lsls	r2, r3
 8000a5c:	4805      	ldr	r0, [pc, #20]	@ (8000a74 <LL_EXTI_SetEXTISource+0x48>)
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	2403      	movs	r4, #3
 8000a62:	4023      	ands	r3, r4
 8000a64:	430a      	orrs	r2, r1
 8000a66:	3318      	adds	r3, #24
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	501a      	str	r2, [r3, r0]
}
 8000a6c:	46c0      	nop			@ (mov r8, r8)
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	b003      	add	sp, #12
 8000a72:	bd90      	pop	{r4, r7, pc}
 8000a74:	40021800 	.word	0x40021800

08000a78 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2201      	movs	r2, #1
 8000a86:	431a      	orrs	r2, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	601a      	str	r2, [r3, #0]
}
 8000a8c:	46c0      	nop			@ (mov r8, r8)
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	b002      	add	sp, #8
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a03      	ldr	r2, [pc, #12]	@ (8000ab0 <LL_USART_DisableFIFO+0x1c>)
 8000aa2:	401a      	ands	r2, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	601a      	str	r2, [r3, #0]
}
 8000aa8:	46c0      	nop			@ (mov r8, r8)
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	b002      	add	sp, #8
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	dfffffff 	.word	0xdfffffff

08000ab4 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000abe:	f3ef 8310 	mrs	r3, PRIMASK
 8000ac2:	60bb      	str	r3, [r7, #8]
  return(result);
 8000ac4:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	2301      	movs	r3, #1
 8000aca:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	f383 8810 	msr	PRIMASK, r3
}
 8000ad2:	46c0      	nop			@ (mov r8, r8)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	689b      	ldr	r3, [r3, #8]
 8000ad8:	00db      	lsls	r3, r3, #3
 8000ada:	08da      	lsrs	r2, r3, #3
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	075b      	lsls	r3, r3, #29
 8000ae0:	431a      	orrs	r2, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000aea:	693b      	ldr	r3, [r7, #16]
 8000aec:	f383 8810 	msr	PRIMASK, r3
}
 8000af0:	46c0      	nop			@ (mov r8, r8)
}
 8000af2:	46c0      	nop			@ (mov r8, r8)
 8000af4:	46bd      	mov	sp, r7
 8000af6:	b006      	add	sp, #24
 8000af8:	bd80      	pop	{r7, pc}
	...

08000afc <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000b06:	f3ef 8310 	mrs	r3, PRIMASK
 8000b0a:	60bb      	str	r3, [r7, #8]
  return(result);
 8000b0c:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	2301      	movs	r3, #1
 8000b12:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	f383 8810 	msr	PRIMASK, r3
}
 8000b1a:	46c0      	nop			@ (mov r8, r8)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	4a08      	ldr	r2, [pc, #32]	@ (8000b44 <LL_USART_SetRXFIFOThreshold+0x48>)
 8000b22:	401a      	ands	r2, r3
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	065b      	lsls	r3, r3, #25
 8000b28:	431a      	orrs	r2, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	609a      	str	r2, [r3, #8]
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	f383 8810 	msr	PRIMASK, r3
}
 8000b38:	46c0      	nop			@ (mov r8, r8)
}
 8000b3a:	46c0      	nop			@ (mov r8, r8)
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	b006      	add	sp, #24
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	46c0      	nop			@ (mov r8, r8)
 8000b44:	f1ffffff 	.word	0xf1ffffff

08000b48 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	4a07      	ldr	r2, [pc, #28]	@ (8000b74 <LL_USART_ConfigAsyncMode+0x2c>)
 8000b56:	401a      	ands	r2, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	689b      	ldr	r3, [r3, #8]
 8000b60:	222a      	movs	r2, #42	@ 0x2a
 8000b62:	4393      	bics	r3, r2
 8000b64:	001a      	movs	r2, r3
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	609a      	str	r2, [r3, #8]
}
 8000b6a:	46c0      	nop			@ (mov r8, r8)
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	b002      	add	sp, #8
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	46c0      	nop			@ (mov r8, r8)
 8000b74:	ffffb7ff 	.word	0xffffb7ff

08000b78 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(const USART_TypeDef *USARTx)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	69da      	ldr	r2, [r3, #28]
 8000b84:	2380      	movs	r3, #128	@ 0x80
 8000b86:	039b      	lsls	r3, r3, #14
 8000b88:	401a      	ands	r2, r3
 8000b8a:	2380      	movs	r3, #128	@ 0x80
 8000b8c:	039b      	lsls	r3, r3, #14
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d101      	bne.n	8000b96 <LL_USART_IsActiveFlag_TEACK+0x1e>
 8000b92:	2301      	movs	r3, #1
 8000b94:	e000      	b.n	8000b98 <LL_USART_IsActiveFlag_TEACK+0x20>
 8000b96:	2300      	movs	r3, #0
}
 8000b98:	0018      	movs	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	b002      	add	sp, #8
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(const USART_TypeDef *USARTx)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	69da      	ldr	r2, [r3, #28]
 8000bac:	2380      	movs	r3, #128	@ 0x80
 8000bae:	03db      	lsls	r3, r3, #15
 8000bb0:	401a      	ands	r2, r3
 8000bb2:	2380      	movs	r3, #128	@ 0x80
 8000bb4:	03db      	lsls	r3, r3, #15
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d101      	bne.n	8000bbe <LL_USART_IsActiveFlag_REACK+0x1e>
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e000      	b.n	8000bc0 <LL_USART_IsActiveFlag_REACK+0x20>
 8000bbe:	2300      	movs	r3, #0
}
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	b002      	add	sp, #8
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000bd0:	f3ef 8310 	mrs	r3, PRIMASK
 8000bd4:	60bb      	str	r3, [r7, #8]
  return(result);
 8000bd6:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8000bd8:	617b      	str	r3, [r7, #20]
 8000bda:	2301      	movs	r3, #1
 8000bdc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	f383 8810 	msr	PRIMASK, r3
}
 8000be4:	46c0      	nop			@ (mov r8, r8)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	689b      	ldr	r3, [r3, #8]
 8000bea:	2240      	movs	r2, #64	@ 0x40
 8000bec:	431a      	orrs	r2, r3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	f383 8810 	msr	PRIMASK, r3
}
 8000bfc:	46c0      	nop			@ (mov r8, r8)
}
 8000bfe:	46c0      	nop			@ (mov r8, r8)
 8000c00:	46bd      	mov	sp, r7
 8000c02:	b006      	add	sp, #24
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(const USART_TypeDef *USARTx, uint32_t Direction)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b084      	sub	sp, #16
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
 8000c0e:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d103      	bne.n	8000c1e <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	3328      	adds	r3, #40	@ 0x28
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	e002      	b.n	8000c24 <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	3324      	adds	r3, #36	@ 0x24
 8000c22:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 8000c24:	68fb      	ldr	r3, [r7, #12]
}
 8000c26:	0018      	movs	r0, r3
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	b004      	add	sp, #16
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b084      	sub	sp, #16
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	60f8      	str	r0, [r7, #12]
 8000c36:	60b9      	str	r1, [r7, #8]
 8000c38:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	6819      	ldr	r1, [r3, #0]
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	435b      	muls	r3, r3
 8000c42:	001a      	movs	r2, r3
 8000c44:	0013      	movs	r3, r2
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	189b      	adds	r3, r3, r2
 8000c4a:	43db      	mvns	r3, r3
 8000c4c:	400b      	ands	r3, r1
 8000c4e:	001a      	movs	r2, r3
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	435b      	muls	r3, r3
 8000c54:	6879      	ldr	r1, [r7, #4]
 8000c56:	434b      	muls	r3, r1
 8000c58:	431a      	orrs	r2, r3
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	601a      	str	r2, [r3, #0]
}
 8000c5e:	46c0      	nop			@ (mov r8, r8)
 8000c60:	46bd      	mov	sp, r7
 8000c62:	b004      	add	sp, #16
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b084      	sub	sp, #16
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	60f8      	str	r0, [r7, #12]
 8000c6e:	60b9      	str	r1, [r7, #8]
 8000c70:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	68d9      	ldr	r1, [r3, #12]
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	435b      	muls	r3, r3
 8000c7a:	001a      	movs	r2, r3
 8000c7c:	0013      	movs	r3, r2
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	189b      	adds	r3, r3, r2
 8000c82:	43db      	mvns	r3, r3
 8000c84:	400b      	ands	r3, r1
 8000c86:	001a      	movs	r2, r3
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	435b      	muls	r3, r3
 8000c8c:	6879      	ldr	r1, [r7, #4]
 8000c8e:	434b      	muls	r3, r1
 8000c90:	431a      	orrs	r2, r3
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	60da      	str	r2, [r3, #12]
}
 8000c96:	46c0      	nop			@ (mov r8, r8)
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	b004      	add	sp, #16
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
 8000ca6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	683a      	ldr	r2, [r7, #0]
 8000cac:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000cae:	46c0      	nop			@ (mov r8, r8)
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	b002      	add	sp, #8
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b084      	sub	sp, #16
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
 8000cbe:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	695b      	ldr	r3, [r3, #20]
 8000cc4:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	683a      	ldr	r2, [r7, #0]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	041a      	lsls	r2, r3, #16
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	6839      	ldr	r1, [r7, #0]
 8000cd4:	400b      	ands	r3, r1
 8000cd6:	431a      	orrs	r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	619a      	str	r2, [r3, #24]
}
 8000cdc:	46c0      	nop			@ (mov r8, r8)
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	b004      	add	sp, #16
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ce4:	b5b0      	push	{r4, r5, r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000cea:	2001      	movs	r0, #1
 8000cec:	f7ff fe2c 	bl	8000948 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000cf0:	2380      	movs	r3, #128	@ 0x80
 8000cf2:	055b      	lsls	r3, r3, #21
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f7ff fe11 	bl	800091c <LL_APB1_GRP1_EnableClock>

  /* SysTick_IRQn interrupt configuration */

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  LL_SYSCFG_DisableDBATT(LL_SYSCFG_UCPD1_STROBE | LL_SYSCFG_UCPD2_STROBE);
 8000cfa:	23c0      	movs	r3, #192	@ 0xc0
 8000cfc:	00db      	lsls	r3, r3, #3
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f7ff fe4e 	bl	80009a0 <LL_SYSCFG_DisableDBATT>
  /* USER CODE BEGIN Init */
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d04:	f000 f83a 	bl	8000d7c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* Initialize User push-button in EXTI mode */
   UserButton_Init();
 8000d08:	f000 f9e6 	bl	80010d8 <UserButton_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d0c:	f000 f9b7 	bl	800107e <MX_GPIO_Init>
  MX_DMA_Init();
 8000d10:	f000 f9a6 	bl	8001060 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000d14:	f000 f86c 	bl	8000df0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /*Wait for User push-button to start receive data*/
  WaitForUserButtonPress();
 8000d18:	f000 fa2a 	bl	8001170 <WaitForUserButtonPress>

  StartTransfer();
 8000d1c:	f000 fa40 	bl	80011a0 <StartTransfer>

  WaitAndCheckEndOfTransfer();
 8000d20:	f000 fa50 	bl	80011c4 <WaitAndCheckEndOfTransfer>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  ResetFlags();
 8000d24:	f000 fa76 	bl	8001214 <ResetFlags>
	  	  // Start the recursion
	  	 	/* Configure the DMA functional parameters for reception */
		LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_2,
 8000d28:	4b10      	ldr	r3, [pc, #64]	@ (8000d6c <main+0x88>)
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	f7ff ff6a 	bl	8000c06 <LL_USART_DMA_GetRegAddr>
 8000d32:	0005      	movs	r5, r0
 8000d34:	4c0e      	ldr	r4, [pc, #56]	@ (8000d70 <main+0x8c>)
 8000d36:	4b0f      	ldr	r3, [pc, #60]	@ (8000d74 <main+0x90>)
 8000d38:	2101      	movs	r1, #1
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f7ff fb5c 	bl	80003f8 <LL_DMA_GetDataTransferDirection>
 8000d40:	0003      	movs	r3, r0
 8000d42:	480c      	ldr	r0, [pc, #48]	@ (8000d74 <main+0x90>)
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	0023      	movs	r3, r4
 8000d48:	002a      	movs	r2, r5
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	f7ff fc6e 	bl	800062c <LL_DMA_ConfigAddresses>
							   LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
							   (uint32_t)RxRawData,
							   LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2));
		LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_2, ubNbDataToReceive);
 8000d50:	4b09      	ldr	r3, [pc, #36]	@ (8000d78 <main+0x94>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	001a      	movs	r2, r3
 8000d56:	4b07      	ldr	r3, [pc, #28]	@ (8000d74 <main+0x90>)
 8000d58:	2101      	movs	r1, #1
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f7ff fc44 	bl	80005e8 <LL_DMA_SetDataLength>

		StartTransfer();
 8000d60:	f000 fa1e 	bl	80011a0 <StartTransfer>

		WaitAndCheckEndOfTransfer();
 8000d64:	f000 fa2e 	bl	80011c4 <WaitAndCheckEndOfTransfer>
	  ResetFlags();
 8000d68:	46c0      	nop			@ (mov r8, r8)
 8000d6a:	e7db      	b.n	8000d24 <main+0x40>
 8000d6c:	40004400 	.word	0x40004400
 8000d70:	20000028 	.word	0x20000028
 8000d74:	40020000 	.word	0x40020000
 8000d78:	20000000 	.word	0x20000000

08000d7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* HSI configuration and activation */
  
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000d80:	2002      	movs	r0, #2
 8000d82:	f7ff fe1d 	bl	80009c0 <LL_FLASH_SetLatency>

  /* HSI configuration and activation */
  LL_RCC_HSI_Enable();
 8000d86:	f7ff fcf5 	bl	8000774 <LL_RCC_HSI_Enable>
  while(LL_RCC_HSI_IsReady() != 1)
 8000d8a:	46c0      	nop			@ (mov r8, r8)
 8000d8c:	f7ff fd00 	bl	8000790 <LL_RCC_HSI_IsReady>
 8000d90:	0003      	movs	r3, r0
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d1fa      	bne.n	8000d8c <SystemClock_Config+0x10>
  {
  }

  /* Main PLL configuration and activation */
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_4, 70, LL_RCC_PLLR_DIV_5);
 8000d96:	2380      	movs	r3, #128	@ 0x80
 8000d98:	061b      	lsls	r3, r3, #24
 8000d9a:	2246      	movs	r2, #70	@ 0x46
 8000d9c:	2130      	movs	r1, #48	@ 0x30
 8000d9e:	2002      	movs	r0, #2
 8000da0:	f7ff fd78 	bl	8000894 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000da4:	f7ff fd54 	bl	8000850 <LL_RCC_PLL_Enable>
  LL_RCC_PLL_EnableDomain_SYS();
 8000da8:	f7ff fd94 	bl	80008d4 <LL_RCC_PLL_EnableDomain_SYS>
  while(LL_RCC_PLL_IsReady() != 1)
 8000dac:	46c0      	nop			@ (mov r8, r8)
 8000dae:	f7ff fd5d 	bl	800086c <LL_RCC_PLL_IsReady>
 8000db2:	0003      	movs	r3, r0
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d1fa      	bne.n	8000dae <SystemClock_Config+0x32>
  {
  }

  /* Set AHB prescaler*/
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000db8:	2000      	movs	r0, #0
 8000dba:	f7ff fd1d 	bl	80007f8 <LL_RCC_SetAHBPrescaler>

  /* Sysclk activation on the main PLL */
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000dbe:	2002      	movs	r0, #2
 8000dc0:	f7ff fcfa 	bl	80007b8 <LL_RCC_SetSysClkSource>
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000dc4:	46c0      	nop			@ (mov r8, r8)
 8000dc6:	f7ff fd0b 	bl	80007e0 <LL_RCC_GetSysClkSource>
 8000dca:	0003      	movs	r3, r0
 8000dcc:	2b10      	cmp	r3, #16
 8000dce:	d1fa      	bne.n	8000dc6 <SystemClock_Config+0x4a>
  {
  }

  /* Set APB1 prescaler*/
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	f7ff fd27 	bl	8000824 <LL_RCC_SetAPB1Prescaler>
  LL_Init1msTick(56000000);
 8000dd6:	4b05      	ldr	r3, [pc, #20]	@ (8000dec <SystemClock_Config+0x70>)
 8000dd8:	0018      	movs	r0, r3
 8000dda:	f000 ff3b 	bl	8001c54 <LL_Init1msTick>
  /* Update CMSIS variable (which can be updated also through SystemCoreClockUpdate function) */
  LL_SetSystemCoreClock(56000000);
 8000dde:	4b03      	ldr	r3, [pc, #12]	@ (8000dec <SystemClock_Config+0x70>)
 8000de0:	0018      	movs	r0, r3
 8000de2:	f000 ff6b 	bl	8001cbc <LL_SetSystemCoreClock>
}
 8000de6:	46c0      	nop			@ (mov r8, r8)
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	03567e00 	.word	0x03567e00

08000df0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000df2:	b091      	sub	sp, #68	@ 0x44
 8000df4:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000df6:	2618      	movs	r6, #24
 8000df8:	19bb      	adds	r3, r7, r6
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	2320      	movs	r3, #32
 8000dfe:	001a      	movs	r2, r3
 8000e00:	2100      	movs	r1, #0
 8000e02:	f000 ff69 	bl	8001cd8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e06:	003b      	movs	r3, r7
 8000e08:	0018      	movs	r0, r3
 8000e0a:	2318      	movs	r3, #24
 8000e0c:	001a      	movs	r2, r3
 8000e0e:	2100      	movs	r1, #0
 8000e10:	f000 ff62 	bl	8001cd8 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000e14:	2380      	movs	r3, #128	@ 0x80
 8000e16:	029b      	lsls	r3, r3, #10
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f7ff fd7f 	bl	800091c <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000e1e:	2001      	movs	r0, #1
 8000e20:	f7ff fda8 	bl	8000974 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000e24:	003b      	movs	r3, r7
 8000e26:	2204      	movs	r2, #4
 8000e28:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e2a:	003b      	movs	r3, r7
 8000e2c:	2202      	movs	r2, #2
 8000e2e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000e30:	003b      	movs	r3, r7
 8000e32:	2202      	movs	r2, #2
 8000e34:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e36:	003b      	movs	r3, r7
 8000e38:	2200      	movs	r2, #0
 8000e3a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e3c:	003b      	movs	r3, r7
 8000e3e:	2201      	movs	r2, #1
 8000e40:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000e42:	003b      	movs	r3, r7
 8000e44:	2201      	movs	r2, #1
 8000e46:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e48:	003a      	movs	r2, r7
 8000e4a:	23a0      	movs	r3, #160	@ 0xa0
 8000e4c:	05db      	lsls	r3, r3, #23
 8000e4e:	0011      	movs	r1, r2
 8000e50:	0018      	movs	r0, r3
 8000e52:	f000 fb87 	bl	8001564 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000e56:	003b      	movs	r3, r7
 8000e58:	2208      	movs	r2, #8
 8000e5a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e5c:	003b      	movs	r3, r7
 8000e5e:	2202      	movs	r2, #2
 8000e60:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000e62:	003b      	movs	r3, r7
 8000e64:	2202      	movs	r2, #2
 8000e66:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e68:	003b      	movs	r3, r7
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e6e:	003b      	movs	r3, r7
 8000e70:	2201      	movs	r2, #1
 8000e72:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000e74:	003b      	movs	r3, r7
 8000e76:	2201      	movs	r2, #1
 8000e78:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7a:	003a      	movs	r2, r7
 8000e7c:	23a0      	movs	r3, #160	@ 0xa0
 8000e7e:	05db      	lsls	r3, r3, #23
 8000e80:	0011      	movs	r1, r2
 8000e82:	0018      	movs	r0, r3
 8000e84:	f000 fb6e 	bl	8001564 <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_USART2_TX);
 8000e88:	4b71      	ldr	r3, [pc, #452]	@ (8001050 <MX_USART2_UART_Init+0x260>)
 8000e8a:	2235      	movs	r2, #53	@ 0x35
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f7ff fc04 	bl	800069c <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8000e94:	4b6e      	ldr	r3, [pc, #440]	@ (8001050 <MX_USART2_UART_Init+0x260>)
 8000e96:	2210      	movs	r2, #16
 8000e98:	2100      	movs	r1, #0
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	f7ff fa86 	bl	80003ac <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_HIGH);
 8000ea0:	2380      	movs	r3, #128	@ 0x80
 8000ea2:	019b      	lsls	r3, r3, #6
 8000ea4:	486a      	ldr	r0, [pc, #424]	@ (8001050 <MX_USART2_UART_Init+0x260>)
 8000ea6:	001a      	movs	r2, r3
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	f7ff fb77 	bl	800059c <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 8000eae:	4b68      	ldr	r3, [pc, #416]	@ (8001050 <MX_USART2_UART_Init+0x260>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	f7ff fab9 	bl	800042c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8000eba:	4b65      	ldr	r3, [pc, #404]	@ (8001050 <MX_USART2_UART_Init+0x260>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	f7ff fad7 	bl	8000474 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8000ec6:	4b62      	ldr	r3, [pc, #392]	@ (8001050 <MX_USART2_UART_Init+0x260>)
 8000ec8:	2280      	movs	r2, #128	@ 0x80
 8000eca:	2100      	movs	r1, #0
 8000ecc:	0018      	movs	r0, r3
 8000ece:	f7ff faf5 	bl	80004bc <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_BYTE);
 8000ed2:	4b5f      	ldr	r3, [pc, #380]	@ (8001050 <MX_USART2_UART_Init+0x260>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f7ff fb13 	bl	8000504 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 8000ede:	4b5c      	ldr	r3, [pc, #368]	@ (8001050 <MX_USART2_UART_Init+0x260>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f7ff fb33 	bl	8000550 <LL_DMA_SetMemorySize>

  /* USART2_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_2, LL_DMAMUX_REQ_USART2_RX);
 8000eea:	4b59      	ldr	r3, [pc, #356]	@ (8001050 <MX_USART2_UART_Init+0x260>)
 8000eec:	2234      	movs	r2, #52	@ 0x34
 8000eee:	2101      	movs	r1, #1
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f7ff fbd3 	bl	800069c <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_PERIPH_TO_MEMORY); //Peripheral to memory
 8000ef6:	4b56      	ldr	r3, [pc, #344]	@ (8001050 <MX_USART2_UART_Init+0x260>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2101      	movs	r1, #1
 8000efc:	0018      	movs	r0, r3
 8000efe:	f7ff fa55 	bl	80003ac <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_HIGH); //priority high
 8000f02:	2380      	movs	r3, #128	@ 0x80
 8000f04:	019b      	lsls	r3, r3, #6
 8000f06:	4852      	ldr	r0, [pc, #328]	@ (8001050 <MX_USART2_UART_Init+0x260>)
 8000f08:	001a      	movs	r2, r3
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	f7ff fb46 	bl	800059c <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);  //Normal DMA
 8000f10:	4b4f      	ldr	r3, [pc, #316]	@ (8001050 <MX_USART2_UART_Init+0x260>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	2101      	movs	r1, #1
 8000f16:	0018      	movs	r0, r3
 8000f18:	f7ff fa88 	bl	800042c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 8000f1c:	4b4c      	ldr	r3, [pc, #304]	@ (8001050 <MX_USART2_UART_Init+0x260>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2101      	movs	r1, #1
 8000f22:	0018      	movs	r0, r3
 8000f24:	f7ff faa6 	bl	8000474 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 8000f28:	4b49      	ldr	r3, [pc, #292]	@ (8001050 <MX_USART2_UART_Init+0x260>)
 8000f2a:	2280      	movs	r2, #128	@ 0x80
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f7ff fac4 	bl	80004bc <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 8000f34:	4b46      	ldr	r3, [pc, #280]	@ (8001050 <MX_USART2_UART_Init+0x260>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	2101      	movs	r1, #1
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f7ff fae2 	bl	8000504 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 8000f40:	4b43      	ldr	r3, [pc, #268]	@ (8001050 <MX_USART2_UART_Init+0x260>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	2101      	movs	r1, #1
 8000f46:	0018      	movs	r0, r3
 8000f48:	f7ff fb02 	bl	8000550 <LL_DMA_SetMemorySize>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	201c      	movs	r0, #28
 8000f50:	f7ff f97e 	bl	8000250 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000f54:	201c      	movs	r0, #28
 8000f56:	f7ff f961 	bl	800021c <__NVIC_EnableIRQ>
//                         LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT),
//                         LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1));
//  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, ubNbDataToTransmit);

  /* Configure the DMA functional parameters for reception */
  LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_2,
 8000f5a:	4b3e      	ldr	r3, [pc, #248]	@ (8001054 <MX_USART2_UART_Init+0x264>)
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f7ff fe51 	bl	8000c06 <LL_USART_DMA_GetRegAddr>
 8000f64:	0005      	movs	r5, r0
 8000f66:	4c3c      	ldr	r4, [pc, #240]	@ (8001058 <MX_USART2_UART_Init+0x268>)
 8000f68:	4b39      	ldr	r3, [pc, #228]	@ (8001050 <MX_USART2_UART_Init+0x260>)
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f7ff fa43 	bl	80003f8 <LL_DMA_GetDataTransferDirection>
 8000f72:	0003      	movs	r3, r0
 8000f74:	4836      	ldr	r0, [pc, #216]	@ (8001050 <MX_USART2_UART_Init+0x260>)
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	0023      	movs	r3, r4
 8000f7a:	002a      	movs	r2, r5
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	f7ff fb55 	bl	800062c <LL_DMA_ConfigAddresses>
                         LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
                         (uint32_t)RxRawData,
                         LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2));
  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_2, ubNbDataToReceive);
 8000f82:	4b36      	ldr	r3, [pc, #216]	@ (800105c <MX_USART2_UART_Init+0x26c>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	001a      	movs	r2, r3
 8000f88:	4b31      	ldr	r3, [pc, #196]	@ (8001050 <MX_USART2_UART_Init+0x260>)
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	f7ff fb2b 	bl	80005e8 <LL_DMA_SetDataLength>

  /* Enable DMA transfer complete/error interrupts  */
//  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_1);
//  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_1);
 LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_2);
 8000f92:	4b2f      	ldr	r3, [pc, #188]	@ (8001050 <MX_USART2_UART_Init+0x260>)
 8000f94:	2101      	movs	r1, #1
 8000f96:	0018      	movs	r0, r3
 8000f98:	f7ff fbac 	bl	80006f4 <LL_DMA_EnableIT_TC>
 LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_2);
 8000f9c:	4b2c      	ldr	r3, [pc, #176]	@ (8001050 <MX_USART2_UART_Init+0x260>)
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f7ff fbc7 	bl	8000734 <LL_DMA_EnableIT_TE>
  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000fa6:	19bb      	adds	r3, r7, r6
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 19200;
 8000fac:	19bb      	adds	r3, r7, r6
 8000fae:	2296      	movs	r2, #150	@ 0x96
 8000fb0:	01d2      	lsls	r2, r2, #7
 8000fb2:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000fb4:	0031      	movs	r1, r6
 8000fb6:	187b      	adds	r3, r7, r1
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000fbc:	187b      	adds	r3, r7, r1
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000fc2:	187b      	adds	r3, r7, r1
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000fc8:	187b      	adds	r3, r7, r1
 8000fca:	220c      	movs	r2, #12
 8000fcc:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000fce:	187b      	adds	r3, r7, r1
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000fd4:	187b      	adds	r3, r7, r1
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART2, &USART_InitStruct);
 8000fda:	187b      	adds	r3, r7, r1
 8000fdc:	4a1d      	ldr	r2, [pc, #116]	@ (8001054 <MX_USART2_UART_Init+0x264>)
 8000fde:	0019      	movs	r1, r3
 8000fe0:	0010      	movs	r0, r2
 8000fe2:	f000 fd8f 	bl	8001b04 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000fe6:	4b1b      	ldr	r3, [pc, #108]	@ (8001054 <MX_USART2_UART_Init+0x264>)
 8000fe8:	2100      	movs	r1, #0
 8000fea:	0018      	movs	r0, r3
 8000fec:	f7ff fd62 	bl	8000ab4 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000ff0:	4b18      	ldr	r3, [pc, #96]	@ (8001054 <MX_USART2_UART_Init+0x264>)
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	f7ff fd81 	bl	8000afc <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART2);
 8000ffa:	4b16      	ldr	r3, [pc, #88]	@ (8001054 <MX_USART2_UART_Init+0x264>)
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	f7ff fd49 	bl	8000a94 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART2);
 8001002:	4b14      	ldr	r3, [pc, #80]	@ (8001054 <MX_USART2_UART_Init+0x264>)
 8001004:	0018      	movs	r0, r3
 8001006:	f7ff fd9f 	bl	8000b48 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 800100a:	4b12      	ldr	r3, [pc, #72]	@ (8001054 <MX_USART2_UART_Init+0x264>)
 800100c:	0018      	movs	r0, r3
 800100e:	f7ff fd33 	bl	8000a78 <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 8001012:	46c0      	nop			@ (mov r8, r8)
 8001014:	4b0f      	ldr	r3, [pc, #60]	@ (8001054 <MX_USART2_UART_Init+0x264>)
 8001016:	0018      	movs	r0, r3
 8001018:	f7ff fdae 	bl	8000b78 <LL_USART_IsActiveFlag_TEACK>
 800101c:	1e03      	subs	r3, r0, #0
 800101e:	d0f9      	beq.n	8001014 <MX_USART2_UART_Init+0x224>
 8001020:	4b0c      	ldr	r3, [pc, #48]	@ (8001054 <MX_USART2_UART_Init+0x264>)
 8001022:	0018      	movs	r0, r3
 8001024:	f7ff fdbc 	bl	8000ba0 <LL_USART_IsActiveFlag_REACK>
 8001028:	1e03      	subs	r3, r0, #0
 800102a:	d0f3      	beq.n	8001014 <MX_USART2_UART_Init+0x224>
  {
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* Polling USART initialisation */
  while ((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 800102c:	46c0      	nop			@ (mov r8, r8)
 800102e:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <MX_USART2_UART_Init+0x264>)
 8001030:	0018      	movs	r0, r3
 8001032:	f7ff fda1 	bl	8000b78 <LL_USART_IsActiveFlag_TEACK>
 8001036:	1e03      	subs	r3, r0, #0
 8001038:	d0f9      	beq.n	800102e <MX_USART2_UART_Init+0x23e>
 800103a:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <MX_USART2_UART_Init+0x264>)
 800103c:	0018      	movs	r0, r3
 800103e:	f7ff fdaf 	bl	8000ba0 <LL_USART_IsActiveFlag_REACK>
 8001042:	1e03      	subs	r3, r0, #0
 8001044:	d0f3      	beq.n	800102e <MX_USART2_UART_Init+0x23e>
  {
  }
  /* USER CODE END USART2_Init 2 */


}
 8001046:	46c0      	nop			@ (mov r8, r8)
 8001048:	46c0      	nop			@ (mov r8, r8)
 800104a:	46bd      	mov	sp, r7
 800104c:	b00f      	add	sp, #60	@ 0x3c
 800104e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001050:	40020000 	.word	0x40020000
 8001054:	40004400 	.word	0x40004400
 8001058:	20000028 	.word	0x20000028
 800105c:	20000000 	.word	0x20000000

08001060 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8001064:	2001      	movs	r0, #1
 8001066:	f7ff fc43 	bl	80008f0 <LL_AHB1_GRP1_EnableClock>
  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
//  NVIC_SetPriority(DMA1_Channel1_IRQn, 0);
//  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0);
 800106a:	2100      	movs	r1, #0
 800106c:	200a      	movs	r0, #10
 800106e:	f7ff f8ef 	bl	8000250 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001072:	200a      	movs	r0, #10
 8001074:	f7ff f8d2 	bl	800021c <__NVIC_EnableIRQ>

}
 8001078:	46c0      	nop			@ (mov r8, r8)
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b086      	sub	sp, #24
 8001082:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	003b      	movs	r3, r7
 8001086:	0018      	movs	r0, r3
 8001088:	2318      	movs	r3, #24
 800108a:	001a      	movs	r2, r3
 800108c:	2100      	movs	r1, #0
 800108e:	f000 fe23 	bl	8001cd8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */


  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8001092:	2001      	movs	r0, #1
 8001094:	f7ff fc6e 	bl	8000974 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED4_GPIO_Port, LED4_Pin);
 8001098:	23a0      	movs	r3, #160	@ 0xa0
 800109a:	05db      	lsls	r3, r3, #23
 800109c:	2120      	movs	r1, #32
 800109e:	0018      	movs	r0, r3
 80010a0:	f7ff fdfd 	bl	8000c9e <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LED4_Pin;
 80010a4:	003b      	movs	r3, r7
 80010a6:	2220      	movs	r2, #32
 80010a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80010aa:	003b      	movs	r3, r7
 80010ac:	2201      	movs	r2, #1
 80010ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80010b0:	003b      	movs	r3, r7
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010b6:	003b      	movs	r3, r7
 80010b8:	2200      	movs	r2, #0
 80010ba:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010bc:	003b      	movs	r3, r7
 80010be:	2200      	movs	r2, #0
 80010c0:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 80010c2:	003a      	movs	r2, r7
 80010c4:	23a0      	movs	r3, #160	@ 0xa0
 80010c6:	05db      	lsls	r3, r3, #23
 80010c8:	0011      	movs	r1, r2
 80010ca:	0018      	movs	r0, r3
 80010cc:	f000 fa4a 	bl	8001564 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */

}
 80010d0:	46c0      	nop			@ (mov r8, r8)
 80010d2:	46bd      	mov	sp, r7
 80010d4:	b006      	add	sp, #24
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <UserButton_Init>:

/* USER CODE BEGIN 4 */
void UserButton_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  USER_BUTTON_GPIO_CLK_ENABLE();
 80010dc:	2004      	movs	r0, #4
 80010de:	f7ff fc49 	bl	8000974 <LL_IOP_GRP1_EnableClock>

  /* Configure GPIO for BUTTON */
  LL_GPIO_SetPinMode(USER_BUTTON_GPIO_PORT, USER_BUTTON_PIN, LL_GPIO_MODE_INPUT);
 80010e2:	2380      	movs	r3, #128	@ 0x80
 80010e4:	019b      	lsls	r3, r3, #6
 80010e6:	4812      	ldr	r0, [pc, #72]	@ (8001130 <UserButton_Init+0x58>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	0019      	movs	r1, r3
 80010ec:	f7ff fd9f 	bl	8000c2e <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinPull(USER_BUTTON_GPIO_PORT, USER_BUTTON_PIN, LL_GPIO_PULL_NO);
 80010f0:	2380      	movs	r3, #128	@ 0x80
 80010f2:	019b      	lsls	r3, r3, #6
 80010f4:	480e      	ldr	r0, [pc, #56]	@ (8001130 <UserButton_Init+0x58>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	0019      	movs	r1, r3
 80010fa:	f7ff fdb4 	bl	8000c66 <LL_GPIO_SetPinPull>

  /* Connect External Line to the GPIO*/
  USER_BUTTON_SYSCFG_SET_EXTI();
 80010fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001134 <UserButton_Init+0x5c>)
 8001100:	0019      	movs	r1, r3
 8001102:	2002      	movs	r0, #2
 8001104:	f7ff fc92 	bl	8000a2c <LL_EXTI_SetEXTISource>

  /* Enable a rising trigger EXTI_Line4_15 Interrupt */
  USER_BUTTON_EXTI_LINE_ENABLE();
 8001108:	2380      	movs	r3, #128	@ 0x80
 800110a:	019b      	lsls	r3, r3, #6
 800110c:	0018      	movs	r0, r3
 800110e:	f7ff fc6b 	bl	80009e8 <LL_EXTI_EnableIT_0_31>
  USER_BUTTON_EXTI_FALLING_TRIG_ENABLE();
 8001112:	2380      	movs	r3, #128	@ 0x80
 8001114:	019b      	lsls	r3, r3, #6
 8001116:	0018      	movs	r0, r3
 8001118:	f7ff fc78 	bl	8000a0c <LL_EXTI_EnableFallingTrig_0_31>

  /* Configure NVIC for USER_BUTTON_EXTI_IRQn */
  NVIC_SetPriority(USER_BUTTON_EXTI_IRQn, 3);
 800111c:	2103      	movs	r1, #3
 800111e:	2007      	movs	r0, #7
 8001120:	f7ff f896 	bl	8000250 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USER_BUTTON_EXTI_IRQn);
 8001124:	2007      	movs	r0, #7
 8001126:	f7ff f879 	bl	800021c <__NVIC_EnableIRQ>
}
 800112a:	46c0      	nop			@ (mov r8, r8)
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	50000800 	.word	0x50000800
 8001134:	00080003 	.word	0x00080003

08001138 <LED_Off>:
  /* Turn LED4 on */
  LL_GPIO_SetOutputPin(LED4_GPIO_Port, LED4_Pin);
}

void LED_Off(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* Turn LED4 off */
  LL_GPIO_ResetOutputPin(LED4_GPIO_Port, LED4_Pin);
 800113c:	23a0      	movs	r3, #160	@ 0xa0
 800113e:	05db      	lsls	r3, r3, #23
 8001140:	2120      	movs	r1, #32
 8001142:	0018      	movs	r0, r3
 8001144:	f7ff fdab 	bl	8000c9e <LL_GPIO_ResetOutputPin>
}
 8001148:	46c0      	nop			@ (mov r8, r8)
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <LED_Blinking>:

void LED_Blinking(uint32_t Period)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
  /* Toggle LED4 in an infinite loop */
  while (1)
  {
    LL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8001156:	23a0      	movs	r3, #160	@ 0xa0
 8001158:	05db      	lsls	r3, r3, #23
 800115a:	2120      	movs	r1, #32
 800115c:	0018      	movs	r0, r3
 800115e:	f7ff fdaa 	bl	8000cb6 <LL_GPIO_TogglePin>
    LL_mDelay(Period);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	0018      	movs	r0, r3
 8001166:	f000 fd85 	bl	8001c74 <LL_mDelay>
    LL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 800116a:	46c0      	nop			@ (mov r8, r8)
 800116c:	e7f3      	b.n	8001156 <LED_Blinking+0x8>
	...

08001170 <WaitForUserButtonPress>:
  }
}


void WaitForUserButtonPress(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  while (ubButtonPress == 0)
 8001174:	e008      	b.n	8001188 <WaitForUserButtonPress+0x18>
  {
    LL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8001176:	23a0      	movs	r3, #160	@ 0xa0
 8001178:	05db      	lsls	r3, r3, #23
 800117a:	2120      	movs	r1, #32
 800117c:	0018      	movs	r0, r3
 800117e:	f7ff fd9a 	bl	8000cb6 <LL_GPIO_TogglePin>
    LL_mDelay(200);
 8001182:	20c8      	movs	r0, #200	@ 0xc8
 8001184:	f000 fd76 	bl	8001c74 <LL_mDelay>
  while (ubButtonPress == 0)
 8001188:	4b04      	ldr	r3, [pc, #16]	@ (800119c <WaitForUserButtonPress+0x2c>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b00      	cmp	r3, #0
 8001190:	d0f1      	beq.n	8001176 <WaitForUserButtonPress+0x6>
  }
  /* Ensure that LED4 is turned Off */
  LED_Off();
 8001192:	f7ff ffd1 	bl	8001138 <LED_Off>
}
 8001196:	46c0      	nop			@ (mov r8, r8)
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000024 	.word	0x20000024

080011a0 <StartTransfer>:

void StartTransfer(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* Enable DMA RX Interrupt */
  LL_USART_EnableDMAReq_RX(USART2);
 80011a4:	4b05      	ldr	r3, [pc, #20]	@ (80011bc <StartTransfer+0x1c>)
 80011a6:	0018      	movs	r0, r3
 80011a8:	f7ff fd0e 	bl	8000bc8 <LL_USART_EnableDMAReq_RX>

  /* Enable DMA TX Interrupt */

  /* Enable DMA Channel Rx */
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_2);
 80011ac:	4b04      	ldr	r3, [pc, #16]	@ (80011c0 <StartTransfer+0x20>)
 80011ae:	2101      	movs	r1, #1
 80011b0:	0018      	movs	r0, r3
 80011b2:	f7ff f8bb 	bl	800032c <LL_DMA_EnableChannel>

  /* Enable DMA Channel Tx */

}
 80011b6:	46c0      	nop			@ (mov r8, r8)
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40004400 	.word	0x40004400
 80011c0:	40020000 	.word	0x40020000

080011c4 <WaitAndCheckEndOfTransfer>:


void WaitAndCheckEndOfTransfer(void){
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
	while(ubReceptionComplete != 1)
 80011c8:	46c0      	nop			@ (mov r8, r8)
 80011ca:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <WaitAndCheckEndOfTransfer+0x20>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d1fa      	bne.n	80011ca <WaitAndCheckEndOfTransfer+0x6>
	{
	}

	LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_2);
 80011d4:	4b04      	ldr	r3, [pc, #16]	@ (80011e8 <WaitAndCheckEndOfTransfer+0x24>)
 80011d6:	2101      	movs	r1, #1
 80011d8:	0018      	movs	r0, r3
 80011da:	f7ff f8c7 	bl	800036c <LL_DMA_DisableChannel>
//	  else
//	  {
//	    /* Turn On Led if data are well received */
//	    LED_On();
//	  }
}
 80011de:	46c0      	nop			@ (mov r8, r8)
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000154 	.word	0x20000154
 80011e8:	40020000 	.word	0x40020000

080011ec <DMA1_ReceiveComplete_Callback>:
}



void DMA1_ReceiveComplete_Callback(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	ubReceptionComplete=1;
 80011f0:	4b02      	ldr	r3, [pc, #8]	@ (80011fc <DMA1_ReceiveComplete_Callback+0x10>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	701a      	strb	r2, [r3, #0]
}
 80011f6:	46c0      	nop			@ (mov r8, r8)
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000154 	.word	0x20000154

08001200 <UserButton_Callback>:

void UserButton_Callback(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* Update User push-button variable : to be checked in waiting loop in main program */
  ubButtonPress = 1;
 8001204:	4b02      	ldr	r3, [pc, #8]	@ (8001210 <UserButton_Callback+0x10>)
 8001206:	2201      	movs	r2, #1
 8001208:	701a      	strb	r2, [r3, #0]
}
 800120a:	46c0      	nop			@ (mov r8, r8)
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000024 	.word	0x20000024

08001214 <ResetFlags>:

void ResetFlags(void){
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0

	/* Buffer used for reception */
	ubReceptionComplete = 0;
 8001218:	4b02      	ldr	r3, [pc, #8]	@ (8001224 <ResetFlags+0x10>)
 800121a:	2200      	movs	r2, #0
 800121c:	701a      	strb	r2, [r3, #0]
}
 800121e:	46c0      	nop			@ (mov r8, r8)
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000154 	.word	0x20000154

08001228 <USART_TransferError_Callback>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void USART_TransferError_Callback(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* Disable DMA1 Tx Channel */
  LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_1);
 800122c:	4b08      	ldr	r3, [pc, #32]	@ (8001250 <USART_TransferError_Callback+0x28>)
 800122e:	2100      	movs	r1, #0
 8001230:	0018      	movs	r0, r3
 8001232:	f7ff f89b 	bl	800036c <LL_DMA_DisableChannel>

  /* Disable DMA1 Rx Channel */
  LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_2);
 8001236:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <USART_TransferError_Callback+0x28>)
 8001238:	2101      	movs	r1, #1
 800123a:	0018      	movs	r0, r3
 800123c:	f7ff f896 	bl	800036c <LL_DMA_DisableChannel>

  /* Set LED4 to Blinking mode to indicate error occurs */
  LED_Blinking(500);
 8001240:	23fa      	movs	r3, #250	@ 0xfa
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	0018      	movs	r0, r3
 8001246:	f7ff ff82 	bl	800114e <LED_Blinking>
}
 800124a:	46c0      	nop			@ (mov r8, r8)
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40020000 	.word	0x40020000

08001254 <LL_DMA_IsActiveFlag_TC2>:
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF2) == (DMA_ISR_TCIF2)) ? 1UL : 0UL);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2220      	movs	r2, #32
 8001262:	4013      	ands	r3, r2
 8001264:	2b20      	cmp	r3, #32
 8001266:	d101      	bne.n	800126c <LL_DMA_IsActiveFlag_TC2+0x18>
 8001268:	2301      	movs	r3, #1
 800126a:	e000      	b.n	800126e <LL_DMA_IsActiveFlag_TC2+0x1a>
 800126c:	2300      	movs	r3, #0
}
 800126e:	0018      	movs	r0, r3
 8001270:	46bd      	mov	sp, r7
 8001272:	b002      	add	sp, #8
 8001274:	bd80      	pop	{r7, pc}

08001276 <LL_DMA_IsActiveFlag_TE2>:
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF2) == (DMA_ISR_TEIF2)) ? 1UL : 0UL);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2280      	movs	r2, #128	@ 0x80
 8001284:	4013      	ands	r3, r2
 8001286:	2b80      	cmp	r3, #128	@ 0x80
 8001288:	d101      	bne.n	800128e <LL_DMA_IsActiveFlag_TE2+0x18>
 800128a:	2301      	movs	r3, #1
 800128c:	e000      	b.n	8001290 <LL_DMA_IsActiveFlag_TE2+0x1a>
 800128e:	2300      	movs	r3, #0
}
 8001290:	0018      	movs	r0, r3
 8001292:	46bd      	mov	sp, r7
 8001294:	b002      	add	sp, #8
 8001296:	bd80      	pop	{r7, pc}

08001298 <LL_DMA_ClearFlag_TC2>:
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF2);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2220      	movs	r2, #32
 80012a4:	605a      	str	r2, [r3, #4]
}
 80012a6:	46c0      	nop			@ (mov r8, r8)
 80012a8:	46bd      	mov	sp, r7
 80012aa:	b002      	add	sp, #8
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <LL_EXTI_IsActiveFallingFlag_0_31>:
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->FPR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80012b8:	4b06      	ldr	r3, [pc, #24]	@ (80012d4 <LL_EXTI_IsActiveFallingFlag_0_31+0x24>)
 80012ba:	691b      	ldr	r3, [r3, #16]
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	4013      	ands	r3, r2
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d101      	bne.n	80012ca <LL_EXTI_IsActiveFallingFlag_0_31+0x1a>
 80012c6:	2301      	movs	r3, #1
 80012c8:	e000      	b.n	80012cc <LL_EXTI_IsActiveFallingFlag_0_31+0x1c>
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	0018      	movs	r0, r3
 80012ce:	46bd      	mov	sp, r7
 80012d0:	b002      	add	sp, #8
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40021800 	.word	0x40021800

080012d8 <LL_EXTI_ClearFallingFlag_0_31>:
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 80012e0:	4b03      	ldr	r3, [pc, #12]	@ (80012f0 <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	611a      	str	r2, [r3, #16]
}
 80012e6:	46c0      	nop			@ (mov r8, r8)
 80012e8:	46bd      	mov	sp, r7
 80012ea:	b002      	add	sp, #8
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	46c0      	nop			@ (mov r8, r8)
 80012f0:	40021800 	.word	0x40021800

080012f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012f8:	46c0      	nop			@ (mov r8, r8)
 80012fa:	e7fd      	b.n	80012f8 <NMI_Handler+0x4>

080012fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001300:	46c0      	nop			@ (mov r8, r8)
 8001302:	e7fd      	b.n	8001300 <HardFault_Handler+0x4>

08001304 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001308:	46c0      	nop			@ (mov r8, r8)
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001312:	46c0      	nop			@ (mov r8, r8)
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800131c:	46c0      	nop			@ (mov r8, r8)
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001326:	46c0      	nop			@ (mov r8, r8)
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */
	if (LL_DMA_IsActiveFlag_TC2(DMA1))
 8001330:	4b0b      	ldr	r3, [pc, #44]	@ (8001360 <DMA1_Channel2_3_IRQHandler+0x34>)
 8001332:	0018      	movs	r0, r3
 8001334:	f7ff ff8e 	bl	8001254 <LL_DMA_IsActiveFlag_TC2>
 8001338:	1e03      	subs	r3, r0, #0
 800133a:	d006      	beq.n	800134a <DMA1_Channel2_3_IRQHandler+0x1e>
  {
    LL_DMA_ClearFlag_TC2(DMA1);
 800133c:	4b08      	ldr	r3, [pc, #32]	@ (8001360 <DMA1_Channel2_3_IRQHandler+0x34>)
 800133e:	0018      	movs	r0, r3
 8001340:	f7ff ffaa 	bl	8001298 <LL_DMA_ClearFlag_TC2>
    /* Call function Reception complete Callback */
    DMA1_ReceiveComplete_Callback();
 8001344:	f7ff ff52 	bl	80011ec <DMA1_ReceiveComplete_Callback>
  /* USER CODE END DMA1_Channel2_3_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001348:	e007      	b.n	800135a <DMA1_Channel2_3_IRQHandler+0x2e>
  else if (LL_DMA_IsActiveFlag_TE2(DMA1))
 800134a:	4b05      	ldr	r3, [pc, #20]	@ (8001360 <DMA1_Channel2_3_IRQHandler+0x34>)
 800134c:	0018      	movs	r0, r3
 800134e:	f7ff ff92 	bl	8001276 <LL_DMA_IsActiveFlag_TE2>
 8001352:	1e03      	subs	r3, r0, #0
 8001354:	d001      	beq.n	800135a <DMA1_Channel2_3_IRQHandler+0x2e>
    USART_TransferError_Callback();
 8001356:	f7ff ff67 	bl	8001228 <USART_TransferError_Callback>
}
 800135a:	46c0      	nop			@ (mov r8, r8)
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40020000 	.word	0x40020000

08001364 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001368:	46c0      	nop			@ (mov r8, r8)
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <EXTI4_15_IRQHandler>:

/* USER CODE BEGIN 1 */
void USER_BUTTON_IRQHANDLER(void)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	af00      	add	r7, sp, #0
  /* Manage Flags */
  if (LL_EXTI_IsActiveFallingFlag_0_31(USER_BUTTON_EXTI_LINE) != RESET)
 8001372:	2380      	movs	r3, #128	@ 0x80
 8001374:	019b      	lsls	r3, r3, #6
 8001376:	0018      	movs	r0, r3
 8001378:	f7ff ff9a 	bl	80012b0 <LL_EXTI_IsActiveFallingFlag_0_31>
 800137c:	1e03      	subs	r3, r0, #0
 800137e:	d006      	beq.n	800138e <EXTI4_15_IRQHandler+0x20>
  {
    LL_EXTI_ClearFallingFlag_0_31(USER_BUTTON_EXTI_LINE);
 8001380:	2380      	movs	r3, #128	@ 0x80
 8001382:	019b      	lsls	r3, r3, #6
 8001384:	0018      	movs	r0, r3
 8001386:	f7ff ffa7 	bl	80012d8 <LL_EXTI_ClearFallingFlag_0_31>

    /* Handle User push-button press in dedicated function */
    UserButton_Callback();
 800138a:	f7ff ff39 	bl	8001200 <UserButton_Callback>
  }
}
 800138e:	46c0      	nop			@ (mov r8, r8)
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001398:	46c0      	nop			@ (mov r8, r8)
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013a0:	480d      	ldr	r0, [pc, #52]	@ (80013d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013a2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013a4:	f7ff fff6 	bl	8001394 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013a8:	480c      	ldr	r0, [pc, #48]	@ (80013dc <LoopForever+0x6>)
  ldr r1, =_edata
 80013aa:	490d      	ldr	r1, [pc, #52]	@ (80013e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013ac:	4a0d      	ldr	r2, [pc, #52]	@ (80013e4 <LoopForever+0xe>)
  movs r3, #0
 80013ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b0:	e002      	b.n	80013b8 <LoopCopyDataInit>

080013b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013b6:	3304      	adds	r3, #4

080013b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013bc:	d3f9      	bcc.n	80013b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013be:	4a0a      	ldr	r2, [pc, #40]	@ (80013e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013c0:	4c0a      	ldr	r4, [pc, #40]	@ (80013ec <LoopForever+0x16>)
  movs r3, #0
 80013c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c4:	e001      	b.n	80013ca <LoopFillZerobss>

080013c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c8:	3204      	adds	r2, #4

080013ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013cc:	d3fb      	bcc.n	80013c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013ce:	f000 fc8b 	bl	8001ce8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80013d2:	f7ff fc87 	bl	8000ce4 <main>

080013d6 <LoopForever>:

LoopForever:
  b LoopForever
 80013d6:	e7fe      	b.n	80013d6 <LoopForever>
  ldr   r0, =_estack
 80013d8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80013dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e0:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 80013e4:	08001de8 	.word	0x08001de8
  ldr r2, =_sbss
 80013e8:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 80013ec:	20000158 	.word	0x20000158

080013f0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013f0:	e7fe      	b.n	80013f0 <ADC1_COMP_IRQHandler>

080013f2 <LL_GPIO_SetPinMode>:
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b084      	sub	sp, #16
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	60f8      	str	r0, [r7, #12]
 80013fa:	60b9      	str	r1, [r7, #8]
 80013fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6819      	ldr	r1, [r3, #0]
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	435b      	muls	r3, r3
 8001406:	001a      	movs	r2, r3
 8001408:	0013      	movs	r3, r2
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	189b      	adds	r3, r3, r2
 800140e:	43db      	mvns	r3, r3
 8001410:	400b      	ands	r3, r1
 8001412:	001a      	movs	r2, r3
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	435b      	muls	r3, r3
 8001418:	6879      	ldr	r1, [r7, #4]
 800141a:	434b      	muls	r3, r1
 800141c:	431a      	orrs	r2, r3
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	601a      	str	r2, [r3, #0]
}
 8001422:	46c0      	nop			@ (mov r8, r8)
 8001424:	46bd      	mov	sp, r7
 8001426:	b004      	add	sp, #16
 8001428:	bd80      	pop	{r7, pc}

0800142a <LL_GPIO_SetPinOutputType>:
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b084      	sub	sp, #16
 800142e:	af00      	add	r7, sp, #0
 8001430:	60f8      	str	r0, [r7, #12]
 8001432:	60b9      	str	r1, [r7, #8]
 8001434:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	68ba      	ldr	r2, [r7, #8]
 800143c:	43d2      	mvns	r2, r2
 800143e:	401a      	ands	r2, r3
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	434b      	muls	r3, r1
 8001446:	431a      	orrs	r2, r3
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	605a      	str	r2, [r3, #4]
}
 800144c:	46c0      	nop			@ (mov r8, r8)
 800144e:	46bd      	mov	sp, r7
 8001450:	b004      	add	sp, #16
 8001452:	bd80      	pop	{r7, pc}

08001454 <LL_GPIO_SetPinSpeed>:
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	6899      	ldr	r1, [r3, #8]
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	435b      	muls	r3, r3
 8001468:	001a      	movs	r2, r3
 800146a:	0013      	movs	r3, r2
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	189b      	adds	r3, r3, r2
 8001470:	43db      	mvns	r3, r3
 8001472:	400b      	ands	r3, r1
 8001474:	001a      	movs	r2, r3
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	435b      	muls	r3, r3
 800147a:	6879      	ldr	r1, [r7, #4]
 800147c:	434b      	muls	r3, r1
 800147e:	431a      	orrs	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	609a      	str	r2, [r3, #8]
}
 8001484:	46c0      	nop			@ (mov r8, r8)
 8001486:	46bd      	mov	sp, r7
 8001488:	b004      	add	sp, #16
 800148a:	bd80      	pop	{r7, pc}

0800148c <LL_GPIO_SetPinPull>:
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	68d9      	ldr	r1, [r3, #12]
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	435b      	muls	r3, r3
 80014a0:	001a      	movs	r2, r3
 80014a2:	0013      	movs	r3, r2
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	189b      	adds	r3, r3, r2
 80014a8:	43db      	mvns	r3, r3
 80014aa:	400b      	ands	r3, r1
 80014ac:	001a      	movs	r2, r3
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	435b      	muls	r3, r3
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	434b      	muls	r3, r1
 80014b6:	431a      	orrs	r2, r3
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	60da      	str	r2, [r3, #12]
}
 80014bc:	46c0      	nop			@ (mov r8, r8)
 80014be:	46bd      	mov	sp, r7
 80014c0:	b004      	add	sp, #16
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <LL_GPIO_SetAFPin_0_7>:
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6a19      	ldr	r1, [r3, #32]
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	435b      	muls	r3, r3
 80014d8:	68ba      	ldr	r2, [r7, #8]
 80014da:	4353      	muls	r3, r2
 80014dc:	68ba      	ldr	r2, [r7, #8]
 80014de:	435a      	muls	r2, r3
 80014e0:	0013      	movs	r3, r2
 80014e2:	011b      	lsls	r3, r3, #4
 80014e4:	1a9b      	subs	r3, r3, r2
 80014e6:	43db      	mvns	r3, r3
 80014e8:	400b      	ands	r3, r1
 80014ea:	001a      	movs	r2, r3
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	435b      	muls	r3, r3
 80014f0:	68b9      	ldr	r1, [r7, #8]
 80014f2:	434b      	muls	r3, r1
 80014f4:	68b9      	ldr	r1, [r7, #8]
 80014f6:	434b      	muls	r3, r1
 80014f8:	6879      	ldr	r1, [r7, #4]
 80014fa:	434b      	muls	r3, r1
 80014fc:	431a      	orrs	r2, r3
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	621a      	str	r2, [r3, #32]
}
 8001502:	46c0      	nop			@ (mov r8, r8)
 8001504:	46bd      	mov	sp, r7
 8001506:	b004      	add	sp, #16
 8001508:	bd80      	pop	{r7, pc}

0800150a <LL_GPIO_SetAFPin_8_15>:
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b084      	sub	sp, #16
 800150e:	af00      	add	r7, sp, #0
 8001510:	60f8      	str	r0, [r7, #12]
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	0a1b      	lsrs	r3, r3, #8
 800151e:	68ba      	ldr	r2, [r7, #8]
 8001520:	0a12      	lsrs	r2, r2, #8
 8001522:	4353      	muls	r3, r2
 8001524:	68ba      	ldr	r2, [r7, #8]
 8001526:	0a12      	lsrs	r2, r2, #8
 8001528:	4353      	muls	r3, r2
 800152a:	68ba      	ldr	r2, [r7, #8]
 800152c:	0a12      	lsrs	r2, r2, #8
 800152e:	435a      	muls	r2, r3
 8001530:	0013      	movs	r3, r2
 8001532:	011b      	lsls	r3, r3, #4
 8001534:	1a9b      	subs	r3, r3, r2
 8001536:	43db      	mvns	r3, r3
 8001538:	400b      	ands	r3, r1
 800153a:	001a      	movs	r2, r3
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	0a1b      	lsrs	r3, r3, #8
 8001540:	68b9      	ldr	r1, [r7, #8]
 8001542:	0a09      	lsrs	r1, r1, #8
 8001544:	434b      	muls	r3, r1
 8001546:	68b9      	ldr	r1, [r7, #8]
 8001548:	0a09      	lsrs	r1, r1, #8
 800154a:	434b      	muls	r3, r1
 800154c:	68b9      	ldr	r1, [r7, #8]
 800154e:	0a09      	lsrs	r1, r1, #8
 8001550:	434b      	muls	r3, r1
 8001552:	6879      	ldr	r1, [r7, #4]
 8001554:	434b      	muls	r3, r1
 8001556:	431a      	orrs	r2, r3
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800155c:	46c0      	nop			@ (mov r8, r8)
 800155e:	46bd      	mov	sp, r7
 8001560:	b004      	add	sp, #16
 8001562:	bd80      	pop	{r7, pc}

08001564 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001572:	e047      	b.n	8001604 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2101      	movs	r1, #1
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	4091      	lsls	r1, r2
 800157e:	000a      	movs	r2, r1
 8001580:	4013      	ands	r3, r2
 8001582:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d039      	beq.n	80015fe <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d003      	beq.n	800159a <LL_GPIO_Init+0x36>
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2b02      	cmp	r3, #2
 8001598:	d10d      	bne.n	80015b6 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	689a      	ldr	r2, [r3, #8]
 800159e:	68b9      	ldr	r1, [r7, #8]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	0018      	movs	r0, r3
 80015a4:	f7ff ff56 	bl	8001454 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	68da      	ldr	r2, [r3, #12]
 80015ac:	68b9      	ldr	r1, [r7, #8]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	0018      	movs	r0, r3
 80015b2:	f7ff ff3a 	bl	800142a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	691a      	ldr	r2, [r3, #16]
 80015ba:	68b9      	ldr	r1, [r7, #8]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	0018      	movs	r0, r3
 80015c0:	f7ff ff64 	bl	800148c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d111      	bne.n	80015f0 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	2bff      	cmp	r3, #255	@ 0xff
 80015d0:	d807      	bhi.n	80015e2 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	695a      	ldr	r2, [r3, #20]
 80015d6:	68b9      	ldr	r1, [r7, #8]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	0018      	movs	r0, r3
 80015dc:	f7ff ff72 	bl	80014c4 <LL_GPIO_SetAFPin_0_7>
 80015e0:	e006      	b.n	80015f0 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	695a      	ldr	r2, [r3, #20]
 80015e6:	68b9      	ldr	r1, [r7, #8]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	0018      	movs	r0, r3
 80015ec:	f7ff ff8d 	bl	800150a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685a      	ldr	r2, [r3, #4]
 80015f4:	68b9      	ldr	r1, [r7, #8]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	0018      	movs	r0, r3
 80015fa:	f7ff fefa 	bl	80013f2 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	3301      	adds	r3, #1
 8001602:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	40da      	lsrs	r2, r3
 800160c:	1e13      	subs	r3, r2, #0
 800160e:	d1b1      	bne.n	8001574 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8001610:	2300      	movs	r3, #0
}
 8001612:	0018      	movs	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	b004      	add	sp, #16
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <LL_RCC_HSI_IsReady>:
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001620:	4b07      	ldr	r3, [pc, #28]	@ (8001640 <LL_RCC_HSI_IsReady+0x24>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	2380      	movs	r3, #128	@ 0x80
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	401a      	ands	r2, r3
 800162a:	2380      	movs	r3, #128	@ 0x80
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	429a      	cmp	r2, r3
 8001630:	d101      	bne.n	8001636 <LL_RCC_HSI_IsReady+0x1a>
 8001632:	2301      	movs	r3, #1
 8001634:	e000      	b.n	8001638 <LL_RCC_HSI_IsReady+0x1c>
 8001636:	2300      	movs	r3, #0
}
 8001638:	0018      	movs	r0, r3
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	46c0      	nop			@ (mov r8, r8)
 8001640:	40021000 	.word	0x40021000

08001644 <LL_RCC_LSE_IsReady>:
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001648:	4b05      	ldr	r3, [pc, #20]	@ (8001660 <LL_RCC_LSE_IsReady+0x1c>)
 800164a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800164c:	2202      	movs	r2, #2
 800164e:	4013      	ands	r3, r2
 8001650:	2b02      	cmp	r3, #2
 8001652:	d101      	bne.n	8001658 <LL_RCC_LSE_IsReady+0x14>
 8001654:	2301      	movs	r3, #1
 8001656:	e000      	b.n	800165a <LL_RCC_LSE_IsReady+0x16>
 8001658:	2300      	movs	r3, #0
}
 800165a:	0018      	movs	r0, r3
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40021000 	.word	0x40021000

08001664 <LL_RCC_GetSysClkSource>:
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001668:	4b03      	ldr	r3, [pc, #12]	@ (8001678 <LL_RCC_GetSysClkSource+0x14>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	2238      	movs	r2, #56	@ 0x38
 800166e:	4013      	ands	r3, r2
}
 8001670:	0018      	movs	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	46c0      	nop			@ (mov r8, r8)
 8001678:	40021000 	.word	0x40021000

0800167c <LL_RCC_GetAHBPrescaler>:
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001680:	4b03      	ldr	r3, [pc, #12]	@ (8001690 <LL_RCC_GetAHBPrescaler+0x14>)
 8001682:	689a      	ldr	r2, [r3, #8]
 8001684:	23f0      	movs	r3, #240	@ 0xf0
 8001686:	011b      	lsls	r3, r3, #4
 8001688:	4013      	ands	r3, r2
}
 800168a:	0018      	movs	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40021000 	.word	0x40021000

08001694 <LL_RCC_GetAPB1Prescaler>:
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001698:	4b03      	ldr	r3, [pc, #12]	@ (80016a8 <LL_RCC_GetAPB1Prescaler+0x14>)
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	23e0      	movs	r3, #224	@ 0xe0
 800169e:	01db      	lsls	r3, r3, #7
 80016a0:	4013      	ands	r3, r2
}
 80016a2:	0018      	movs	r0, r3
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40021000 	.word	0x40021000

080016ac <LL_RCC_GetUSARTClockSource>:
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80016b4:	4b05      	ldr	r3, [pc, #20]	@ (80016cc <LL_RCC_GetUSARTClockSource+0x20>)
 80016b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	401a      	ands	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	041b      	lsls	r3, r3, #16
 80016c0:	4313      	orrs	r3, r2
}
 80016c2:	0018      	movs	r0, r3
 80016c4:	46bd      	mov	sp, r7
 80016c6:	b002      	add	sp, #8
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	46c0      	nop			@ (mov r8, r8)
 80016cc:	40021000 	.word	0x40021000

080016d0 <LL_RCC_PLL_GetN>:
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80016d4:	4b03      	ldr	r3, [pc, #12]	@ (80016e4 <LL_RCC_PLL_GetN+0x14>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	0a1b      	lsrs	r3, r3, #8
 80016da:	227f      	movs	r2, #127	@ 0x7f
 80016dc:	4013      	ands	r3, r2
}
 80016de:	0018      	movs	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40021000 	.word	0x40021000

080016e8 <LL_RCC_PLL_GetR>:
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80016ec:	4b03      	ldr	r3, [pc, #12]	@ (80016fc <LL_RCC_PLL_GetR+0x14>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	0f5b      	lsrs	r3, r3, #29
 80016f2:	075b      	lsls	r3, r3, #29
}
 80016f4:	0018      	movs	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	46c0      	nop			@ (mov r8, r8)
 80016fc:	40021000 	.word	0x40021000

08001700 <LL_RCC_PLL_GetMainSource>:
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001704:	4b03      	ldr	r3, [pc, #12]	@ (8001714 <LL_RCC_PLL_GetMainSource+0x14>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	2203      	movs	r2, #3
 800170a:	4013      	ands	r3, r2
}
 800170c:	0018      	movs	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	46c0      	nop			@ (mov r8, r8)
 8001714:	40021000 	.word	0x40021000

08001718 <LL_RCC_PLL_GetDivider>:
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800171c:	4b03      	ldr	r3, [pc, #12]	@ (800172c <LL_RCC_PLL_GetDivider+0x14>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	2270      	movs	r2, #112	@ 0x70
 8001722:	4013      	ands	r3, r2
}
 8001724:	0018      	movs	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	46c0      	nop			@ (mov r8, r8)
 800172c:	40021000 	.word	0x40021000

08001730 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001738:	f000 f8a8 	bl	800188c <RCC_GetSystemClockFreq>
 800173c:	0002      	movs	r2, r0
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	0018      	movs	r0, r3
 8001748:	f000 f8ce 	bl	80018e8 <RCC_GetHCLKClockFreq>
 800174c:	0002      	movs	r2, r0
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	0018      	movs	r0, r3
 8001758:	f000 f8de 	bl	8001918 <RCC_GetPCLK1ClockFreq>
 800175c:	0002      	movs	r2, r0
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	609a      	str	r2, [r3, #8]
}
 8001762:	46c0      	nop			@ (mov r8, r8)
 8001764:	46bd      	mov	sp, r7
 8001766:	b002      	add	sp, #8
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001774:	2300      	movs	r3, #0
 8001776:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2b03      	cmp	r3, #3
 800177c:	d134      	bne.n	80017e8 <LL_RCC_GetUSARTClockFreq+0x7c>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	0018      	movs	r0, r3
 8001782:	f7ff ff93 	bl	80016ac <LL_RCC_GetUSARTClockSource>
 8001786:	0003      	movs	r3, r0
 8001788:	4a39      	ldr	r2, [pc, #228]	@ (8001870 <LL_RCC_GetUSARTClockFreq+0x104>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d016      	beq.n	80017bc <LL_RCC_GetUSARTClockFreq+0x50>
 800178e:	4a38      	ldr	r2, [pc, #224]	@ (8001870 <LL_RCC_GetUSARTClockFreq+0x104>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d81c      	bhi.n	80017ce <LL_RCC_GetUSARTClockFreq+0x62>
 8001794:	4a37      	ldr	r2, [pc, #220]	@ (8001874 <LL_RCC_GetUSARTClockFreq+0x108>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d003      	beq.n	80017a2 <LL_RCC_GetUSARTClockFreq+0x36>
 800179a:	4a37      	ldr	r2, [pc, #220]	@ (8001878 <LL_RCC_GetUSARTClockFreq+0x10c>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d005      	beq.n	80017ac <LL_RCC_GetUSARTClockFreq+0x40>
 80017a0:	e015      	b.n	80017ce <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80017a2:	f000 f873 	bl	800188c <RCC_GetSystemClockFreq>
 80017a6:	0003      	movs	r3, r0
 80017a8:	60fb      	str	r3, [r7, #12]
        break;
 80017aa:	e05c      	b.n	8001866 <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 80017ac:	f7ff ff36 	bl	800161c <LL_RCC_HSI_IsReady>
 80017b0:	0003      	movs	r3, r0
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d150      	bne.n	8001858 <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = HSI_VALUE;
 80017b6:	4b31      	ldr	r3, [pc, #196]	@ (800187c <LL_RCC_GetUSARTClockFreq+0x110>)
 80017b8:	60fb      	str	r3, [r7, #12]
        }
        break;
 80017ba:	e04d      	b.n	8001858 <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 80017bc:	f7ff ff42 	bl	8001644 <LL_RCC_LSE_IsReady>
 80017c0:	0003      	movs	r3, r0
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d14a      	bne.n	800185c <LL_RCC_GetUSARTClockFreq+0xf0>
        {
          usart_frequency = LSE_VALUE;
 80017c6:	2380      	movs	r3, #128	@ 0x80
 80017c8:	021b      	lsls	r3, r3, #8
 80017ca:	60fb      	str	r3, [r7, #12]
        }
        break;
 80017cc:	e046      	b.n	800185c <LL_RCC_GetUSARTClockFreq+0xf0>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80017ce:	f000 f85d 	bl	800188c <RCC_GetSystemClockFreq>
 80017d2:	0003      	movs	r3, r0
 80017d4:	0018      	movs	r0, r3
 80017d6:	f000 f887 	bl	80018e8 <RCC_GetHCLKClockFreq>
 80017da:	0003      	movs	r3, r0
 80017dc:	0018      	movs	r0, r3
 80017de:	f000 f89b 	bl	8001918 <RCC_GetPCLK1ClockFreq>
 80017e2:	0003      	movs	r3, r0
 80017e4:	60fb      	str	r3, [r7, #12]
        break;
 80017e6:	e03e      	b.n	8001866 <LL_RCC_GetUSARTClockFreq+0xfa>
    }
  }
#if defined(RCC_CCIPR_USART2SEL)
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b0c      	cmp	r3, #12
 80017ec:	d13b      	bne.n	8001866 <LL_RCC_GetUSARTClockFreq+0xfa>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	0018      	movs	r0, r3
 80017f2:	f7ff ff5b 	bl	80016ac <LL_RCC_GetUSARTClockSource>
 80017f6:	0003      	movs	r3, r0
 80017f8:	4a21      	ldr	r2, [pc, #132]	@ (8001880 <LL_RCC_GetUSARTClockFreq+0x114>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d016      	beq.n	800182c <LL_RCC_GetUSARTClockFreq+0xc0>
 80017fe:	4a20      	ldr	r2, [pc, #128]	@ (8001880 <LL_RCC_GetUSARTClockFreq+0x114>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d81c      	bhi.n	800183e <LL_RCC_GetUSARTClockFreq+0xd2>
 8001804:	4a1f      	ldr	r2, [pc, #124]	@ (8001884 <LL_RCC_GetUSARTClockFreq+0x118>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d003      	beq.n	8001812 <LL_RCC_GetUSARTClockFreq+0xa6>
 800180a:	4a1f      	ldr	r2, [pc, #124]	@ (8001888 <LL_RCC_GetUSARTClockFreq+0x11c>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d005      	beq.n	800181c <LL_RCC_GetUSARTClockFreq+0xb0>
 8001810:	e015      	b.n	800183e <LL_RCC_GetUSARTClockFreq+0xd2>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001812:	f000 f83b 	bl	800188c <RCC_GetSystemClockFreq>
 8001816:	0003      	movs	r3, r0
 8001818:	60fb      	str	r3, [r7, #12]
        break;
 800181a:	e024      	b.n	8001866 <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800181c:	f7ff fefe 	bl	800161c <LL_RCC_HSI_IsReady>
 8001820:	0003      	movs	r3, r0
 8001822:	2b01      	cmp	r3, #1
 8001824:	d11c      	bne.n	8001860 <LL_RCC_GetUSARTClockFreq+0xf4>
        {
          usart_frequency = HSI_VALUE;
 8001826:	4b15      	ldr	r3, [pc, #84]	@ (800187c <LL_RCC_GetUSARTClockFreq+0x110>)
 8001828:	60fb      	str	r3, [r7, #12]
        }
        break;
 800182a:	e019      	b.n	8001860 <LL_RCC_GetUSARTClockFreq+0xf4>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800182c:	f7ff ff0a 	bl	8001644 <LL_RCC_LSE_IsReady>
 8001830:	0003      	movs	r3, r0
 8001832:	2b01      	cmp	r3, #1
 8001834:	d116      	bne.n	8001864 <LL_RCC_GetUSARTClockFreq+0xf8>
        {
          usart_frequency = LSE_VALUE;
 8001836:	2380      	movs	r3, #128	@ 0x80
 8001838:	021b      	lsls	r3, r3, #8
 800183a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800183c:	e012      	b.n	8001864 <LL_RCC_GetUSARTClockFreq+0xf8>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800183e:	f000 f825 	bl	800188c <RCC_GetSystemClockFreq>
 8001842:	0003      	movs	r3, r0
 8001844:	0018      	movs	r0, r3
 8001846:	f000 f84f 	bl	80018e8 <RCC_GetHCLKClockFreq>
 800184a:	0003      	movs	r3, r0
 800184c:	0018      	movs	r0, r3
 800184e:	f000 f863 	bl	8001918 <RCC_GetPCLK1ClockFreq>
 8001852:	0003      	movs	r3, r0
 8001854:	60fb      	str	r3, [r7, #12]
        break;
 8001856:	e006      	b.n	8001866 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 8001858:	46c0      	nop			@ (mov r8, r8)
 800185a:	e004      	b.n	8001866 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800185c:	46c0      	nop			@ (mov r8, r8)
 800185e:	e002      	b.n	8001866 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 8001860:	46c0      	nop			@ (mov r8, r8)
 8001862:	e000      	b.n	8001866 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 8001864:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 8001866:	68fb      	ldr	r3, [r7, #12]
}
 8001868:	0018      	movs	r0, r3
 800186a:	46bd      	mov	sp, r7
 800186c:	b004      	add	sp, #16
 800186e:	bd80      	pop	{r7, pc}
 8001870:	00030003 	.word	0x00030003
 8001874:	00030001 	.word	0x00030001
 8001878:	00030002 	.word	0x00030002
 800187c:	00f42400 	.word	0x00f42400
 8001880:	000c000c 	.word	0x000c000c
 8001884:	000c0004 	.word	0x000c0004
 8001888:	000c0008 	.word	0x000c0008

0800188c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001892:	f7ff fee7 	bl	8001664 <LL_RCC_GetSysClkSource>
 8001896:	0003      	movs	r3, r0
 8001898:	2b08      	cmp	r3, #8
 800189a:	d002      	beq.n	80018a2 <RCC_GetSystemClockFreq+0x16>
 800189c:	2b10      	cmp	r3, #16
 800189e:	d003      	beq.n	80018a8 <RCC_GetSystemClockFreq+0x1c>
 80018a0:	e007      	b.n	80018b2 <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80018a2:	4b0e      	ldr	r3, [pc, #56]	@ (80018dc <RCC_GetSystemClockFreq+0x50>)
 80018a4:	607b      	str	r3, [r7, #4]
      break;
 80018a6:	e014      	b.n	80018d2 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80018a8:	f000 f84c 	bl	8001944 <RCC_PLL_GetFreqDomain_SYS>
 80018ac:	0003      	movs	r3, r0
 80018ae:	607b      	str	r3, [r7, #4]
      break;
 80018b0:	e00f      	b.n	80018d2 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80018b2:	4b0b      	ldr	r3, [pc, #44]	@ (80018e0 <RCC_GetSystemClockFreq+0x54>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	0adb      	lsrs	r3, r3, #11
 80018b8:	2207      	movs	r2, #7
 80018ba:	4013      	ands	r3, r2
 80018bc:	2201      	movs	r2, #1
 80018be:	409a      	lsls	r2, r3
 80018c0:	0013      	movs	r3, r2
 80018c2:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 80018c4:	6839      	ldr	r1, [r7, #0]
 80018c6:	4807      	ldr	r0, [pc, #28]	@ (80018e4 <RCC_GetSystemClockFreq+0x58>)
 80018c8:	f7fe fc1c 	bl	8000104 <__udivsi3>
 80018cc:	0003      	movs	r3, r0
 80018ce:	607b      	str	r3, [r7, #4]
      break;
 80018d0:	46c0      	nop			@ (mov r8, r8)
  }

  return frequency;
 80018d2:	687b      	ldr	r3, [r7, #4]
}
 80018d4:	0018      	movs	r0, r3
 80018d6:	46bd      	mov	sp, r7
 80018d8:	b002      	add	sp, #8
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	007a1200 	.word	0x007a1200
 80018e0:	40021000 	.word	0x40021000
 80018e4:	00f42400 	.word	0x00f42400

080018e8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80018f0:	f7ff fec4 	bl	800167c <LL_RCC_GetAHBPrescaler>
 80018f4:	0003      	movs	r3, r0
 80018f6:	0a1b      	lsrs	r3, r3, #8
 80018f8:	220f      	movs	r2, #15
 80018fa:	401a      	ands	r2, r3
 80018fc:	4b05      	ldr	r3, [pc, #20]	@ (8001914 <RCC_GetHCLKClockFreq+0x2c>)
 80018fe:	0092      	lsls	r2, r2, #2
 8001900:	58d3      	ldr	r3, [r2, r3]
 8001902:	221f      	movs	r2, #31
 8001904:	4013      	ands	r3, r2
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	40da      	lsrs	r2, r3
 800190a:	0013      	movs	r3, r2
}
 800190c:	0018      	movs	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	b002      	add	sp, #8
 8001912:	bd80      	pop	{r7, pc}
 8001914:	08001d50 	.word	0x08001d50

08001918 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001920:	f7ff feb8 	bl	8001694 <LL_RCC_GetAPB1Prescaler>
 8001924:	0003      	movs	r3, r0
 8001926:	0b1a      	lsrs	r2, r3, #12
 8001928:	4b05      	ldr	r3, [pc, #20]	@ (8001940 <RCC_GetPCLK1ClockFreq+0x28>)
 800192a:	0092      	lsls	r2, r2, #2
 800192c:	58d3      	ldr	r3, [r2, r3]
 800192e:	221f      	movs	r2, #31
 8001930:	4013      	ands	r3, r2
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	40da      	lsrs	r2, r3
 8001936:	0013      	movs	r3, r2
}
 8001938:	0018      	movs	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	b002      	add	sp, #8
 800193e:	bd80      	pop	{r7, pc}
 8001940:	08001d90 	.word	0x08001d90

08001944 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001944:	b590      	push	{r4, r7, lr}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800194a:	f7ff fed9 	bl	8001700 <LL_RCC_PLL_GetMainSource>
 800194e:	0003      	movs	r3, r0
 8001950:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	2b02      	cmp	r3, #2
 8001956:	d003      	beq.n	8001960 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	2b03      	cmp	r3, #3
 800195c:	d003      	beq.n	8001966 <RCC_PLL_GetFreqDomain_SYS+0x22>
 800195e:	e005      	b.n	800196c <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8001960:	4b13      	ldr	r3, [pc, #76]	@ (80019b0 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8001962:	607b      	str	r3, [r7, #4]
      break;
 8001964:	e005      	b.n	8001972 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001966:	4b13      	ldr	r3, [pc, #76]	@ (80019b4 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 8001968:	607b      	str	r3, [r7, #4]
      break;
 800196a:	e002      	b.n	8001972 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 800196c:	4b10      	ldr	r3, [pc, #64]	@ (80019b0 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800196e:	607b      	str	r3, [r7, #4]
      break;
 8001970:	46c0      	nop			@ (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001972:	f7ff fead 	bl	80016d0 <LL_RCC_PLL_GetN>
 8001976:	0002      	movs	r2, r0
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4353      	muls	r3, r2
 800197c:	001c      	movs	r4, r3
 800197e:	f7ff fecb 	bl	8001718 <LL_RCC_PLL_GetDivider>
 8001982:	0003      	movs	r3, r0
 8001984:	091b      	lsrs	r3, r3, #4
 8001986:	3301      	adds	r3, #1
 8001988:	0019      	movs	r1, r3
 800198a:	0020      	movs	r0, r4
 800198c:	f7fe fbba 	bl	8000104 <__udivsi3>
 8001990:	0003      	movs	r3, r0
 8001992:	001c      	movs	r4, r3
 8001994:	f7ff fea8 	bl	80016e8 <LL_RCC_PLL_GetR>
 8001998:	0003      	movs	r3, r0
 800199a:	0f5b      	lsrs	r3, r3, #29
 800199c:	3301      	adds	r3, #1
 800199e:	0019      	movs	r1, r3
 80019a0:	0020      	movs	r0, r4
 80019a2:	f7fe fbaf 	bl	8000104 <__udivsi3>
 80019a6:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 80019a8:	0018      	movs	r0, r3
 80019aa:	46bd      	mov	sp, r7
 80019ac:	b003      	add	sp, #12
 80019ae:	bd90      	pop	{r4, r7, pc}
 80019b0:	00f42400 	.word	0x00f42400
 80019b4:	007a1200 	.word	0x007a1200

080019b8 <LL_USART_IsEnabled>:
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2201      	movs	r2, #1
 80019c6:	4013      	ands	r3, r2
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d101      	bne.n	80019d0 <LL_USART_IsEnabled+0x18>
 80019cc:	2301      	movs	r3, #1
 80019ce:	e000      	b.n	80019d2 <LL_USART_IsEnabled+0x1a>
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	0018      	movs	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	b002      	add	sp, #8
 80019d8:	bd80      	pop	{r7, pc}

080019da <LL_USART_SetPrescaler>:
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
 80019e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019e8:	220f      	movs	r2, #15
 80019ea:	4393      	bics	r3, r2
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	b292      	uxth	r2, r2
 80019f0:	431a      	orrs	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80019f6:	46c0      	nop			@ (mov r8, r8)
 80019f8:	46bd      	mov	sp, r7
 80019fa:	b002      	add	sp, #8
 80019fc:	bd80      	pop	{r7, pc}
	...

08001a00 <LL_USART_SetStopBitsLength>:
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	4a05      	ldr	r2, [pc, #20]	@ (8001a24 <LL_USART_SetStopBitsLength+0x24>)
 8001a10:	401a      	ands	r2, r3
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	431a      	orrs	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	605a      	str	r2, [r3, #4]
}
 8001a1a:	46c0      	nop			@ (mov r8, r8)
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	b002      	add	sp, #8
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	46c0      	nop			@ (mov r8, r8)
 8001a24:	ffffcfff 	.word	0xffffcfff

08001a28 <LL_USART_SetHWFlowCtrl>:
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	4a05      	ldr	r2, [pc, #20]	@ (8001a4c <LL_USART_SetHWFlowCtrl+0x24>)
 8001a38:	401a      	ands	r2, r3
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	431a      	orrs	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	609a      	str	r2, [r3, #8]
}
 8001a42:	46c0      	nop			@ (mov r8, r8)
 8001a44:	46bd      	mov	sp, r7
 8001a46:	b002      	add	sp, #8
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	46c0      	nop			@ (mov r8, r8)
 8001a4c:	fffffcff 	.word	0xfffffcff

08001a50 <LL_USART_SetBaudRate>:
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
 8001a5c:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b0b      	cmp	r3, #11
 8001a62:	d846      	bhi.n	8001af2 <LL_USART_SetBaudRate+0xa2>
  else if (BaudRate == 0U)
 8001a64:	6a3b      	ldr	r3, [r7, #32]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d043      	beq.n	8001af2 <LL_USART_SetBaudRate+0xa2>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	2380      	movs	r3, #128	@ 0x80
 8001a6e:	021b      	lsls	r3, r3, #8
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d126      	bne.n	8001ac2 <LL_USART_SetBaudRate+0x72>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	001a      	movs	r2, r3
 8001a7a:	4b20      	ldr	r3, [pc, #128]	@ (8001afc <LL_USART_SetBaudRate+0xac>)
 8001a7c:	0092      	lsls	r2, r2, #2
 8001a7e:	58d3      	ldr	r3, [r2, r3]
 8001a80:	0019      	movs	r1, r3
 8001a82:	68b8      	ldr	r0, [r7, #8]
 8001a84:	f7fe fb3e 	bl	8000104 <__udivsi3>
 8001a88:	0003      	movs	r3, r0
 8001a8a:	005a      	lsls	r2, r3, #1
 8001a8c:	6a3b      	ldr	r3, [r7, #32]
 8001a8e:	085b      	lsrs	r3, r3, #1
 8001a90:	18d3      	adds	r3, r2, r3
 8001a92:	6a39      	ldr	r1, [r7, #32]
 8001a94:	0018      	movs	r0, r3
 8001a96:	f7fe fb35 	bl	8000104 <__udivsi3>
 8001a9a:	0003      	movs	r3, r0
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	4a17      	ldr	r2, [pc, #92]	@ (8001b00 <LL_USART_SetBaudRate+0xb0>)
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	085b      	lsrs	r3, r3, #1
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	001a      	movs	r2, r3
 8001ab0:	2307      	movs	r3, #7
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	60da      	str	r2, [r3, #12]
}
 8001ac0:	e017      	b.n	8001af2 <LL_USART_SetBaudRate+0xa2>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	001a      	movs	r2, r3
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8001afc <LL_USART_SetBaudRate+0xac>)
 8001aca:	0092      	lsls	r2, r2, #2
 8001acc:	58d3      	ldr	r3, [r2, r3]
 8001ace:	0019      	movs	r1, r3
 8001ad0:	68b8      	ldr	r0, [r7, #8]
 8001ad2:	f7fe fb17 	bl	8000104 <__udivsi3>
 8001ad6:	0003      	movs	r3, r0
 8001ad8:	001a      	movs	r2, r3
 8001ada:	6a3b      	ldr	r3, [r7, #32]
 8001adc:	085b      	lsrs	r3, r3, #1
 8001ade:	18d3      	adds	r3, r2, r3
 8001ae0:	6a39      	ldr	r1, [r7, #32]
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	f7fe fb0e 	bl	8000104 <__udivsi3>
 8001ae8:	0003      	movs	r3, r0
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	001a      	movs	r2, r3
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	60da      	str	r2, [r3, #12]
}
 8001af2:	46c0      	nop			@ (mov r8, r8)
 8001af4:	46bd      	mov	sp, r7
 8001af6:	b006      	add	sp, #24
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	46c0      	nop			@ (mov r8, r8)
 8001afc:	08001db0 	.word	0x08001db0
 8001b00:	0000fff0 	.word	0x0000fff0

08001b04 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8001b04:	b590      	push	{r4, r7, lr}
 8001b06:	b08b      	sub	sp, #44	@ 0x2c
 8001b08:	af02      	add	r7, sp, #8
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001b0e:	231f      	movs	r3, #31
 8001b10:	18fb      	adds	r3, r7, r3
 8001b12:	2201      	movs	r2, #1
 8001b14:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001b16:	2300      	movs	r3, #0
 8001b18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	f7ff ff4b 	bl	80019b8 <LL_USART_IsEnabled>
 8001b22:	1e03      	subs	r3, r0, #0
 8001b24:	d16a      	bne.n	8001bfc <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a38      	ldr	r2, [pc, #224]	@ (8001c0c <LL_USART_Init+0x108>)
 8001b2c:	401a      	ands	r2, r3
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	6899      	ldr	r1, [r3, #8]
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	4319      	orrs	r1, r3
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	695b      	ldr	r3, [r3, #20]
 8001b3c:	4319      	orrs	r1, r3
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	430b      	orrs	r3, r1
 8001b44:	431a      	orrs	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	68da      	ldr	r2, [r3, #12]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	0011      	movs	r1, r2
 8001b52:	0018      	movs	r0, r3
 8001b54:	f7ff ff54 	bl	8001a00 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	699a      	ldr	r2, [r3, #24]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	0011      	movs	r1, r2
 8001b60:	0018      	movs	r0, r3
 8001b62:	f7ff ff61 	bl	8001a28 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a29      	ldr	r2, [pc, #164]	@ (8001c10 <LL_USART_Init+0x10c>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d105      	bne.n	8001b7a <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8001b6e:	2003      	movs	r0, #3
 8001b70:	f7ff fdfc 	bl	800176c <LL_RCC_GetUSARTClockFreq>
 8001b74:	0003      	movs	r3, r0
 8001b76:	61bb      	str	r3, [r7, #24]
 8001b78:	e022      	b.n	8001bc0 <LL_USART_Init+0xbc>
    }
    else if (USARTx == USART2)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a25      	ldr	r2, [pc, #148]	@ (8001c14 <LL_USART_Init+0x110>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d105      	bne.n	8001b8e <LL_USART_Init+0x8a>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8001b82:	200c      	movs	r0, #12
 8001b84:	f7ff fdf2 	bl	800176c <LL_RCC_GetUSARTClockFreq>
 8001b88:	0003      	movs	r3, r0
 8001b8a:	61bb      	str	r3, [r7, #24]
 8001b8c:	e018      	b.n	8001bc0 <LL_USART_Init+0xbc>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* USART2 Clock selector flag */
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a21      	ldr	r2, [pc, #132]	@ (8001c18 <LL_USART_Init+0x114>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d108      	bne.n	8001ba8 <LL_USART_Init+0xa4>
    {
#if defined(RCC_CCIPR_USART3SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8001b96:	240c      	movs	r4, #12
 8001b98:	193b      	adds	r3, r7, r4
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	f7ff fdc8 	bl	8001730 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8001ba0:	193b      	adds	r3, r7, r4
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	61bb      	str	r3, [r7, #24]
 8001ba6:	e00b      	b.n	8001bc0 <LL_USART_Init+0xbc>
#endif /* USART3 Clock selector flag */
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a1c      	ldr	r2, [pc, #112]	@ (8001c1c <LL_USART_Init+0x118>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d107      	bne.n	8001bc0 <LL_USART_Init+0xbc>
    {
#if defined(RCC_CCIPR_USART4SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART4_CLKSOURCE);
#else
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8001bb0:	240c      	movs	r4, #12
 8001bb2:	193b      	adds	r3, r7, r4
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	f7ff fdbb 	bl	8001730 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8001bba:	193b      	adds	r3, r7, r4
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d013      	beq.n	8001bee <LL_USART_Init+0xea>
        && (USART_InitStruct->BaudRate != 0U))
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d00f      	beq.n	8001bee <LL_USART_Init+0xea>
    {
      status = SUCCESS;
 8001bce:	231f      	movs	r3, #31
 8001bd0:	18fb      	adds	r3, r7, r3
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->PrescalerValue,
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
                           USART_InitStruct->OverSampling,
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	69dc      	ldr	r4, [r3, #28]
                           USART_InitStruct->BaudRate);
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
      LL_USART_SetBaudRate(USARTx,
 8001be2:	69b9      	ldr	r1, [r7, #24]
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	0023      	movs	r3, r4
 8001bea:	f7ff ff31 	bl	8001a50 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	0011      	movs	r1, r2
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	f7ff feef 	bl	80019da <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001bfc:	231f      	movs	r3, #31
 8001bfe:	18fb      	adds	r3, r7, r3
 8001c00:	781b      	ldrb	r3, [r3, #0]
}
 8001c02:	0018      	movs	r0, r3
 8001c04:	46bd      	mov	sp, r7
 8001c06:	b009      	add	sp, #36	@ 0x24
 8001c08:	bd90      	pop	{r4, r7, pc}
 8001c0a:	46c0      	nop			@ (mov r8, r8)
 8001c0c:	efff69f3 	.word	0xefff69f3
 8001c10:	40013800 	.word	0x40013800
 8001c14:	40004400 	.word	0x40004400
 8001c18:	40004800 	.word	0x40004800
 8001c1c:	40004c00 	.word	0x40004c00

08001c20 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001c2a:	6839      	ldr	r1, [r7, #0]
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f7fe fa69 	bl	8000104 <__udivsi3>
 8001c32:	0003      	movs	r3, r0
 8001c34:	001a      	movs	r2, r3
 8001c36:	4b06      	ldr	r3, [pc, #24]	@ (8001c50 <LL_InitTick+0x30>)
 8001c38:	3a01      	subs	r2, #1
 8001c3a:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001c3c:	4b04      	ldr	r3, [pc, #16]	@ (8001c50 <LL_InitTick+0x30>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c42:	4b03      	ldr	r3, [pc, #12]	@ (8001c50 <LL_InitTick+0x30>)
 8001c44:	2205      	movs	r2, #5
 8001c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001c48:	46c0      	nop			@ (mov r8, r8)
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	b002      	add	sp, #8
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	e000e010 	.word	0xe000e010

08001c54 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001c5c:	23fa      	movs	r3, #250	@ 0xfa
 8001c5e:	009a      	lsls	r2, r3, #2
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	0011      	movs	r1, r2
 8001c64:	0018      	movs	r0, r3
 8001c66:	f7ff ffdb 	bl	8001c20 <LL_InitTick>
}
 8001c6a:	46c0      	nop			@ (mov r8, r8)
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	b002      	add	sp, #8
 8001c70:	bd80      	pop	{r7, pc}
	...

08001c74 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001c7c:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb8 <LL_mDelay+0x44>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	60bb      	str	r3, [r7, #8]
   uint32_t tmpDelay; /* MISRAC2012-Rule-17.8 */
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001c82:	68bb      	ldr	r3, [r7, #8]
  tmpDelay  = Delay;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	60fb      	str	r3, [r7, #12]
  /* Add a period to guaranty minimum wait */
  if (tmpDelay  < LL_MAX_DELAY)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	d00c      	beq.n	8001ca8 <LL_mDelay+0x34>
  {
    tmpDelay ++;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	3301      	adds	r3, #1
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	e008      	b.n	8001ca8 <LL_mDelay+0x34>
  }

  while (tmpDelay  != 0U)
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001c96:	4b08      	ldr	r3, [pc, #32]	@ (8001cb8 <LL_mDelay+0x44>)
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	2380      	movs	r3, #128	@ 0x80
 8001c9c:	025b      	lsls	r3, r3, #9
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	d002      	beq.n	8001ca8 <LL_mDelay+0x34>
    {
      tmpDelay --;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	60fb      	str	r3, [r7, #12]
  while (tmpDelay  != 0U)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1f3      	bne.n	8001c96 <LL_mDelay+0x22>
    }
  }
}
 8001cae:	46c0      	nop			@ (mov r8, r8)
 8001cb0:	46c0      	nop			@ (mov r8, r8)
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	b004      	add	sp, #16
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	e000e010 	.word	0xe000e010

08001cbc <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001cc4:	4b03      	ldr	r3, [pc, #12]	@ (8001cd4 <LL_SetSystemCoreClock+0x18>)
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	601a      	str	r2, [r3, #0]
}
 8001cca:	46c0      	nop			@ (mov r8, r8)
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	b002      	add	sp, #8
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	46c0      	nop			@ (mov r8, r8)
 8001cd4:	20000004 	.word	0x20000004

08001cd8 <memset>:
 8001cd8:	0003      	movs	r3, r0
 8001cda:	1882      	adds	r2, r0, r2
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d100      	bne.n	8001ce2 <memset+0xa>
 8001ce0:	4770      	bx	lr
 8001ce2:	7019      	strb	r1, [r3, #0]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	e7f9      	b.n	8001cdc <memset+0x4>

08001ce8 <__libc_init_array>:
 8001ce8:	b570      	push	{r4, r5, r6, lr}
 8001cea:	2600      	movs	r6, #0
 8001cec:	4c0c      	ldr	r4, [pc, #48]	@ (8001d20 <__libc_init_array+0x38>)
 8001cee:	4d0d      	ldr	r5, [pc, #52]	@ (8001d24 <__libc_init_array+0x3c>)
 8001cf0:	1b64      	subs	r4, r4, r5
 8001cf2:	10a4      	asrs	r4, r4, #2
 8001cf4:	42a6      	cmp	r6, r4
 8001cf6:	d109      	bne.n	8001d0c <__libc_init_array+0x24>
 8001cf8:	2600      	movs	r6, #0
 8001cfa:	f000 f819 	bl	8001d30 <_init>
 8001cfe:	4c0a      	ldr	r4, [pc, #40]	@ (8001d28 <__libc_init_array+0x40>)
 8001d00:	4d0a      	ldr	r5, [pc, #40]	@ (8001d2c <__libc_init_array+0x44>)
 8001d02:	1b64      	subs	r4, r4, r5
 8001d04:	10a4      	asrs	r4, r4, #2
 8001d06:	42a6      	cmp	r6, r4
 8001d08:	d105      	bne.n	8001d16 <__libc_init_array+0x2e>
 8001d0a:	bd70      	pop	{r4, r5, r6, pc}
 8001d0c:	00b3      	lsls	r3, r6, #2
 8001d0e:	58eb      	ldr	r3, [r5, r3]
 8001d10:	4798      	blx	r3
 8001d12:	3601      	adds	r6, #1
 8001d14:	e7ee      	b.n	8001cf4 <__libc_init_array+0xc>
 8001d16:	00b3      	lsls	r3, r6, #2
 8001d18:	58eb      	ldr	r3, [r5, r3]
 8001d1a:	4798      	blx	r3
 8001d1c:	3601      	adds	r6, #1
 8001d1e:	e7f2      	b.n	8001d06 <__libc_init_array+0x1e>
 8001d20:	08001de0 	.word	0x08001de0
 8001d24:	08001de0 	.word	0x08001de0
 8001d28:	08001de4 	.word	0x08001de4
 8001d2c:	08001de0 	.word	0x08001de0

08001d30 <_init>:
 8001d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d32:	46c0      	nop			@ (mov r8, r8)
 8001d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d36:	bc08      	pop	{r3}
 8001d38:	469e      	mov	lr, r3
 8001d3a:	4770      	bx	lr

08001d3c <_fini>:
 8001d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d3e:	46c0      	nop			@ (mov r8, r8)
 8001d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d42:	bc08      	pop	{r3}
 8001d44:	469e      	mov	lr, r3
 8001d46:	4770      	bx	lr
